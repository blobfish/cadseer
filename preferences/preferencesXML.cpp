// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "preferencesXML.h"

namespace Preferences
{
  // DecPositive
  // 


  // Mesh
  // 

  const Mesh::LinearDeflectionType& Mesh::
  linearDeflection () const
  {
    return this->linearDeflection_.get ();
  }

  Mesh::LinearDeflectionType& Mesh::
  linearDeflection ()
  {
    return this->linearDeflection_.get ();
  }

  void Mesh::
  linearDeflection (const LinearDeflectionType& x)
  {
    this->linearDeflection_.set (x);
  }

  void Mesh::
  linearDeflection (::std::unique_ptr< LinearDeflectionType > x)
  {
    this->linearDeflection_.set (std::move (x));
  }

  Mesh::LinearDeflectionType Mesh::
  linearDeflection_default_value ()
  {
    return LinearDeflectionType (.25);
  }

  const Mesh::AngularDeflectionType& Mesh::
  angularDeflection () const
  {
    return this->angularDeflection_.get ();
  }

  Mesh::AngularDeflectionType& Mesh::
  angularDeflection ()
  {
    return this->angularDeflection_.get ();
  }

  void Mesh::
  angularDeflection (const AngularDeflectionType& x)
  {
    this->angularDeflection_.set (x);
  }

  void Mesh::
  angularDeflection (::std::unique_ptr< AngularDeflectionType > x)
  {
    this->angularDeflection_.set (std::move (x));
  }

  Mesh::AngularDeflectionType Mesh::
  angularDeflection_default_value ()
  {
    return AngularDeflectionType (.5);
  }


  // Visual
  // 

  const Visual::MeshType& Visual::
  mesh () const
  {
    return this->mesh_.get ();
  }

  Visual::MeshType& Visual::
  mesh ()
  {
    return this->mesh_.get ();
  }

  void Visual::
  mesh (const MeshType& x)
  {
    this->mesh_.set (x);
  }

  void Visual::
  mesh (::std::unique_ptr< MeshType > x)
  {
    this->mesh_.set (std::move (x));
  }


  // Root
  // 

  const Root::VisualType& Root::
  visual () const
  {
    return this->visual_.get ();
  }

  Root::VisualType& Root::
  visual ()
  {
    return this->visual_.get ();
  }

  void Root::
  visual (const VisualType& x)
  {
    this->visual_.set (x);
  }

  void Root::
  visual (::std::unique_ptr< VisualType > x)
  {
    this->visual_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace Preferences
{
  // DecPositive
  //

  DecPositive::
  DecPositive (const ::xml_schema::Decimal& _xsd_Decimal_base)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal > (_xsd_Decimal_base)
  {
  }

  DecPositive::
  DecPositive (const DecPositive& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal > (x, f, c)
  {
  }

  DecPositive::
  DecPositive (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal > (e, f, c)
  {
  }

  DecPositive::
  DecPositive (const ::xercesc::DOMAttr& a,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal > (a, f, c)
  {
  }

  DecPositive::
  DecPositive (const ::std::string& s,
               const ::xercesc::DOMElement* e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
  : ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal > (s, e, f, c)
  {
  }

  DecPositive* DecPositive::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class DecPositive (*this, f, c);
  }

  DecPositive::
  ~DecPositive ()
  {
  }

  // Mesh
  //

  Mesh::
  Mesh (const LinearDeflectionType& linearDeflection,
        const AngularDeflectionType& angularDeflection)
  : ::xml_schema::Type (),
    linearDeflection_ (linearDeflection, this),
    angularDeflection_ (angularDeflection, this)
  {
  }

  Mesh::
  Mesh (const Mesh& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    linearDeflection_ (x.linearDeflection_, f, this),
    angularDeflection_ (x.angularDeflection_, f, this)
  {
  }

  Mesh::
  Mesh (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    linearDeflection_ (this),
    angularDeflection_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Mesh::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // linearDeflection
      //
      if (n.name () == "linearDeflection" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< LinearDeflectionType > r (
          LinearDeflectionTraits::create (i, f, this));

        if (!linearDeflection_.present ())
        {
          this->linearDeflection_.set (::std::move (r));
          continue;
        }
      }

      // angularDeflection
      //
      if (n.name () == "angularDeflection" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< AngularDeflectionType > r (
          AngularDeflectionTraits::create (i, f, this));

        if (!angularDeflection_.present ())
        {
          this->angularDeflection_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!linearDeflection_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "linearDeflection",
        "");
    }

    if (!angularDeflection_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "angularDeflection",
        "");
    }
  }

  Mesh* Mesh::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Mesh (*this, f, c);
  }

  Mesh& Mesh::
  operator= (const Mesh& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->linearDeflection_ = x.linearDeflection_;
      this->angularDeflection_ = x.angularDeflection_;
    }

    return *this;
  }

  Mesh::
  ~Mesh ()
  {
  }

  // Visual
  //

  Visual::
  Visual (const MeshType& mesh)
  : ::xml_schema::Type (),
    mesh_ (mesh, this)
  {
  }

  Visual::
  Visual (::std::unique_ptr< MeshType > mesh)
  : ::xml_schema::Type (),
    mesh_ (std::move (mesh), this)
  {
  }

  Visual::
  Visual (const Visual& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    mesh_ (x.mesh_, f, this)
  {
  }

  Visual::
  Visual (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    mesh_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Visual::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // mesh
      //
      if (n.name () == "mesh" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< MeshType > r (
          MeshTraits::create (i, f, this));

        if (!mesh_.present ())
        {
          this->mesh_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!mesh_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mesh",
        "");
    }
  }

  Visual* Visual::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Visual (*this, f, c);
  }

  Visual& Visual::
  operator= (const Visual& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->mesh_ = x.mesh_;
    }

    return *this;
  }

  Visual::
  ~Visual ()
  {
  }

  // Root
  //

  Root::
  Root (const VisualType& visual)
  : ::xml_schema::Type (),
    visual_ (visual, this)
  {
  }

  Root::
  Root (::std::unique_ptr< VisualType > visual)
  : ::xml_schema::Type (),
    visual_ (std::move (visual), this)
  {
  }

  Root::
  Root (const Root& x,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (x, f, c),
    visual_ (x.visual_, f, this)
  {
  }

  Root::
  Root (const ::xercesc::DOMElement& e,
        ::xml_schema::Flags f,
        ::xml_schema::Container* c)
  : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
    visual_ (this)
  {
    if ((f & ::xml_schema::Flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
      this->parse (p, f);
    }
  }

  void Root::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::Flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // visual
      //
      if (n.name () == "visual" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< VisualType > r (
          VisualTraits::create (i, f, this));

        if (!visual_.present ())
        {
          this->visual_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!visual_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "visual",
        "");
    }
  }

  Root* Root::
  _clone (::xml_schema::Flags f,
          ::xml_schema::Container* c) const
  {
    return new class Root (*this, f, c);
  }

  Root& Root::
  operator= (const Root& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::Type& > (*this) = x;
      this->visual_ = x.visual_;
    }

    return *this;
  }

  Root::
  ~Root ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace Preferences
{
  ::std::unique_ptr< ::Preferences::Root >
  root (const ::std::string& u,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (const ::std::string& u,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Preferences::root (isrc, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Preferences::root (isrc, h, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::Preferences::root (isrc, h, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Preferences::root (isrc, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0,
      (f & ::xml_schema::Flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Preferences::root (isrc, h, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::Preferences::root (isrc, h, f, p);
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::xercesc::InputSource& i,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::xercesc::InputSource& i,
        ::xml_schema::ErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    return ::std::unique_ptr< ::Preferences::Root > (
      ::Preferences::root (
        std::move (d), f | ::xml_schema::Flags::own_dom, p));
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (const ::xercesc::DOMDocument& doc,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties& p)
  {
    if (f & ::xml_schema::Flags::keep_dom)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

      return ::std::unique_ptr< ::Preferences::Root > (
        ::Preferences::root (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "root" &&
        n.namespace_ () == "")
    {
      ::std::unique_ptr< ::Preferences::Root > r (
        ::xsd::cxx::tree::traits< ::Preferences::Root, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "root",
      "");
  }

  ::std::unique_ptr< ::Preferences::Root >
  root (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::Flags f,
        const ::xml_schema::Properties&)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::Flags::keep_dom) &&
       !(f & ::xml_schema::Flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::Flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "root" &&
        n.namespace_ () == "")
    {
      ::std::unique_ptr< ::Preferences::Root > r (
        ::xsd::cxx::tree::traits< ::Preferences::Root, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "root",
      "");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace Preferences
{
  void
  operator<< (::xercesc::DOMElement& e, const DecPositive& i)
  {
    e << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >& > (i);
  }

  void
  operator<< (::xercesc::DOMAttr& a, const DecPositive& i)
  {
    a << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >& > (i);
  }

  void
  operator<< (::xml_schema::ListStream& l,
              const DecPositive& i)
  {
    l << static_cast< const ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >& > (i);
  }

  void
  operator<< (::xercesc::DOMElement& e, const Mesh& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // linearDeflection
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "linearDeflection",
          e));

      s << i.linearDeflection ();
    }

    // angularDeflection
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "angularDeflection",
          e));

      s << i.angularDeflection ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Visual& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // mesh
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mesh",
          e));

      s << i.mesh ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const Root& i)
  {
    e << static_cast< const ::xml_schema::Type& > (i);

    // visual
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "visual",
          e));

      s << i.visual ();
    }
  }

  void
  root (::std::ostream& o,
        const ::Preferences::Root& s,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  root (::std::ostream& o,
        const ::Preferences::Root& s,
        ::xml_schema::ErrorHandler& h,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::Flags::dont_initialize) == 0);

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root (::std::ostream& o,
        const ::Preferences::Root& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root (::xercesc::XMLFormatTarget& t,
        const ::Preferences::Root& s,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  root (::xercesc::XMLFormatTarget& t,
        const ::Preferences::Root& s,
        ::xml_schema::ErrorHandler& h,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root (::xercesc::XMLFormatTarget& t,
        const ::Preferences::Root& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::NamespaceInfomap& m,
        const ::std::string& e,
        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::Preferences::root (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  root (::xercesc::DOMDocument& d,
        const ::Preferences::Root& s,
        ::xml_schema::Flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "root" &&
        n.namespace_ () == "")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "root",
        "");
    }
  }

  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  root (const ::Preferences::Root& s,
        const ::xml_schema::NamespaceInfomap& m,
        ::xml_schema::Flags f)
  {
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "root",
        "",
        m, f));

    ::Preferences::root (*d, s, f);
    return d;
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


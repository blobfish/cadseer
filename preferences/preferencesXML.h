// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from preferencesXML.xsd.
 */

#ifndef PREFERENCES_XML_H
#define PREFERENCES_XML_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../xmlbase.h"

// Forward declarations.
//
namespace prf
{
  class DecPositive;
  class Mesh;
  class Visual;
  class Dragger;
  class InteractiveParameter;
  class RecentProjects;
  class Project;
  class Root;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

/**
 * @brief C++ namespace for the %
 * schema namespace.
 */
namespace prf
{
  /**
   * @brief Class corresponding to the %DecPositive schema type.
   *
   * @nosubgrouping
   */
  class DecPositive: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DecPositive (const ::xml_schema::Decimal&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DecPositive (const DecPositive& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DecPositive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DecPositive ();
  };

  /**
   * @brief Class corresponding to the %Mesh schema type.
   *
   * @nosubgrouping
   */
  class Mesh: public ::xml_schema::Type
  {
    public:
    /**
     * @name linearDeflection
     *
     * @brief Accessor and modifier functions for the %linearDeflection
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive LinearDeflectionType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LinearDeflectionType, char > LinearDeflectionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LinearDeflectionType&
    linearDeflection () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LinearDeflectionType&
    linearDeflection ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    linearDeflection (const LinearDeflectionType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    linearDeflection (::std::unique_ptr< LinearDeflectionType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LinearDeflectionType
    linearDeflection_default_value ();

    //@}

    /**
     * @name angularDeflection
     *
     * @brief Accessor and modifier functions for the %angularDeflection
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive AngularDeflectionType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AngularDeflectionType, char > AngularDeflectionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AngularDeflectionType&
    angularDeflection () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AngularDeflectionType&
    angularDeflection ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    angularDeflection (const AngularDeflectionType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    angularDeflection (::std::unique_ptr< AngularDeflectionType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AngularDeflectionType
    angularDeflection_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Mesh (const LinearDeflectionType&,
          const AngularDeflectionType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mesh (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mesh (const Mesh& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Mesh*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mesh&
    operator= (const Mesh& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Mesh ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LinearDeflectionType > linearDeflection_;
    ::xsd::cxx::tree::one< AngularDeflectionType > angularDeflection_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Visual schema type.
   *
   * @nosubgrouping
   */
  class Visual: public ::xml_schema::Type
  {
    public:
    /**
     * @name mesh
     *
     * @brief Accessor and modifier functions for the %mesh
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Mesh MeshType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MeshType, char > MeshTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MeshType&
    mesh () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MeshType&
    mesh ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    mesh (const MeshType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    mesh (::std::unique_ptr< MeshType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Visual (const MeshType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Visual (::std::unique_ptr< MeshType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Visual (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Visual (const Visual& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Visual*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Visual&
    operator= (const Visual& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Visual ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MeshType > mesh_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Dragger schema type.
   *
   * @nosubgrouping
   */
  class Dragger: public ::xml_schema::Type
  {
    public:
    /**
     * @name triggerUpdateOnFinish
     *
     * @brief Accessor and modifier functions for the %triggerUpdateOnFinish
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Boolean TriggerUpdateOnFinishType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TriggerUpdateOnFinishType, char > TriggerUpdateOnFinishTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const TriggerUpdateOnFinishType&
    triggerUpdateOnFinish () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    TriggerUpdateOnFinishType&
    triggerUpdateOnFinish ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    triggerUpdateOnFinish (const TriggerUpdateOnFinishType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static TriggerUpdateOnFinishType
    triggerUpdateOnFinish_default_value ();

    //@}

    /**
     * @name linearIncrement
     *
     * @brief Accessor and modifier functions for the %linearIncrement
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive LinearIncrementType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LinearIncrementType, char > LinearIncrementTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LinearIncrementType&
    linearIncrement () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LinearIncrementType&
    linearIncrement ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    linearIncrement (const LinearIncrementType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    linearIncrement (::std::unique_ptr< LinearIncrementType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LinearIncrementType
    linearIncrement_default_value ();

    //@}

    /**
     * @name angularIncrement
     *
     * @brief Accessor and modifier functions for the %angularIncrement
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive AngularIncrementType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AngularIncrementType, char > AngularIncrementTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AngularIncrementType&
    angularIncrement () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AngularIncrementType&
    angularIncrement ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    angularIncrement (const AngularIncrementType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    angularIncrement (::std::unique_ptr< AngularIncrementType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AngularIncrementType
    angularIncrement_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Dragger (const TriggerUpdateOnFinishType&,
             const LinearIncrementType&,
             const AngularIncrementType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Dragger (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dragger (const Dragger& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Dragger*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dragger&
    operator= (const Dragger& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Dragger ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TriggerUpdateOnFinishType > triggerUpdateOnFinish_;
    ::xsd::cxx::tree::one< LinearIncrementType > linearIncrement_;
    ::xsd::cxx::tree::one< AngularIncrementType > angularIncrement_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %InteractiveParameter schema type.
   *
   * @nosubgrouping
   */
  class InteractiveParameter: public ::xml_schema::Type
  {
    public:
    /**
     * @name characterSize
     *
     * @brief Accessor and modifier functions for the %characterSize
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive CharacterSizeType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CharacterSizeType, char > CharacterSizeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const CharacterSizeType&
    characterSize () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    CharacterSizeType&
    characterSize ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    characterSize (const CharacterSizeType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    characterSize (::std::unique_ptr< CharacterSizeType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static CharacterSizeType
    characterSize_default_value ();

    //@}

    /**
     * @name arrowWidth
     *
     * @brief Accessor and modifier functions for the %arrowWidth
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive ArrowWidthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrowWidthType, char > ArrowWidthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ArrowWidthType&
    arrowWidth () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ArrowWidthType&
    arrowWidth ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    arrowWidth (const ArrowWidthType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    arrowWidth (::std::unique_ptr< ArrowWidthType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ArrowWidthType
    arrowWidth_default_value ();

    //@}

    /**
     * @name arrowHeight
     *
     * @brief Accessor and modifier functions for the %arrowHeight
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive ArrowHeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrowHeightType, char > ArrowHeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ArrowHeightType&
    arrowHeight () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ArrowHeightType&
    arrowHeight ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    arrowHeight (const ArrowHeightType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    arrowHeight (::std::unique_ptr< ArrowHeightType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ArrowHeightType
    arrowHeight_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    InteractiveParameter (const CharacterSizeType&,
                          const ArrowWidthType&,
                          const ArrowHeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    InteractiveParameter (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    InteractiveParameter (const InteractiveParameter& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual InteractiveParameter*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    InteractiveParameter&
    operator= (const InteractiveParameter& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~InteractiveParameter ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CharacterSizeType > characterSize_;
    ::xsd::cxx::tree::one< ArrowWidthType > arrowWidth_;
    ::xsd::cxx::tree::one< ArrowHeightType > arrowHeight_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %RecentProjects schema type.
   *
   * @nosubgrouping
   */
  class RecentProjects: public ::xml_schema::Type
  {
    public:
    /**
     * @name Entry
     *
     * @brief Accessor and modifier functions for the %Entry
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String EntryType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EntryType > EntrySequence;

    /**
     * @brief Element iterator type.
     */
    typedef EntrySequence::iterator EntryIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EntrySequence::const_iterator EntryConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EntryType, char > EntryTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EntrySequence&
    Entry () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EntrySequence&
    Entry ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    Entry (const EntrySequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    RecentProjects ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RecentProjects (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RecentProjects (const RecentProjects& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual RecentProjects*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RecentProjects&
    operator= (const RecentProjects& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~RecentProjects ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EntrySequence Entry_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Project schema type.
   *
   * @nosubgrouping
   */
  class Project: public ::xml_schema::Type
  {
    public:
    /**
     * @name basePath
     *
     * @brief Accessor and modifier functions for the %basePath
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String BasePathType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BasePathType, char > BasePathTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const BasePathType&
    basePath () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    BasePathType&
    basePath ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    basePath (const BasePathType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    basePath (::std::unique_ptr< BasePathType > p);

    //@}

    /**
     * @name gitName
     *
     * @brief Accessor and modifier functions for the %gitName
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String GitNameType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GitNameType, char > GitNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GitNameType&
    gitName () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GitNameType&
    gitName ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gitName (const GitNameType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    gitName (::std::unique_ptr< GitNameType > p);

    //@}

    /**
     * @name gitEmail
     *
     * @brief Accessor and modifier functions for the %gitEmail
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String GitEmailType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GitEmailType, char > GitEmailTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GitEmailType&
    gitEmail () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GitEmailType&
    gitEmail ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gitEmail (const GitEmailType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    gitEmail (::std::unique_ptr< GitEmailType > p);

    //@}

    /**
     * @name recentProjects
     *
     * @brief Accessor and modifier functions for the %recentProjects
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::RecentProjects RecentProjectsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RecentProjectsType, char > RecentProjectsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RecentProjectsType&
    recentProjects () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RecentProjectsType&
    recentProjects ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    recentProjects (const RecentProjectsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    recentProjects (::std::unique_ptr< RecentProjectsType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Project (const BasePathType&,
             const GitNameType&,
             const GitEmailType&,
             const RecentProjectsType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Project (const BasePathType&,
             const GitNameType&,
             const GitEmailType&,
             ::std::unique_ptr< RecentProjectsType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Project (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Project (const Project& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Project*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Project&
    operator= (const Project& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Project ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< BasePathType > basePath_;
    ::xsd::cxx::tree::one< GitNameType > gitName_;
    ::xsd::cxx::tree::one< GitEmailType > gitEmail_;
    ::xsd::cxx::tree::one< RecentProjectsType > recentProjects_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Root schema type.
   *
   * @nosubgrouping
   */
  class Root: public ::xml_schema::Type
  {
    public:
    /**
     * @name visual
     *
     * @brief Accessor and modifier functions for the %visual
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Visual VisualType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< VisualType, char > VisualTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const VisualType&
    visual () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    VisualType&
    visual ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    visual (const VisualType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    visual (::std::unique_ptr< VisualType > p);

    //@}

    /**
     * @name dragger
     *
     * @brief Accessor and modifier functions for the %dragger
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Dragger DraggerType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DraggerType, char > DraggerTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DraggerType&
    dragger () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DraggerType&
    dragger ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    dragger (const DraggerType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    dragger (::std::unique_ptr< DraggerType > p);

    //@}

    /**
     * @name interactiveParameter
     *
     * @brief Accessor and modifier functions for the %interactiveParameter
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::InteractiveParameter InteractiveParameterType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< InteractiveParameterType, char > InteractiveParameterTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const InteractiveParameterType&
    interactiveParameter () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    InteractiveParameterType&
    interactiveParameter ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    interactiveParameter (const InteractiveParameterType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    interactiveParameter (::std::unique_ptr< InteractiveParameterType > p);

    //@}

    /**
     * @name project
     *
     * @brief Accessor and modifier functions for the %project
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Project ProjectType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ProjectType, char > ProjectTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ProjectType&
    project () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ProjectType&
    project ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    project (const ProjectType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    project (::std::unique_ptr< ProjectType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Root (const VisualType&,
          const DraggerType&,
          const InteractiveParameterType&,
          const ProjectType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Root (::std::unique_ptr< VisualType >,
          ::std::unique_ptr< DraggerType >,
          ::std::unique_ptr< InteractiveParameterType >,
          ::std::unique_ptr< ProjectType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Root (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Root (const Root& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Root*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Root&
    operator= (const Root& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Root ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< VisualType > visual_;
    ::xsd::cxx::tree::one< DraggerType > dragger_;
    ::xsd::cxx::tree::one< InteractiveParameterType > interactiveParameter_;
    ::xsd::cxx::tree::one< ProjectType > project_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prf
{
  /**
   * @name Parsing functions for the %root document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::xercesc::DOMDocument& d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prf
{
  void
  operator<< (::xercesc::DOMElement&, const DecPositive&);

  void
  operator<< (::xercesc::DOMAttr&, const DecPositive&);

  void
  operator<< (::xml_schema::ListStream&,
              const DecPositive&);

  void
  operator<< (::xercesc::DOMElement&, const Mesh&);

  void
  operator<< (::xercesc::DOMElement&, const Visual&);

  void
  operator<< (::xercesc::DOMElement&, const Dragger&);

  void
  operator<< (::xercesc::DOMElement&, const InteractiveParameter&);

  void
  operator<< (::xercesc::DOMElement&, const RecentProjects&);

  void
  operator<< (::xercesc::DOMElement&, const Project&);

  void
  operator<< (::xercesc::DOMElement&, const Root&);

  /**
   * @name Serialization functions for the %root document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  void
  root (::xercesc::DOMDocument& d,
        const ::prf::Root& x,
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  root (const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        ::xml_schema::Flags f = 0);

  //@}
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PREFERENCES_XML_H

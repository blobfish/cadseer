// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from preferencesXML.xsd.
 */

#ifndef PREFERENCES_XML_H
#define PREFERENCES_XML_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../xmlbase.h"

// Forward declarations.
//
namespace prf
{
  class DecPositive;
  class Mesh;
  class RenderStyle;
  class Display;
  class Visual;
  class Dragger;
  class InteractiveParameter;
  class Gesture;
  class RecentProjects;
  class Project;
  class SpaceballButton;
  class SpaceballButtons;
  class HotKeyEntry;
  class HotKeyEntries;
  class HotKeys;
  class Blend;
  class Box;
  class Oblong;
  class Chamfer;
  class Cone;
  class Cylinder;
  class DatumPlane;
  class Draft;
  class Dieset;
  class Hollow;
  class Nest;
  class Quote;
  class Sphere;
  class Squash;
  class Strip;
  class Features;
  class Root;
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

/**
 * @brief C++ namespace for the %
 * schema namespace.
 */
namespace prf
{
  /**
   * @brief Class corresponding to the %DecPositive schema type.
   *
   * @nosubgrouping
   */
  class DecPositive: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >
  {
    public:
    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DecPositive (const ::xml_schema::Decimal&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DecPositive (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DecPositive (const DecPositive& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DecPositive*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DecPositive ();
  };

  /**
   * @brief Class corresponding to the %Mesh schema type.
   *
   * @nosubgrouping
   */
  class Mesh: public ::xml_schema::Type
  {
    public:
    /**
     * @name linearDeflection
     *
     * @brief Accessor and modifier functions for the %linearDeflection
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive LinearDeflectionType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LinearDeflectionType, char > LinearDeflectionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LinearDeflectionType&
    linearDeflection () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LinearDeflectionType&
    linearDeflection ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    linearDeflection (const LinearDeflectionType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    linearDeflection (::std::unique_ptr< LinearDeflectionType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LinearDeflectionType
    linearDeflection_default_value ();

    //@}

    /**
     * @name angularDeflection
     *
     * @brief Accessor and modifier functions for the %angularDeflection
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive AngularDeflectionType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AngularDeflectionType, char > AngularDeflectionTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AngularDeflectionType&
    angularDeflection () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AngularDeflectionType&
    angularDeflection ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    angularDeflection (const AngularDeflectionType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    angularDeflection (::std::unique_ptr< AngularDeflectionType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AngularDeflectionType
    angularDeflection_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Mesh (const LinearDeflectionType&,
          const AngularDeflectionType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Mesh (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mesh (const Mesh& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Mesh*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Mesh&
    operator= (const Mesh& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Mesh ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LinearDeflectionType > linearDeflection_;
    ::xsd::cxx::tree::one< AngularDeflectionType > angularDeflection_;

    //@endcond
  };

  /**
   * @brief Enumeration class corresponding to the %RenderStyle
   * schema type.
   */
  class RenderStyle: public ::xml_schema::String
  {
    public:

    /**
     * @brief Underlying enum type.
     */
    enum Value
    {
      fill,
      triangulation,
      wireframe
    };

    /**
     * @brief Create an instance from the underlying enum value.
     *
     * @param v A enum value.
     */
    RenderStyle (Value v);

    /**
     * @brief Create an instance from a C string.
     *
     * @param v A string value.
     */
    RenderStyle (const char* v);

    /**
     * @brief Create an instance from a string.
     *
     * @param v A string value.
     */
    RenderStyle (const ::std::string& v);

    /**
     * @brief Create an instance from the base value.
     *
     * @param v A base value.
     */
    RenderStyle (const ::xml_schema::String& v);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RenderStyle (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a DOM attribute.
     *
     * @param a A DOM attribute to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RenderStyle (const ::xercesc::DOMAttr& a,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Create an instance from a string fragment.
     *
     * @param s A string fragment to extract the data from.
     * @param e A pointer to DOM element containing the string fragment.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RenderStyle (const ::std::string& s,
                 const ::xercesc::DOMElement* e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RenderStyle (const RenderStyle& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual RenderStyle*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Assign the underlying enum value.
     *
     * @param v A enum value.
     * @return A refernce to the instance.
     */
    RenderStyle&
    operator= (Value v);

    /**
     * @brief Implicit conversion operator to the underlying
     * enum value.
     *
     * @return A enum value.
     */
    virtual
    operator Value () const
    {
      return _xsd_RenderStyle_convert ();
    }

    //@cond

    protected:
    Value
    _xsd_RenderStyle_convert () const;

    public:
    static const char* const _xsd_RenderStyle_literals_[3];
    static const Value _xsd_RenderStyle_indexes_[3];

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Display schema type.
   *
   * @nosubgrouping
   */
  class Display: public ::xml_schema::Type
  {
    public:
    /**
     * @name showHiddenLines
     *
     * @brief Accessor and modifier functions for the %showHiddenLines
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Boolean ShowHiddenLinesType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ShowHiddenLinesType, char > ShowHiddenLinesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ShowHiddenLinesType&
    showHiddenLines () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ShowHiddenLinesType&
    showHiddenLines ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    showHiddenLines (const ShowHiddenLinesType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ShowHiddenLinesType
    showHiddenLines_default_value ();

    //@}

    /**
     * @name showCurrentSystem
     *
     * @brief Accessor and modifier functions for the %showCurrentSystem
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Boolean ShowCurrentSystemType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ShowCurrentSystemType, char > ShowCurrentSystemTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ShowCurrentSystemType&
    showCurrentSystem () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ShowCurrentSystemType&
    showCurrentSystem ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    showCurrentSystem (const ShowCurrentSystemType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ShowCurrentSystemType
    showCurrentSystem_default_value ();

    //@}

    /**
     * @name renderStyle
     *
     * @brief Accessor and modifier functions for the %renderStyle
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::RenderStyle RenderStyleType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< RenderStyleType > RenderStyleOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RenderStyleType, char > RenderStyleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const RenderStyleOptional&
    renderStyle () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    RenderStyleOptional&
    renderStyle ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    renderStyle (const RenderStyleType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    renderStyle (const RenderStyleOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    renderStyle (::std::unique_ptr< RenderStyleType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return A read-only (constant) reference to the element's
     * default value.
     */
    static const RenderStyleType&
    renderStyle_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Display (const ShowHiddenLinesType&,
             const ShowCurrentSystemType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Display (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Display (const Display& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Display*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Display&
    operator= (const Display& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Display ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< ShowHiddenLinesType > showHiddenLines_;
    ::xsd::cxx::tree::one< ShowCurrentSystemType > showCurrentSystem_;
    RenderStyleOptional renderStyle_;
    static const RenderStyleType renderStyle_default_value_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Visual schema type.
   *
   * @nosubgrouping
   */
  class Visual: public ::xml_schema::Type
  {
    public:
    /**
     * @name mesh
     *
     * @brief Accessor and modifier functions for the %mesh
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Mesh MeshType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MeshType, char > MeshTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MeshType&
    mesh () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MeshType&
    mesh ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    mesh (const MeshType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    mesh (::std::unique_ptr< MeshType > p);

    //@}

    /**
     * @name display
     *
     * @brief Accessor and modifier functions for the %display
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Display DisplayType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DisplayType, char > DisplayTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DisplayType&
    display () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DisplayType&
    display ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    display (const DisplayType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    display (::std::unique_ptr< DisplayType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Visual (const MeshType&,
            const DisplayType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Visual (::std::unique_ptr< MeshType >,
            ::std::unique_ptr< DisplayType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Visual (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Visual (const Visual& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Visual*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Visual&
    operator= (const Visual& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Visual ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< MeshType > mesh_;
    ::xsd::cxx::tree::one< DisplayType > display_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Dragger schema type.
   *
   * @nosubgrouping
   */
  class Dragger: public ::xml_schema::Type
  {
    public:
    /**
     * @name triggerUpdateOnFinish
     *
     * @brief Accessor and modifier functions for the %triggerUpdateOnFinish
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Boolean TriggerUpdateOnFinishType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TriggerUpdateOnFinishType, char > TriggerUpdateOnFinishTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const TriggerUpdateOnFinishType&
    triggerUpdateOnFinish () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    TriggerUpdateOnFinishType&
    triggerUpdateOnFinish ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    triggerUpdateOnFinish (const TriggerUpdateOnFinishType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static TriggerUpdateOnFinishType
    triggerUpdateOnFinish_default_value ();

    //@}

    /**
     * @name linearIncrement
     *
     * @brief Accessor and modifier functions for the %linearIncrement
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive LinearIncrementType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LinearIncrementType, char > LinearIncrementTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LinearIncrementType&
    linearIncrement () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LinearIncrementType&
    linearIncrement ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    linearIncrement (const LinearIncrementType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    linearIncrement (::std::unique_ptr< LinearIncrementType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LinearIncrementType
    linearIncrement_default_value ();

    //@}

    /**
     * @name angularIncrement
     *
     * @brief Accessor and modifier functions for the %angularIncrement
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive AngularIncrementType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AngularIncrementType, char > AngularIncrementTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AngularIncrementType&
    angularIncrement () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AngularIncrementType&
    angularIncrement ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    angularIncrement (const AngularIncrementType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    angularIncrement (::std::unique_ptr< AngularIncrementType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AngularIncrementType
    angularIncrement_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Dragger (const TriggerUpdateOnFinishType&,
             const LinearIncrementType&,
             const AngularIncrementType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Dragger (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dragger (const Dragger& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Dragger*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dragger&
    operator= (const Dragger& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Dragger ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TriggerUpdateOnFinishType > triggerUpdateOnFinish_;
    ::xsd::cxx::tree::one< LinearIncrementType > linearIncrement_;
    ::xsd::cxx::tree::one< AngularIncrementType > angularIncrement_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %InteractiveParameter schema type.
   *
   * @nosubgrouping
   */
  class InteractiveParameter: public ::xml_schema::Type
  {
    public:
    /**
     * @name characterSize
     *
     * @brief Accessor and modifier functions for the %characterSize
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive CharacterSizeType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CharacterSizeType, char > CharacterSizeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const CharacterSizeType&
    characterSize () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    CharacterSizeType&
    characterSize ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    characterSize (const CharacterSizeType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    characterSize (::std::unique_ptr< CharacterSizeType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static CharacterSizeType
    characterSize_default_value ();

    //@}

    /**
     * @name arrowWidth
     *
     * @brief Accessor and modifier functions for the %arrowWidth
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive ArrowWidthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrowWidthType, char > ArrowWidthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ArrowWidthType&
    arrowWidth () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ArrowWidthType&
    arrowWidth ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    arrowWidth (const ArrowWidthType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    arrowWidth (::std::unique_ptr< ArrowWidthType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ArrowWidthType
    arrowWidth_default_value ();

    //@}

    /**
     * @name arrowHeight
     *
     * @brief Accessor and modifier functions for the %arrowHeight
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive ArrowHeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrowHeightType, char > ArrowHeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ArrowHeightType&
    arrowHeight () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ArrowHeightType&
    arrowHeight ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    arrowHeight (const ArrowHeightType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    arrowHeight (::std::unique_ptr< ArrowHeightType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static ArrowHeightType
    arrowHeight_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    InteractiveParameter (const CharacterSizeType&,
                          const ArrowWidthType&,
                          const ArrowHeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    InteractiveParameter (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    InteractiveParameter (const InteractiveParameter& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual InteractiveParameter*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    InteractiveParameter&
    operator= (const InteractiveParameter& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~InteractiveParameter ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< CharacterSizeType > characterSize_;
    ::xsd::cxx::tree::one< ArrowWidthType > arrowWidth_;
    ::xsd::cxx::tree::one< ArrowHeightType > arrowHeight_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Gesture schema type.
   *
   * @nosubgrouping
   */
  class Gesture: public ::xml_schema::Type
  {
    public:
    /**
     * @name animationSeconds
     *
     * @brief Accessor and modifier functions for the %animationSeconds
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive AnimationSecondsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AnimationSecondsType, char > AnimationSecondsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AnimationSecondsType&
    animationSeconds () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AnimationSecondsType&
    animationSeconds ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    animationSeconds (const AnimationSecondsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    animationSeconds (::std::unique_ptr< AnimationSecondsType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AnimationSecondsType
    animationSeconds_default_value ();

    //@}

    /**
     * @name iconRadius
     *
     * @brief Accessor and modifier functions for the %iconRadius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Int IconRadiusType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IconRadiusType, char > IconRadiusTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IconRadiusType&
    iconRadius () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IconRadiusType&
    iconRadius ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    iconRadius (const IconRadiusType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static IconRadiusType
    iconRadius_default_value ();

    //@}

    /**
     * @name includeAngle
     *
     * @brief Accessor and modifier functions for the %includeAngle
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Int IncludeAngleType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< IncludeAngleType, char > IncludeAngleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const IncludeAngleType&
    includeAngle () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    IncludeAngleType&
    includeAngle ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    includeAngle (const IncludeAngleType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static IncludeAngleType
    includeAngle_default_value ();

    //@}

    /**
     * @name spreadFactor
     *
     * @brief Accessor and modifier functions for the %spreadFactor
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive SpreadFactorType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SpreadFactorType, char > SpreadFactorTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SpreadFactorType&
    spreadFactor () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SpreadFactorType&
    spreadFactor ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    spreadFactor (const SpreadFactorType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    spreadFactor (::std::unique_ptr< SpreadFactorType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static SpreadFactorType
    spreadFactor_default_value ();

    //@}

    /**
     * @name sprayFactor
     *
     * @brief Accessor and modifier functions for the %sprayFactor
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DecPositive SprayFactorType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SprayFactorType, char > SprayFactorTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SprayFactorType&
    sprayFactor () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SprayFactorType&
    sprayFactor ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    sprayFactor (const SprayFactorType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    sprayFactor (::std::unique_ptr< SprayFactorType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static SprayFactorType
    sprayFactor_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Gesture (const AnimationSecondsType&,
             const IconRadiusType&,
             const IncludeAngleType&,
             const SpreadFactorType&,
             const SprayFactorType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Gesture (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Gesture (const Gesture& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Gesture*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Gesture&
    operator= (const Gesture& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Gesture ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< AnimationSecondsType > animationSeconds_;
    ::xsd::cxx::tree::one< IconRadiusType > iconRadius_;
    ::xsd::cxx::tree::one< IncludeAngleType > includeAngle_;
    ::xsd::cxx::tree::one< SpreadFactorType > spreadFactor_;
    ::xsd::cxx::tree::one< SprayFactorType > sprayFactor_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %RecentProjects schema type.
   *
   * @nosubgrouping
   */
  class RecentProjects: public ::xml_schema::Type
  {
    public:
    /**
     * @name Entry
     *
     * @brief Accessor and modifier functions for the %Entry
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String EntryType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< EntryType > EntrySequence;

    /**
     * @brief Element iterator type.
     */
    typedef EntrySequence::iterator EntryIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef EntrySequence::const_iterator EntryConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< EntryType, char > EntryTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const EntrySequence&
    Entry () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    EntrySequence&
    Entry ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    Entry (const EntrySequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    RecentProjects ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    RecentProjects (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RecentProjects (const RecentProjects& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual RecentProjects*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    RecentProjects&
    operator= (const RecentProjects& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~RecentProjects ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    EntrySequence Entry_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Project schema type.
   *
   * @nosubgrouping
   */
  class Project: public ::xml_schema::Type
  {
    public:
    /**
     * @name basePath
     *
     * @brief Accessor and modifier functions for the %basePath
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String BasePathType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BasePathType, char > BasePathTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const BasePathType&
    basePath () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    BasePathType&
    basePath ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    basePath (const BasePathType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    basePath (::std::unique_ptr< BasePathType > p);

    //@}

    /**
     * @name gitName
     *
     * @brief Accessor and modifier functions for the %gitName
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String GitNameType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GitNameType, char > GitNameTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GitNameType&
    gitName () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GitNameType&
    gitName ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gitName (const GitNameType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    gitName (::std::unique_ptr< GitNameType > p);

    //@}

    /**
     * @name gitEmail
     *
     * @brief Accessor and modifier functions for the %gitEmail
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String GitEmailType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GitEmailType, char > GitEmailTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GitEmailType&
    gitEmail () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GitEmailType&
    gitEmail ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gitEmail (const GitEmailType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    gitEmail (::std::unique_ptr< GitEmailType > p);

    //@}

    /**
     * @name recentProjects
     *
     * @brief Accessor and modifier functions for the %recentProjects
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::RecentProjects RecentProjectsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RecentProjectsType, char > RecentProjectsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RecentProjectsType&
    recentProjects () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RecentProjectsType&
    recentProjects ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    recentProjects (const RecentProjectsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    recentProjects (::std::unique_ptr< RecentProjectsType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Project (const BasePathType&,
             const GitNameType&,
             const GitEmailType&,
             const RecentProjectsType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Project (const BasePathType&,
             const GitNameType&,
             const GitEmailType&,
             ::std::unique_ptr< RecentProjectsType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Project (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Project (const Project& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Project*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Project&
    operator= (const Project& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Project ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< BasePathType > basePath_;
    ::xsd::cxx::tree::one< GitNameType > gitName_;
    ::xsd::cxx::tree::one< GitEmailType > gitEmail_;
    ::xsd::cxx::tree::one< RecentProjectsType > recentProjects_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SpaceballButton schema type.
   *
   * @nosubgrouping
   */
  class SpaceballButton: public ::xml_schema::Type
  {
    public:
    /**
     * @name number
     *
     * @brief Accessor and modifier functions for the %number
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Int NumberType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const NumberType&
    number () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    NumberType&
    number ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    number (const NumberType& x);

    //@}

    /**
     * @name mask
     *
     * @brief Accessor and modifier functions for the %mask
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String MaskType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MaskType, char > MaskTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MaskType&
    mask () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MaskType&
    mask ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    mask (const MaskType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    mask (::std::unique_ptr< MaskType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SpaceballButton (const NumberType&,
                     const MaskType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SpaceballButton (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SpaceballButton (const SpaceballButton& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SpaceballButton*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SpaceballButton&
    operator= (const SpaceballButton& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SpaceballButton ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NumberType > number_;
    ::xsd::cxx::tree::one< MaskType > mask_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %SpaceballButtons schema type.
   *
   * @nosubgrouping
   */
  class SpaceballButtons: public ::xml_schema::Type
  {
    public:
    /**
     * @name array
     *
     * @brief Accessor and modifier functions for the %array
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::SpaceballButton ArrayType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

    /**
     * @brief Element iterator type.
     */
    typedef ArraySequence::iterator ArrayIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ArraySequence::const_iterator ArrayConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ArraySequence&
    array () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ArraySequence&
    array ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    array (const ArraySequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    SpaceballButtons ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    SpaceballButtons (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SpaceballButtons (const SpaceballButtons& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual SpaceballButtons*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    SpaceballButtons&
    operator= (const SpaceballButtons& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~SpaceballButtons ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ArraySequence array_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %HotKeyEntry schema type.
   *
   * @nosubgrouping
   */
  class HotKeyEntry: public ::xml_schema::Type
  {
    public:
    /**
     * @name number
     *
     * @brief Accessor and modifier functions for the %number
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Int NumberType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NumberType, char > NumberTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const NumberType&
    number () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    NumberType&
    number ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    number (const NumberType& x);

    //@}

    /**
     * @name mask
     *
     * @brief Accessor and modifier functions for the %mask
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String MaskType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< MaskType, char > MaskTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const MaskType&
    mask () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    MaskType&
    mask ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    mask (const MaskType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    mask (::std::unique_ptr< MaskType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    HotKeyEntry (const NumberType&,
                 const MaskType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    HotKeyEntry (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeyEntry (const HotKeyEntry& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual HotKeyEntry*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeyEntry&
    operator= (const HotKeyEntry& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~HotKeyEntry ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< NumberType > number_;
    ::xsd::cxx::tree::one< MaskType > mask_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %HotKeyEntries schema type.
   *
   * @nosubgrouping
   */
  class HotKeyEntries: public ::xml_schema::Type
  {
    public:
    /**
     * @name array
     *
     * @brief Accessor and modifier functions for the %array
     * sequence element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::HotKeyEntry ArrayType;

    /**
     * @brief Element sequence container type.
     */
    typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

    /**
     * @brief Element iterator type.
     */
    typedef ArraySequence::iterator ArrayIterator;

    /**
     * @brief Element constant iterator type.
     */
    typedef ArraySequence::const_iterator ArrayConstIterator;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * sequence.
     *
     * @return A constant reference to the sequence container.
     */
    const ArraySequence&
    array () const;

    /**
     * @brief Return a read-write reference to the element sequence.
     *
     * @return A reference to the sequence container.
     */
    ArraySequence&
    array ();

    /**
     * @brief Copy elements from a given sequence.
     *
     * @param s A sequence to copy elements from.
     *
     * For each element in @a s this function makes a copy and adds it 
     * to the sequence. Note that this operation completely changes the 
     * sequence and all old elements will be lost.
     */
    void
    array (const ArraySequence& s);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    HotKeyEntries ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    HotKeyEntries (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeyEntries (const HotKeyEntries& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual HotKeyEntries*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeyEntries&
    operator= (const HotKeyEntries& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~HotKeyEntries ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ArraySequence array_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %HotKeys schema type.
   *
   * @nosubgrouping
   */
  class HotKeys: public ::xml_schema::Type
  {
    public:
    /**
     * @name spaceballButtons
     *
     * @brief Accessor and modifier functions for the %spaceballButtons
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::SpaceballButtons SpaceballButtonsType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SpaceballButtonsType, char > SpaceballButtonsTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const SpaceballButtonsType&
    spaceballButtons () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    SpaceballButtonsType&
    spaceballButtons ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    spaceballButtons (const SpaceballButtonsType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    spaceballButtons (::std::unique_ptr< SpaceballButtonsType > p);

    //@}

    /**
     * @name hotKeyEntries
     *
     * @brief Accessor and modifier functions for the %hotKeyEntries
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::HotKeyEntries HotKeyEntriesType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HotKeyEntriesType, char > HotKeyEntriesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HotKeyEntriesType&
    hotKeyEntries () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HotKeyEntriesType&
    hotKeyEntries ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    hotKeyEntries (const HotKeyEntriesType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    hotKeyEntries (::std::unique_ptr< HotKeyEntriesType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    HotKeys (const SpaceballButtonsType&,
             const HotKeyEntriesType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    HotKeys (::std::unique_ptr< SpaceballButtonsType >,
             ::std::unique_ptr< HotKeyEntriesType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    HotKeys (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeys (const HotKeys& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual HotKeys*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    HotKeys&
    operator= (const HotKeys& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~HotKeys ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< SpaceballButtonsType > spaceballButtons_;
    ::xsd::cxx::tree::one< HotKeyEntriesType > hotKeyEntries_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Blend schema type.
   *
   * @nosubgrouping
   */
  class Blend: public ::xml_schema::Type
  {
    public:
    /**
     * @name radius
     *
     * @brief Accessor and modifier functions for the %radius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double RadiusType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RadiusType, char, ::xsd::cxx::tree::schema_type::double_ > RadiusTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RadiusType&
    radius () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RadiusType&
    radius ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    radius (const RadiusType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static RadiusType
    radius_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Blend (const RadiusType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Blend (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Blend (const Blend& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Blend*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Blend&
    operator= (const Blend& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Blend ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RadiusType > radius_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Box schema type.
   *
   * @nosubgrouping
   */
  class Box: public ::xml_schema::Type
  {
    public:
    /**
     * @name length
     *
     * @brief Accessor and modifier functions for the %length
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double LengthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LengthType, char, ::xsd::cxx::tree::schema_type::double_ > LengthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LengthType&
    length () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LengthType&
    length ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    length (const LengthType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LengthType
    length_default_value ();

    //@}

    /**
     * @name width
     *
     * @brief Accessor and modifier functions for the %width
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double WidthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< WidthType, char, ::xsd::cxx::tree::schema_type::double_ > WidthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const WidthType&
    width () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    WidthType&
    width ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    width (const WidthType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static WidthType
    width_default_value ();

    //@}

    /**
     * @name height
     *
     * @brief Accessor and modifier functions for the %height
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double HeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HeightType, char, ::xsd::cxx::tree::schema_type::double_ > HeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HeightType&
    height () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HeightType&
    height ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    height (const HeightType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static HeightType
    height_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Box (const LengthType&,
         const WidthType&,
         const HeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Box (const ::xercesc::DOMElement& e,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Box (const Box& x,
         ::xml_schema::Flags f = 0,
         ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Box*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Box&
    operator= (const Box& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Box ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LengthType > length_;
    ::xsd::cxx::tree::one< WidthType > width_;
    ::xsd::cxx::tree::one< HeightType > height_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Oblong schema type.
   *
   * @nosubgrouping
   */
  class Oblong: public ::xml_schema::Type
  {
    public:
    /**
     * @name length
     *
     * @brief Accessor and modifier functions for the %length
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double LengthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LengthType, char, ::xsd::cxx::tree::schema_type::double_ > LengthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LengthType&
    length () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LengthType&
    length ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    length (const LengthType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LengthType
    length_default_value ();

    //@}

    /**
     * @name width
     *
     * @brief Accessor and modifier functions for the %width
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double WidthType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< WidthType, char, ::xsd::cxx::tree::schema_type::double_ > WidthTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const WidthType&
    width () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    WidthType&
    width ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    width (const WidthType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static WidthType
    width_default_value ();

    //@}

    /**
     * @name height
     *
     * @brief Accessor and modifier functions for the %height
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double HeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HeightType, char, ::xsd::cxx::tree::schema_type::double_ > HeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HeightType&
    height () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HeightType&
    height ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    height (const HeightType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static HeightType
    height_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Oblong (const LengthType&,
            const WidthType&,
            const HeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Oblong (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Oblong (const Oblong& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Oblong*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Oblong&
    operator= (const Oblong& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Oblong ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LengthType > length_;
    ::xsd::cxx::tree::one< WidthType > width_;
    ::xsd::cxx::tree::one< HeightType > height_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Chamfer schema type.
   *
   * @nosubgrouping
   */
  class Chamfer: public ::xml_schema::Type
  {
    public:
    /**
     * @name distance
     *
     * @brief Accessor and modifier functions for the %distance
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double DistanceType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DistanceType, char, ::xsd::cxx::tree::schema_type::double_ > DistanceTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DistanceType&
    distance () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DistanceType&
    distance ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    distance (const DistanceType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static DistanceType
    distance_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Chamfer (const DistanceType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Chamfer (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Chamfer (const Chamfer& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Chamfer*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Chamfer&
    operator= (const Chamfer& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Chamfer ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< DistanceType > distance_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Cone schema type.
   *
   * @nosubgrouping
   */
  class Cone: public ::xml_schema::Type
  {
    public:
    /**
     * @name radius1
     *
     * @brief Accessor and modifier functions for the %radius1
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double Radius1Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Radius1Type, char, ::xsd::cxx::tree::schema_type::double_ > Radius1Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const Radius1Type&
    radius1 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    Radius1Type&
    radius1 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    radius1 (const Radius1Type& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static Radius1Type
    radius1_default_value ();

    //@}

    /**
     * @name radius2
     *
     * @brief Accessor and modifier functions for the %radius2
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double Radius2Type;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< Radius2Type, char, ::xsd::cxx::tree::schema_type::double_ > Radius2Traits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const Radius2Type&
    radius2 () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    Radius2Type&
    radius2 ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    radius2 (const Radius2Type& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static Radius2Type
    radius2_default_value ();

    //@}

    /**
     * @name height
     *
     * @brief Accessor and modifier functions for the %height
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double HeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HeightType, char, ::xsd::cxx::tree::schema_type::double_ > HeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HeightType&
    height () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HeightType&
    height ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    height (const HeightType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static HeightType
    height_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Cone (const Radius1Type&,
          const Radius2Type&,
          const HeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Cone (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Cone (const Cone& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Cone*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Cone&
    operator= (const Cone& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Cone ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< Radius1Type > radius1_;
    ::xsd::cxx::tree::one< Radius2Type > radius2_;
    ::xsd::cxx::tree::one< HeightType > height_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Cylinder schema type.
   *
   * @nosubgrouping
   */
  class Cylinder: public ::xml_schema::Type
  {
    public:
    /**
     * @name radius
     *
     * @brief Accessor and modifier functions for the %radius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double RadiusType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RadiusType, char, ::xsd::cxx::tree::schema_type::double_ > RadiusTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RadiusType&
    radius () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RadiusType&
    radius ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    radius (const RadiusType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static RadiusType
    radius_default_value ();

    //@}

    /**
     * @name height
     *
     * @brief Accessor and modifier functions for the %height
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double HeightType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HeightType, char, ::xsd::cxx::tree::schema_type::double_ > HeightTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HeightType&
    height () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HeightType&
    height ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    height (const HeightType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static HeightType
    height_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Cylinder (const RadiusType&,
              const HeightType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Cylinder (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Cylinder (const Cylinder& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Cylinder*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Cylinder&
    operator= (const Cylinder& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Cylinder ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RadiusType > radius_;
    ::xsd::cxx::tree::one< HeightType > height_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %DatumPlane schema type.
   *
   * @nosubgrouping
   */
  class DatumPlane: public ::xml_schema::Type
  {
    public:
    /**
     * @name offset
     *
     * @brief Accessor and modifier functions for the %offset
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double OffsetType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OffsetType, char, ::xsd::cxx::tree::schema_type::double_ > OffsetTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const OffsetType&
    offset () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    OffsetType&
    offset ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    offset (const OffsetType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static OffsetType
    offset_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    DatumPlane (const OffsetType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    DatumPlane (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DatumPlane (const DatumPlane& x,
                ::xml_schema::Flags f = 0,
                ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual DatumPlane*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    DatumPlane&
    operator= (const DatumPlane& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~DatumPlane ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OffsetType > offset_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Draft schema type.
   *
   * @nosubgrouping
   */
  class Draft: public ::xml_schema::Type
  {
    public:
    /**
     * @name angle
     *
     * @brief Accessor and modifier functions for the %angle
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double AngleType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< AngleType, char, ::xsd::cxx::tree::schema_type::double_ > AngleTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const AngleType&
    angle () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    AngleType&
    angle ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    angle (const AngleType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static AngleType
    angle_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Draft (const AngleType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Draft (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Draft (const Draft& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Draft*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Draft&
    operator= (const Draft& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Draft ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< AngleType > angle_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Dieset schema type.
   *
   * @nosubgrouping
   */
  class Dieset: public ::xml_schema::Type
  {
    public:
    /**
     * @name lengthPadding
     *
     * @brief Accessor and modifier functions for the %lengthPadding
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double LengthPaddingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< LengthPaddingType, char, ::xsd::cxx::tree::schema_type::double_ > LengthPaddingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const LengthPaddingType&
    lengthPadding () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    LengthPaddingType&
    lengthPadding ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    lengthPadding (const LengthPaddingType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static LengthPaddingType
    lengthPadding_default_value ();

    //@}

    /**
     * @name widthPadding
     *
     * @brief Accessor and modifier functions for the %widthPadding
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double WidthPaddingType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< WidthPaddingType, char, ::xsd::cxx::tree::schema_type::double_ > WidthPaddingTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const WidthPaddingType&
    widthPadding () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    WidthPaddingType&
    widthPadding ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    widthPadding (const WidthPaddingType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static WidthPaddingType
    widthPadding_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Dieset (const LengthPaddingType&,
            const WidthPaddingType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Dieset (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dieset (const Dieset& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Dieset*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Dieset&
    operator= (const Dieset& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Dieset ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< LengthPaddingType > lengthPadding_;
    ::xsd::cxx::tree::one< WidthPaddingType > widthPadding_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Hollow schema type.
   *
   * @nosubgrouping
   */
  class Hollow: public ::xml_schema::Type
  {
    public:
    /**
     * @name offset
     *
     * @brief Accessor and modifier functions for the %offset
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double OffsetType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OffsetType, char, ::xsd::cxx::tree::schema_type::double_ > OffsetTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const OffsetType&
    offset () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    OffsetType&
    offset ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    offset (const OffsetType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static OffsetType
    offset_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Hollow (const OffsetType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Hollow (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Hollow (const Hollow& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Hollow*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Hollow&
    operator= (const Hollow& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Hollow ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< OffsetType > offset_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Nest schema type.
   *
   * @nosubgrouping
   */
  class Nest: public ::xml_schema::Type
  {
    public:
    /**
     * @name gap
     *
     * @brief Accessor and modifier functions for the %gap
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double GapType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GapType, char, ::xsd::cxx::tree::schema_type::double_ > GapTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GapType&
    gap () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GapType&
    gap ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gap (const GapType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static GapType
    gap_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Nest (const GapType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Nest (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Nest (const Nest& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Nest*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Nest&
    operator= (const Nest& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Nest ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< GapType > gap_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Quote schema type.
   *
   * @nosubgrouping
   */
  class Quote: public ::xml_schema::Type
  {
    public:
    /**
     * @name templateSheet
     *
     * @brief Accessor and modifier functions for the %templateSheet
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::String TemplateSheetType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< TemplateSheetType, char > TemplateSheetTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const TemplateSheetType&
    templateSheet () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    TemplateSheetType&
    templateSheet ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    templateSheet (const TemplateSheetType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    templateSheet (::std::unique_ptr< TemplateSheetType > p);

    /**
     * @brief Return the default value for the element.
     *
     * @return A read-only (constant) reference to the element's
     * default value.
     */
    static const TemplateSheetType&
    templateSheet_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Quote (const TemplateSheetType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Quote (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Quote (const Quote& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Quote*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Quote&
    operator= (const Quote& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Quote ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< TemplateSheetType > templateSheet_;
    static const TemplateSheetType templateSheet_default_value_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Sphere schema type.
   *
   * @nosubgrouping
   */
  class Sphere: public ::xml_schema::Type
  {
    public:
    /**
     * @name radius
     *
     * @brief Accessor and modifier functions for the %radius
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double RadiusType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< RadiusType, char, ::xsd::cxx::tree::schema_type::double_ > RadiusTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const RadiusType&
    radius () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    RadiusType&
    radius ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    radius (const RadiusType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static RadiusType
    radius_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Sphere (const RadiusType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Sphere (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Sphere (const Sphere& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Sphere*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Sphere&
    operator= (const Sphere& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Sphere ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< RadiusType > radius_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Squash schema type.
   *
   * @nosubgrouping
   */
  class Squash: public ::xml_schema::Type
  {
    public:
    /**
     * @name granularity
     *
     * @brief Accessor and modifier functions for the %granularity
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Int GranularityType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GranularityType, char > GranularityTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GranularityType&
    granularity () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GranularityType&
    granularity ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    granularity (const GranularityType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static GranularityType
    granularity_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Squash (const GranularityType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Squash (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Squash (const Squash& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Squash*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Squash&
    operator= (const Squash& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Squash ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< GranularityType > granularity_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Strip schema type.
   *
   * @nosubgrouping
   */
  class Strip: public ::xml_schema::Type
  {
    public:
    /**
     * @name gap
     *
     * @brief Accessor and modifier functions for the %gap
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::xml_schema::Double GapType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GapType, char, ::xsd::cxx::tree::schema_type::double_ > GapTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GapType&
    gap () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GapType&
    gap ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gap (const GapType& x);

    /**
     * @brief Return the default value for the element.
     *
     * @return The element's default value.
     */
    static GapType
    gap_default_value ();

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Strip (const GapType&);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Strip (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Strip (const Strip& x,
           ::xml_schema::Flags f = 0,
           ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Strip*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Strip&
    operator= (const Strip& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Strip ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< GapType > gap_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Features schema type.
   *
   * @nosubgrouping
   */
  class Features: public ::xml_schema::Type
  {
    public:
    /**
     * @name blend
     *
     * @brief Accessor and modifier functions for the %blend
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Blend BlendType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< BlendType > BlendOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BlendType, char > BlendTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const BlendOptional&
    blend () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    BlendOptional&
    blend ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    blend (const BlendType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    blend (const BlendOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    blend (::std::unique_ptr< BlendType > p);

    //@}

    /**
     * @name box
     *
     * @brief Accessor and modifier functions for the %box
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Box BoxType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< BoxType > BoxOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< BoxType, char > BoxTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const BoxOptional&
    box () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    BoxOptional&
    box ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    box (const BoxType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    box (const BoxOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    box (::std::unique_ptr< BoxType > p);

    //@}

    /**
     * @name oblong
     *
     * @brief Accessor and modifier functions for the %oblong
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Oblong OblongType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< OblongType > OblongOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< OblongType, char > OblongTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const OblongOptional&
    oblong () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    OblongOptional&
    oblong ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    oblong (const OblongType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    oblong (const OblongOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    oblong (::std::unique_ptr< OblongType > p);

    //@}

    /**
     * @name chamfer
     *
     * @brief Accessor and modifier functions for the %chamfer
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Chamfer ChamferType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ChamferType > ChamferOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ChamferType, char > ChamferTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ChamferOptional&
    chamfer () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ChamferOptional&
    chamfer ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    chamfer (const ChamferType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    chamfer (const ChamferOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    chamfer (::std::unique_ptr< ChamferType > p);

    //@}

    /**
     * @name cone
     *
     * @brief Accessor and modifier functions for the %cone
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Cone ConeType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< ConeType > ConeOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ConeType, char > ConeTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const ConeOptional&
    cone () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    ConeOptional&
    cone ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    cone (const ConeType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    cone (const ConeOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    cone (::std::unique_ptr< ConeType > p);

    //@}

    /**
     * @name cylinder
     *
     * @brief Accessor and modifier functions for the %cylinder
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Cylinder CylinderType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< CylinderType > CylinderOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< CylinderType, char > CylinderTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const CylinderOptional&
    cylinder () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    CylinderOptional&
    cylinder ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    cylinder (const CylinderType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    cylinder (const CylinderOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    cylinder (::std::unique_ptr< CylinderType > p);

    //@}

    /**
     * @name datumPlane
     *
     * @brief Accessor and modifier functions for the %datumPlane
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::DatumPlane DatumPlaneType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DatumPlaneType > DatumPlaneOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DatumPlaneType, char > DatumPlaneTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DatumPlaneOptional&
    datumPlane () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DatumPlaneOptional&
    datumPlane ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    datumPlane (const DatumPlaneType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    datumPlane (const DatumPlaneOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    datumPlane (::std::unique_ptr< DatumPlaneType > p);

    //@}

    /**
     * @name dieset
     *
     * @brief Accessor and modifier functions for the %dieset
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Dieset DiesetType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DiesetType > DiesetOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DiesetType, char > DiesetTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DiesetOptional&
    dieset () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DiesetOptional&
    dieset ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    dieset (const DiesetType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    dieset (const DiesetOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    dieset (::std::unique_ptr< DiesetType > p);

    //@}

    /**
     * @name draft
     *
     * @brief Accessor and modifier functions for the %draft
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Draft DraftType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< DraftType > DraftOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DraftType, char > DraftTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const DraftOptional&
    draft () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    DraftOptional&
    draft ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    draft (const DraftType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    draft (const DraftOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    draft (::std::unique_ptr< DraftType > p);

    //@}

    /**
     * @name hollow
     *
     * @brief Accessor and modifier functions for the %hollow
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Hollow HollowType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< HollowType > HollowOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HollowType, char > HollowTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const HollowOptional&
    hollow () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    HollowOptional&
    hollow ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    hollow (const HollowType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    hollow (const HollowOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    hollow (::std::unique_ptr< HollowType > p);

    //@}

    /**
     * @name nest
     *
     * @brief Accessor and modifier functions for the %nest
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Nest NestType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< NestType > NestOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< NestType, char > NestTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const NestOptional&
    nest () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    NestOptional&
    nest ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    nest (const NestType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    nest (const NestOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    nest (::std::unique_ptr< NestType > p);

    //@}

    /**
     * @name quote
     *
     * @brief Accessor and modifier functions for the %quote
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Quote QuoteType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< QuoteType > QuoteOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< QuoteType, char > QuoteTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const QuoteOptional&
    quote () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    QuoteOptional&
    quote ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    quote (const QuoteType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    quote (const QuoteOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    quote (::std::unique_ptr< QuoteType > p);

    //@}

    /**
     * @name sphere
     *
     * @brief Accessor and modifier functions for the %sphere
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Sphere SphereType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SphereType > SphereOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SphereType, char > SphereTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SphereOptional&
    sphere () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SphereOptional&
    sphere ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    sphere (const SphereType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    sphere (const SphereOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    sphere (::std::unique_ptr< SphereType > p);

    //@}

    /**
     * @name squash
     *
     * @brief Accessor and modifier functions for the %squash
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Squash SquashType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< SquashType > SquashOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< SquashType, char > SquashTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const SquashOptional&
    squash () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    SquashOptional&
    squash ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    squash (const SquashType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    squash (const SquashOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    squash (::std::unique_ptr< SquashType > p);

    //@}

    /**
     * @name strip
     *
     * @brief Accessor and modifier functions for the %strip
     * optional element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Strip StripType;

    /**
     * @brief Element optional container type.
     */
    typedef ::xsd::cxx::tree::optional< StripType > StripOptional;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< StripType, char > StripTraits;

    /**
     * @brief Return a read-only (constant) reference to the element
     * container.
     *
     * @return A constant reference to the optional container.
     */
    const StripOptional&
    strip () const;

    /**
     * @brief Return a read-write reference to the element container.
     *
     * @return A reference to the optional container.
     */
    StripOptional&
    strip ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    strip (const StripType& x);

    /**
     * @brief Set the element value.
     *
     * @param x An optional container with the new value to set.
     *
     * If the value is present in @a x then this function makes a copy 
     * of this value and sets it as the new value of the element.
     * Otherwise the element container is set the 'not present' state.
     */
    void
    strip (const StripOptional& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly instead
     * of making a copy.
     */
    void
    strip (::std::unique_ptr< StripType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Features ();

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Features (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Features (const Features& x,
              ::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Features*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Features&
    operator= (const Features& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Features ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    BlendOptional blend_;
    BoxOptional box_;
    OblongOptional oblong_;
    ChamferOptional chamfer_;
    ConeOptional cone_;
    CylinderOptional cylinder_;
    DatumPlaneOptional datumPlane_;
    DiesetOptional dieset_;
    DraftOptional draft_;
    HollowOptional hollow_;
    NestOptional nest_;
    QuoteOptional quote_;
    SphereOptional sphere_;
    SquashOptional squash_;
    StripOptional strip_;

    //@endcond
  };

  /**
   * @brief Class corresponding to the %Root schema type.
   *
   * @nosubgrouping
   */
  class Root: public ::xml_schema::Type
  {
    public:
    /**
     * @name visual
     *
     * @brief Accessor and modifier functions for the %visual
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Visual VisualType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< VisualType, char > VisualTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const VisualType&
    visual () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    VisualType&
    visual ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    visual (const VisualType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    visual (::std::unique_ptr< VisualType > p);

    //@}

    /**
     * @name dragger
     *
     * @brief Accessor and modifier functions for the %dragger
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Dragger DraggerType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< DraggerType, char > DraggerTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const DraggerType&
    dragger () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    DraggerType&
    dragger ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    dragger (const DraggerType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    dragger (::std::unique_ptr< DraggerType > p);

    //@}

    /**
     * @name interactiveParameter
     *
     * @brief Accessor and modifier functions for the %interactiveParameter
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::InteractiveParameter InteractiveParameterType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< InteractiveParameterType, char > InteractiveParameterTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const InteractiveParameterType&
    interactiveParameter () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    InteractiveParameterType&
    interactiveParameter ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    interactiveParameter (const InteractiveParameterType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    interactiveParameter (::std::unique_ptr< InteractiveParameterType > p);

    //@}

    /**
     * @name gesture
     *
     * @brief Accessor and modifier functions for the %gesture
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Gesture GestureType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< GestureType, char > GestureTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const GestureType&
    gesture () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    GestureType&
    gesture ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    gesture (const GestureType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    gesture (::std::unique_ptr< GestureType > p);

    //@}

    /**
     * @name project
     *
     * @brief Accessor and modifier functions for the %project
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Project ProjectType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< ProjectType, char > ProjectTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const ProjectType&
    project () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    ProjectType&
    project ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    project (const ProjectType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    project (::std::unique_ptr< ProjectType > p);

    //@}

    /**
     * @name hotKeys
     *
     * @brief Accessor and modifier functions for the %hotKeys
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::HotKeys HotKeysType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< HotKeysType, char > HotKeysTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const HotKeysType&
    hotKeys () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    HotKeysType&
    hotKeys ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    hotKeys (const HotKeysType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    hotKeys (::std::unique_ptr< HotKeysType > p);

    //@}

    /**
     * @name features
     *
     * @brief Accessor and modifier functions for the %features
     * required element.
     */
    //@{

    /**
     * @brief Element type.
     */
    typedef ::prf::Features FeaturesType;

    /**
     * @brief Element traits type.
     */
    typedef ::xsd::cxx::tree::traits< FeaturesType, char > FeaturesTraits;

    /**
     * @brief Return a read-only (constant) reference to the element.
     *
     * @return A constant reference to the element.
     */
    const FeaturesType&
    features () const;

    /**
     * @brief Return a read-write reference to the element.
     *
     * @return A reference to the element.
     */
    FeaturesType&
    features ();

    /**
     * @brief Set the element value.
     *
     * @param x A new value to set.
     *
     * This function makes a copy of its argument and sets it as
     * the new value of the element.
     */
    void
    features (const FeaturesType& x);

    /**
     * @brief Set the element value without copying.
     *
     * @param p A new value to use.
     *
     * This function will try to use the passed value directly
     * instead of making a copy.
     */
    void
    features (::std::unique_ptr< FeaturesType > p);

    //@}

    /**
     * @name Constructors
     */
    //@{

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes.
     */
    Root (const VisualType&,
          const DraggerType&,
          const InteractiveParameterType&,
          const GestureType&,
          const ProjectType&,
          const HotKeysType&,
          const FeaturesType&);

    /**
     * @brief Create an instance from the ultimate base and
     * initializers for required elements and attributes
     * (::std::unique_ptr version).
     *
     * This constructor will try to use the passed values directly
     * instead of making copies.
     */
    Root (::std::unique_ptr< VisualType >,
          ::std::unique_ptr< DraggerType >,
          ::std::unique_ptr< InteractiveParameterType >,
          ::std::unique_ptr< GestureType >,
          ::std::unique_ptr< ProjectType >,
          ::std::unique_ptr< HotKeysType >,
          ::std::unique_ptr< FeaturesType >);

    /**
     * @brief Create an instance from a DOM element.
     *
     * @param e A DOM element to extract the data from.
     * @param f Flags to create the new instance with.
     * @param c A pointer to the object that will contain the new
     * instance.
     */
    Root (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy constructor.
     *
     * @param x An instance to make a copy of.
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Root (const Root& x,
          ::xml_schema::Flags f = 0,
          ::xml_schema::Container* c = 0);

    /**
     * @brief Copy the instance polymorphically.
     *
     * @param f Flags to create the copy with.
     * @param c A pointer to the object that will contain the copy.
     * @return A pointer to the dynamically allocated copy.
     *
     * This function ensures that the dynamic type of the instance is
     * used for copying and should be used for polymorphic object
     * models instead of the copy constructor.
     */
    virtual Root*
    _clone (::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0) const;

    /**
     * @brief Copy assignment operator.
     *
     * @param x An instance to make a copy of.
     * @return A reference to itself.
     *
     * For polymorphic object models use the @c _clone function instead.
     */
    Root&
    operator= (const Root& x);

    //@}

    /**
     * @brief Destructor.
     */
    virtual 
    ~Root ();

    // Implementation.
    //

    //@cond

    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::Flags);

    protected:
    ::xsd::cxx::tree::one< VisualType > visual_;
    ::xsd::cxx::tree::one< DraggerType > dragger_;
    ::xsd::cxx::tree::one< InteractiveParameterType > interactiveParameter_;
    ::xsd::cxx::tree::one< GestureType > gesture_;
    ::xsd::cxx::tree::one< ProjectType > project_;
    ::xsd::cxx::tree::one< HotKeysType > hotKeys_;
    ::xsd::cxx::tree::one< FeaturesType > features_;

    //@endcond
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prf
{
  /**
   * @name Parsing functions for the %root document root.
   */
  //@{

  /**
   * @brief Parse a URI or a local file.
   *
   * @param uri A URI or a local file name.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with an error handler.
   *
   * @param uri A URI or a local file name.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a URI or a local file with a Xerces-C++ DOM error
   * handler.
   *
   * @param uri A URI or a local file name.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream.
   *
   * @param is A standrad input stream.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with an error handler.
   *
   * @param is A standrad input stream.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a Xerces-C++ DOM error
   * handler.
   *
   * @param is A standrad input stream.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and an
   * error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a standard input stream with a resource id and a
   * Xerces-C++ DOM error handler.
   *
   * @param is A standrad input stream.
   * @param id A resource id.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * The resource id is used to identify the document being parsed in
   * diagnostics as well as to resolve relative paths.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source.
   *
   * @param is A Xerces-C++ input source.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function uses exceptions to report parsing errors.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with an error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh An error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xml_schema::ErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
   * error handler.
   *
   * @param is A Xerces-C++ input source.
   * @param eh A Xerces-C++ DOM error handler.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function reports parsing errors by calling the error handler.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   */
  ::std::unique_ptr< ::prf::Root >
  root (const ::xercesc::DOMDocument& d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  /**
   * @brief Parse a Xerces-C++ DOM document.
   *
   * @param d A pointer to the Xerces-C++ DOM document.
   * @param f Parsing flags.
   * @param p Parsing properties. 
   * @return A pointer to the root of the object model.
   *
   * This function is normally used together with the keep_dom and
   * own_dom parsing flags to assign ownership of the DOM document
   * to the object model.
   */
  ::std::unique_ptr< ::prf::Root >
  root (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::Flags f = 0,
        const ::xml_schema::Properties& p = ::xml_schema::Properties ());

  //@}
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prf
{
  void
  operator<< (::xercesc::DOMElement&, const DecPositive&);

  void
  operator<< (::xercesc::DOMAttr&, const DecPositive&);

  void
  operator<< (::xml_schema::ListStream&,
              const DecPositive&);

  void
  operator<< (::xercesc::DOMElement&, const Mesh&);

  void
  operator<< (::xercesc::DOMElement&, const RenderStyle&);

  void
  operator<< (::xercesc::DOMAttr&, const RenderStyle&);

  void
  operator<< (::xml_schema::ListStream&,
              const RenderStyle&);

  void
  operator<< (::xercesc::DOMElement&, const Display&);

  void
  operator<< (::xercesc::DOMElement&, const Visual&);

  void
  operator<< (::xercesc::DOMElement&, const Dragger&);

  void
  operator<< (::xercesc::DOMElement&, const InteractiveParameter&);

  void
  operator<< (::xercesc::DOMElement&, const Gesture&);

  void
  operator<< (::xercesc::DOMElement&, const RecentProjects&);

  void
  operator<< (::xercesc::DOMElement&, const Project&);

  void
  operator<< (::xercesc::DOMElement&, const SpaceballButton&);

  void
  operator<< (::xercesc::DOMElement&, const SpaceballButtons&);

  void
  operator<< (::xercesc::DOMElement&, const HotKeyEntry&);

  void
  operator<< (::xercesc::DOMElement&, const HotKeyEntries&);

  void
  operator<< (::xercesc::DOMElement&, const HotKeys&);

  void
  operator<< (::xercesc::DOMElement&, const Blend&);

  void
  operator<< (::xercesc::DOMElement&, const Box&);

  void
  operator<< (::xercesc::DOMElement&, const Oblong&);

  void
  operator<< (::xercesc::DOMElement&, const Chamfer&);

  void
  operator<< (::xercesc::DOMElement&, const Cone&);

  void
  operator<< (::xercesc::DOMElement&, const Cylinder&);

  void
  operator<< (::xercesc::DOMElement&, const DatumPlane&);

  void
  operator<< (::xercesc::DOMElement&, const Draft&);

  void
  operator<< (::xercesc::DOMElement&, const Dieset&);

  void
  operator<< (::xercesc::DOMElement&, const Hollow&);

  void
  operator<< (::xercesc::DOMElement&, const Nest&);

  void
  operator<< (::xercesc::DOMElement&, const Quote&);

  void
  operator<< (::xercesc::DOMElement&, const Sphere&);

  void
  operator<< (::xercesc::DOMElement&, const Squash&);

  void
  operator<< (::xercesc::DOMElement&, const Strip&);

  void
  operator<< (::xercesc::DOMElement&, const Features&);

  void
  operator<< (::xercesc::DOMElement&, const Root&);

  /**
   * @name Serialization functions for the %root document root.
   */
  //@{

  /**
   * @brief Serialize to a standard output stream.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with an error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a standard output stream with a Xerces-C++ DOM
   * error handler.
   *
   * @param os A standrad output stream.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::std::ostream& os,
        const ::prf::Root& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function uses exceptions to report serialization errors.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with an error
   * handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh An error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        ::xml_schema::ErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a Xerces-C++ XML format target with a
   * Xerces-C++ DOM error handler.
   *
   * @param ft A Xerces-C++ XML format target.
   * @param x An object model to serialize.
   * @param eh A Xerces-C++ DOM error handler.
   * @param m A namespace information map.
   * @param e A character encoding to produce XML in.
   * @param f Serialization flags.
   *
   * This function reports serialization errors by calling the error
   * handler.
   */
  void
  root (::xercesc::XMLFormatTarget& ft,
        const ::prf::Root& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to an existing Xerces-C++ DOM document.
   *
   * @param d A Xerces-C++ DOM document.
   * @param x An object model to serialize.
   * @param f Serialization flags.
   *
   * Note that it is your responsibility to create the DOM document
   * with the correct root element as well as set the necessary
   * namespace mapping attributes.
   */
  void
  root (::xercesc::DOMDocument& d,
        const ::prf::Root& x,
        ::xml_schema::Flags f = 0);

  /**
   * @brief Serialize to a new Xerces-C++ DOM document.
   *
   * @param x An object model to serialize.
   * @param m A namespace information map.
   * @param f Serialization flags.
   * @return A pointer to the new Xerces-C++ DOM document.
   */
  ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
  root (const ::prf::Root& x, 
        const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
        ::xml_schema::Flags f = 0);

  //@}
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PREFERENCES_XML_H

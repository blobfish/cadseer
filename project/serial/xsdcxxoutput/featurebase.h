// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from featurebase.xsd.
 */

#ifndef PRJ_SRL_FEATUREBASE_H
#define PRJ_SRL_FEATUREBASE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    class Parameter;
    class EvolveRecord;
    class EvolveContainer;
    class ShapeIdRecord;
    class ShapeIdContainer;
    class FeatureTagRecord;
    class FeatureTagContainer;
    class IdSet;
    class DerivedRecord;
    class DerivedContainer;
    class SeerShape;
    class FeatureBase;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace prj
{
  /**
   * @brief C++ namespace for the %http://www.cadseer.com/prj/srl
   * schema namespace.
   */
  namespace srl
  {
    /**
     * @brief Class corresponding to the %Parameter schema type.
     *
     * @nosubgrouping
     */
    class Parameter: public ::xml_schema::Type
    {
      public:
      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String NameType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NameType&
      name () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NameType&
      name ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      name (const NameType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::unique_ptr< NameType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const NameType&
      name_default_value ();

      //@}

      /**
       * @name constant
       *
       * @brief Accessor and modifier functions for the %constant
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Boolean ConstantType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ConstantType, char > ConstantTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ConstantType&
      constant () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ConstantType&
      constant ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      constant (const ConstantType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ConstantType
      constant_default_value ();

      //@}

      /**
       * @name value
       *
       * @brief Accessor and modifier functions for the %value
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double ValueType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ValueType&
      value () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ValueType&
      value ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      value (const ValueType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ValueType
      value_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Parameter (const NameType&,
                 const ConstantType&,
                 const ValueType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Parameter (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Parameter (const Parameter& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Parameter*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Parameter&
      operator= (const Parameter& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Parameter ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< NameType > name_;
      static const NameType name_default_value_;
      ::xsd::cxx::tree::one< ConstantType > constant_;
      ::xsd::cxx::tree::one< ValueType > value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %EvolveRecord schema type.
     *
     * @nosubgrouping
     */
    class EvolveRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name idIn
       *
       * @brief Accessor and modifier functions for the %idIn
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdInType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdInType, char > IdInTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdInType&
      idIn () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdInType&
      idIn ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idIn (const IdInType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idIn (::std::unique_ptr< IdInType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdInType&
      idIn_default_value ();

      //@}

      /**
       * @name idOut
       *
       * @brief Accessor and modifier functions for the %idOut
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdOutType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdOutType, char > IdOutTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdOutType&
      idOut () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdOutType&
      idOut ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idOut (const IdOutType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idOut (::std::unique_ptr< IdOutType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdOutType&
      idOut_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      EvolveRecord (const IdInType&,
                    const IdOutType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      EvolveRecord (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveRecord (const EvolveRecord& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual EvolveRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveRecord&
      operator= (const EvolveRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~EvolveRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdInType > idIn_;
      static const IdInType idIn_default_value_;
      ::xsd::cxx::tree::one< IdOutType > idOut_;
      static const IdOutType idOut_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %EvolveContainer schema type.
     *
     * @nosubgrouping
     */
    class EvolveContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name evolveRecord
       *
       * @brief Accessor and modifier functions for the %evolveRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::EvolveRecord EvolveRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EvolveRecordType > EvolveRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef EvolveRecordSequence::iterator EvolveRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef EvolveRecordSequence::const_iterator EvolveRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EvolveRecordType, char > EvolveRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EvolveRecordSequence&
      evolveRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EvolveRecordSequence&
      evolveRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      evolveRecord (const EvolveRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      EvolveContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      EvolveContainer (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveContainer (const EvolveContainer& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual EvolveContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveContainer&
      operator= (const EvolveContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~EvolveContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EvolveRecordSequence evolveRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ShapeIdRecord schema type.
     *
     * @nosubgrouping
     */
    class ShapeIdRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name shapeOffset
       *
       * @brief Accessor and modifier functions for the %shapeOffset
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::UnsignedLong ShapeOffsetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeOffsetType, char > ShapeOffsetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ShapeOffsetType&
      shapeOffset () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ShapeOffsetType&
      shapeOffset ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      shapeOffset (const ShapeOffsetType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ShapeOffsetType
      shapeOffset_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ShapeIdRecord (const IdType&,
                     const ShapeOffsetType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ShapeIdRecord (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdRecord (const ShapeIdRecord& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ShapeIdRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdRecord&
      operator= (const ShapeIdRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ShapeIdRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      ::xsd::cxx::tree::one< ShapeOffsetType > shapeOffset_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ShapeIdContainer schema type.
     *
     * @nosubgrouping
     */
    class ShapeIdContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name shapeIdRecord
       *
       * @brief Accessor and modifier functions for the %shapeIdRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ShapeIdRecord ShapeIdRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ShapeIdRecordType > ShapeIdRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef ShapeIdRecordSequence::iterator ShapeIdRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ShapeIdRecordSequence::const_iterator ShapeIdRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeIdRecordType, char > ShapeIdRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ShapeIdRecordSequence&
      shapeIdRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ShapeIdRecordSequence&
      shapeIdRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      shapeIdRecord (const ShapeIdRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ShapeIdContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ShapeIdContainer (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdContainer (const ShapeIdContainer& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ShapeIdContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdContainer&
      operator= (const ShapeIdContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ShapeIdContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ShapeIdRecordSequence shapeIdRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureTagRecord schema type.
     *
     * @nosubgrouping
     */
    class FeatureTagRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name tag
       *
       * @brief Accessor and modifier functions for the %tag
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String TagType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TagType, char > TagTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const TagType&
      tag () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      TagType&
      tag ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      tag (const TagType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      tag (::std::unique_ptr< TagType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const TagType&
      tag_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureTagRecord (const IdType&,
                        const TagType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureTagRecord (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagRecord (const FeatureTagRecord& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureTagRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagRecord&
      operator= (const FeatureTagRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureTagRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      ::xsd::cxx::tree::one< TagType > tag_;
      static const TagType tag_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureTagContainer schema type.
     *
     * @nosubgrouping
     */
    class FeatureTagContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureTagRecord
       *
       * @brief Accessor and modifier functions for the %featureTagRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureTagRecord FeatureTagRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< FeatureTagRecordType > FeatureTagRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef FeatureTagRecordSequence::iterator FeatureTagRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef FeatureTagRecordSequence::const_iterator FeatureTagRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureTagRecordType, char > FeatureTagRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const FeatureTagRecordSequence&
      featureTagRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      FeatureTagRecordSequence&
      featureTagRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      featureTagRecord (const FeatureTagRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureTagContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureTagContainer (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagContainer (const FeatureTagContainer& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureTagContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagContainer&
      operator= (const FeatureTagContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureTagContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      FeatureTagRecordSequence featureTagRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IdSet schema type.
     *
     * @nosubgrouping
     */
    class IdSet: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IdType > IdSequence;

      /**
       * @brief Element iterator type.
       */
      typedef IdSequence::iterator IdIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef IdSequence::const_iterator IdConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IdSequence&
      id () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IdSequence&
      id ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      id (const IdSequence& s);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IdSet ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IdSet (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdSet (const IdSet& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IdSet*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdSet&
      operator= (const IdSet& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IdSet ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IdSequence id_;
      static const IdType id_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DerivedRecord schema type.
     *
     * @nosubgrouping
     */
    class DerivedRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name idSet
       *
       * @brief Accessor and modifier functions for the %idSet
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IdSet IdSetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdSetType, char > IdSetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdSetType&
      idSet () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdSetType&
      idSet ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idSet (const IdSetType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idSet (::std::unique_ptr< IdSetType > p);

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DerivedRecord (const IdSetType&,
                     const IdType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      DerivedRecord (::std::unique_ptr< IdSetType >,
                     const IdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DerivedRecord (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedRecord (const DerivedRecord& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DerivedRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedRecord&
      operator= (const DerivedRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DerivedRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdSetType > idSet_;
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DerivedContainer schema type.
     *
     * @nosubgrouping
     */
    class DerivedContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name derivedRecord
       *
       * @brief Accessor and modifier functions for the %derivedRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::DerivedRecord DerivedRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< DerivedRecordType > DerivedRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef DerivedRecordSequence::iterator DerivedRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef DerivedRecordSequence::const_iterator DerivedRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DerivedRecordType, char > DerivedRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const DerivedRecordSequence&
      derivedRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      DerivedRecordSequence&
      derivedRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      derivedRecord (const DerivedRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DerivedContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DerivedContainer (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedContainer (const DerivedContainer& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DerivedContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedContainer&
      operator= (const DerivedContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DerivedContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DerivedRecordSequence derivedRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SeerShape schema type.
     *
     * @nosubgrouping
     */
    class SeerShape: public ::xml_schema::Type
    {
      public:
      /**
       * @name rootShapeId
       *
       * @brief Accessor and modifier functions for the %rootShapeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String RootShapeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RootShapeIdType, char > RootShapeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const RootShapeIdType&
      rootShapeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      RootShapeIdType&
      rootShapeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      rootShapeId (const RootShapeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      rootShapeId (::std::unique_ptr< RootShapeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const RootShapeIdType&
      rootShapeId_default_value ();

      //@}

      /**
       * @name shapeIdContainer
       *
       * @brief Accessor and modifier functions for the %shapeIdContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ShapeIdContainer ShapeIdContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeIdContainerType, char > ShapeIdContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ShapeIdContainerType&
      shapeIdContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ShapeIdContainerType&
      shapeIdContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      shapeIdContainer (const ShapeIdContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      shapeIdContainer (::std::unique_ptr< ShapeIdContainerType > p);

      //@}

      /**
       * @name evolveContainer
       *
       * @brief Accessor and modifier functions for the %evolveContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::EvolveContainer EvolveContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EvolveContainerType, char > EvolveContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const EvolveContainerType&
      evolveContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      EvolveContainerType&
      evolveContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      evolveContainer (const EvolveContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      evolveContainer (::std::unique_ptr< EvolveContainerType > p);

      //@}

      /**
       * @name featureTagContainer
       *
       * @brief Accessor and modifier functions for the %featureTagContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureTagContainer FeatureTagContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureTagContainerType, char > FeatureTagContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureTagContainerType&
      featureTagContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureTagContainerType&
      featureTagContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureTagContainer (const FeatureTagContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureTagContainer (::std::unique_ptr< FeatureTagContainerType > p);

      //@}

      /**
       * @name derivedContainer
       *
       * @brief Accessor and modifier functions for the %derivedContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::DerivedContainer DerivedContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DerivedContainerType, char > DerivedContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DerivedContainerType&
      derivedContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DerivedContainerType&
      derivedContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      derivedContainer (const DerivedContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      derivedContainer (::std::unique_ptr< DerivedContainerType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SeerShape (const RootShapeIdType&,
                 const ShapeIdContainerType&,
                 const EvolveContainerType&,
                 const FeatureTagContainerType&,
                 const DerivedContainerType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SeerShape (const RootShapeIdType&,
                 ::std::unique_ptr< ShapeIdContainerType >,
                 ::std::unique_ptr< EvolveContainerType >,
                 ::std::unique_ptr< FeatureTagContainerType >,
                 ::std::unique_ptr< DerivedContainerType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SeerShape (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SeerShape (const SeerShape& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SeerShape*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SeerShape&
      operator= (const SeerShape& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SeerShape ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< RootShapeIdType > rootShapeId_;
      static const RootShapeIdType rootShapeId_default_value_;
      ::xsd::cxx::tree::one< ShapeIdContainerType > shapeIdContainer_;
      ::xsd::cxx::tree::one< EvolveContainerType > evolveContainer_;
      ::xsd::cxx::tree::one< FeatureTagContainerType > featureTagContainer_;
      ::xsd::cxx::tree::one< DerivedContainerType > derivedContainer_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureBase schema type.
     *
     * @nosubgrouping
     */
    class FeatureBase: public ::xml_schema::Type
    {
      public:
      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String NameType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NameType&
      name () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NameType&
      name ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      name (const NameType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::unique_ptr< NameType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const NameType&
      name_default_value ();

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name seerShape
       *
       * @brief Accessor and modifier functions for the %seerShape
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::SeerShape SeerShapeType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SeerShapeType > SeerShapeOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SeerShapeOptional&
      seerShape () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SeerShapeOptional&
      seerShape ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      seerShape (const SeerShapeType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      seerShape (const SeerShapeOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      seerShape (::std::unique_ptr< SeerShapeType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureBase (const NameType&,
                   const IdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureBase (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBase (const FeatureBase& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureBase*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBase&
      operator= (const FeatureBase& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureBase ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< NameType > name_;
      static const NameType name_default_value_;
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      SeerShapeOptional seerShape_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement&, const Parameter&);

    void
    operator<< (::xercesc::DOMElement&, const EvolveRecord&);

    void
    operator<< (::xercesc::DOMElement&, const EvolveContainer&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeIdRecord&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeIdContainer&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureTagRecord&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureTagContainer&);

    void
    operator<< (::xercesc::DOMElement&, const IdSet&);

    void
    operator<< (::xercesc::DOMElement&, const DerivedRecord&);

    void
    operator<< (::xercesc::DOMElement&, const DerivedContainer&);

    void
    operator<< (::xercesc::DOMElement&, const SeerShape&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureBase&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FEATUREBASE_H

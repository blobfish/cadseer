// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from featurebase.xsd.
 */

#ifndef PRJ_SRL_FEATUREBASE_H
#define PRJ_SRL_FEATUREBASE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    class Vec3d;
    class Quat;
    class Matrixd;
    class ParameterValue;
    class Parameter;
    class EvolveRecord;
    class EvolveContainer;
    class ShapeIdRecord;
    class ShapeIdContainer;
    class FeatureTagRecord;
    class FeatureTagContainer;
    class IdSet;
    class DerivedRecord;
    class DerivedContainer;
    class SeerShape;
    class ColorValue;
    class Color;
    class FeatureBase;
    class HistoryVertex;
    class HistoryVertices;
    class HistoryEdge;
    class HistoryEdges;
    class ShapeHistory;
    class Pick;
    class Picks;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace prj
{
  /**
   * @brief C++ namespace for the %http://www.cadseer.com/prj/srl
   * schema namespace.
   */
  namespace srl
  {
    /**
     * @brief Class corresponding to the %Vec3d schema type.
     *
     * @nosubgrouping
     */
    class Vec3d: public ::xml_schema::Type
    {
      public:
      /**
       * @name x
       *
       * @brief Accessor and modifier functions for the %x
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double XType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XType, char, ::xsd::cxx::tree::schema_type::double_ > XTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XType&
      x () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XType&
      x ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      x (const XType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static XType
      x_default_value ();

      //@}

      /**
       * @name y
       *
       * @brief Accessor and modifier functions for the %y
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double YType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YType, char, ::xsd::cxx::tree::schema_type::double_ > YTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YType&
      y () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YType&
      y ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      y (const YType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static YType
      y_default_value ();

      //@}

      /**
       * @name z
       *
       * @brief Accessor and modifier functions for the %z
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double ZType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZType, char, ::xsd::cxx::tree::schema_type::double_ > ZTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZType&
      z () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZType&
      z ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      z (const ZType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ZType
      z_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Vec3d (const XType&,
             const YType&,
             const ZType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Vec3d (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Vec3d (const Vec3d& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Vec3d*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Vec3d&
      operator= (const Vec3d& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Vec3d ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< XType > x_;
      ::xsd::cxx::tree::one< YType > y_;
      ::xsd::cxx::tree::one< ZType > z_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Quat schema type.
     *
     * @nosubgrouping
     */
    class Quat: public ::xml_schema::Type
    {
      public:
      /**
       * @name x
       *
       * @brief Accessor and modifier functions for the %x
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double XType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XType, char, ::xsd::cxx::tree::schema_type::double_ > XTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XType&
      x () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XType&
      x ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      x (const XType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static XType
      x_default_value ();

      //@}

      /**
       * @name y
       *
       * @brief Accessor and modifier functions for the %y
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double YType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YType, char, ::xsd::cxx::tree::schema_type::double_ > YTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YType&
      y () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YType&
      y ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      y (const YType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static YType
      y_default_value ();

      //@}

      /**
       * @name z
       *
       * @brief Accessor and modifier functions for the %z
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double ZType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZType, char, ::xsd::cxx::tree::schema_type::double_ > ZTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZType&
      z () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZType&
      z ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      z (const ZType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ZType
      z_default_value ();

      //@}

      /**
       * @name w
       *
       * @brief Accessor and modifier functions for the %w
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double WType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< WType, char, ::xsd::cxx::tree::schema_type::double_ > WTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const WType&
      w () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      WType&
      w ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      w (const WType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static WType
      w_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Quat (const XType&,
            const YType&,
            const ZType&,
            const WType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Quat (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Quat (const Quat& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Quat*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Quat&
      operator= (const Quat& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Quat ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< XType > x_;
      ::xsd::cxx::tree::one< YType > y_;
      ::xsd::cxx::tree::one< ZType > z_;
      ::xsd::cxx::tree::one< WType > w_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Matrixd schema type.
     *
     * @nosubgrouping
     */
    class Matrixd: public ::xml_schema::Type
    {
      public:
      /**
       * @name i0j0
       *
       * @brief Accessor and modifier functions for the %i0j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j0Type&
      i0j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j0Type&
      i0j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j0 (const I0j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j0Type
      i0j0_default_value ();

      //@}

      /**
       * @name i0j1
       *
       * @brief Accessor and modifier functions for the %i0j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j1Type&
      i0j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j1Type&
      i0j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j1 (const I0j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j1Type
      i0j1_default_value ();

      //@}

      /**
       * @name i0j2
       *
       * @brief Accessor and modifier functions for the %i0j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j2Type&
      i0j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j2Type&
      i0j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j2 (const I0j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j2Type
      i0j2_default_value ();

      //@}

      /**
       * @name i0j3
       *
       * @brief Accessor and modifier functions for the %i0j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j3Type&
      i0j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j3Type&
      i0j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j3 (const I0j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j3Type
      i0j3_default_value ();

      //@}

      /**
       * @name i1j0
       *
       * @brief Accessor and modifier functions for the %i1j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j0Type&
      i1j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j0Type&
      i1j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j0 (const I1j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j0Type
      i1j0_default_value ();

      //@}

      /**
       * @name i1j1
       *
       * @brief Accessor and modifier functions for the %i1j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j1Type&
      i1j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j1Type&
      i1j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j1 (const I1j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j1Type
      i1j1_default_value ();

      //@}

      /**
       * @name i1j2
       *
       * @brief Accessor and modifier functions for the %i1j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j2Type&
      i1j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j2Type&
      i1j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j2 (const I1j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j2Type
      i1j2_default_value ();

      //@}

      /**
       * @name i1j3
       *
       * @brief Accessor and modifier functions for the %i1j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j3Type&
      i1j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j3Type&
      i1j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j3 (const I1j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j3Type
      i1j3_default_value ();

      //@}

      /**
       * @name i2j0
       *
       * @brief Accessor and modifier functions for the %i2j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j0Type&
      i2j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j0Type&
      i2j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j0 (const I2j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j0Type
      i2j0_default_value ();

      //@}

      /**
       * @name i2j1
       *
       * @brief Accessor and modifier functions for the %i2j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j1Type&
      i2j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j1Type&
      i2j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j1 (const I2j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j1Type
      i2j1_default_value ();

      //@}

      /**
       * @name i2j2
       *
       * @brief Accessor and modifier functions for the %i2j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j2Type&
      i2j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j2Type&
      i2j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j2 (const I2j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j2Type
      i2j2_default_value ();

      //@}

      /**
       * @name i2j3
       *
       * @brief Accessor and modifier functions for the %i2j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j3Type&
      i2j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j3Type&
      i2j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j3 (const I2j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j3Type
      i2j3_default_value ();

      //@}

      /**
       * @name i3j0
       *
       * @brief Accessor and modifier functions for the %i3j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j0Type&
      i3j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j0Type&
      i3j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j0 (const I3j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j0Type
      i3j0_default_value ();

      //@}

      /**
       * @name i3j1
       *
       * @brief Accessor and modifier functions for the %i3j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j1Type&
      i3j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j1Type&
      i3j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j1 (const I3j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j1Type
      i3j1_default_value ();

      //@}

      /**
       * @name i3j2
       *
       * @brief Accessor and modifier functions for the %i3j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j2Type&
      i3j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j2Type&
      i3j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j2 (const I3j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j2Type
      i3j2_default_value ();

      //@}

      /**
       * @name i3j3
       *
       * @brief Accessor and modifier functions for the %i3j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j3Type&
      i3j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j3Type&
      i3j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j3 (const I3j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j3Type
      i3j3_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Matrixd (const I0j0Type&,
               const I0j1Type&,
               const I0j2Type&,
               const I0j3Type&,
               const I1j0Type&,
               const I1j1Type&,
               const I1j2Type&,
               const I1j3Type&,
               const I2j0Type&,
               const I2j1Type&,
               const I2j2Type&,
               const I2j3Type&,
               const I3j0Type&,
               const I3j1Type&,
               const I3j2Type&,
               const I3j3Type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Matrixd (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Matrixd (const Matrixd& x,
               ::xml_schema::Flags f = 0,
               ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Matrixd*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Matrixd&
      operator= (const Matrixd& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Matrixd ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< I0j0Type > i0j0_;
      ::xsd::cxx::tree::one< I0j1Type > i0j1_;
      ::xsd::cxx::tree::one< I0j2Type > i0j2_;
      ::xsd::cxx::tree::one< I0j3Type > i0j3_;
      ::xsd::cxx::tree::one< I1j0Type > i1j0_;
      ::xsd::cxx::tree::one< I1j1Type > i1j1_;
      ::xsd::cxx::tree::one< I1j2Type > i1j2_;
      ::xsd::cxx::tree::one< I1j3Type > i1j3_;
      ::xsd::cxx::tree::one< I2j0Type > i2j0_;
      ::xsd::cxx::tree::one< I2j1Type > i2j1_;
      ::xsd::cxx::tree::one< I2j2Type > i2j2_;
      ::xsd::cxx::tree::one< I2j3Type > i2j3_;
      ::xsd::cxx::tree::one< I3j0Type > i3j0_;
      ::xsd::cxx::tree::one< I3j1Type > i3j1_;
      ::xsd::cxx::tree::one< I3j2Type > i3j2_;
      ::xsd::cxx::tree::one< I3j3Type > i3j3_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ParameterValue schema type.
     *
     * @nosubgrouping
     */
    class ParameterValue: public ::xml_schema::Type
    {
      public:
      /**
       * @name aDouble
       *
       * @brief Accessor and modifier functions for the %aDouble
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double ADoubleType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ADoubleType > ADoubleOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ADoubleType, char, ::xsd::cxx::tree::schema_type::double_ > ADoubleTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ADoubleOptional&
      aDouble () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ADoubleOptional&
      aDouble ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aDouble (const ADoubleType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aDouble (const ADoubleOptional& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ADoubleType
      aDouble_default_value ();

      //@}

      /**
       * @name anInteger
       *
       * @brief Accessor and modifier functions for the %anInteger
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Int AnIntegerType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AnIntegerType > AnIntegerOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AnIntegerType, char > AnIntegerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AnIntegerOptional&
      anInteger () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AnIntegerOptional&
      anInteger ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      anInteger (const AnIntegerType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      anInteger (const AnIntegerOptional& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static AnIntegerType
      anInteger_default_value ();

      //@}

      /**
       * @name aBool
       *
       * @brief Accessor and modifier functions for the %aBool
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Boolean ABoolType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ABoolType > ABoolOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ABoolType, char > ABoolTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ABoolOptional&
      aBool () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ABoolOptional&
      aBool ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aBool (const ABoolType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aBool (const ABoolOptional& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ABoolType
      aBool_default_value ();

      //@}

      /**
       * @name aString
       *
       * @brief Accessor and modifier functions for the %aString
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String AStringType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AStringType > AStringOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AStringType, char > AStringTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AStringOptional&
      aString () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AStringOptional&
      aString ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aString (const AStringType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aString (const AStringOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      aString (::std::unique_ptr< AStringType > p);

      //@}

      /**
       * @name aPath
       *
       * @brief Accessor and modifier functions for the %aPath
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Uri APathType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< APathType > APathOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< APathType, char > APathTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const APathOptional&
      aPath () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      APathOptional&
      aPath ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aPath (const APathType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aPath (const APathOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      aPath (::std::unique_ptr< APathType > p);

      //@}

      /**
       * @name aVec3d
       *
       * @brief Accessor and modifier functions for the %aVec3d
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Vec3d AVec3dType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AVec3dType > AVec3dOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AVec3dType, char > AVec3dTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AVec3dOptional&
      aVec3d () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AVec3dOptional&
      aVec3d ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aVec3d (const AVec3dType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aVec3d (const AVec3dOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      aVec3d (::std::unique_ptr< AVec3dType > p);

      //@}

      /**
       * @name aQuat
       *
       * @brief Accessor and modifier functions for the %aQuat
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Quat AQuatType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AQuatType > AQuatOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AQuatType, char > AQuatTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AQuatOptional&
      aQuat () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AQuatOptional&
      aQuat ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aQuat (const AQuatType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aQuat (const AQuatOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      aQuat (::std::unique_ptr< AQuatType > p);

      //@}

      /**
       * @name aMatrixd
       *
       * @brief Accessor and modifier functions for the %aMatrixd
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Matrixd AMatrixdType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< AMatrixdType > AMatrixdOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AMatrixdType, char > AMatrixdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const AMatrixdOptional&
      aMatrixd () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      AMatrixdOptional&
      aMatrixd ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      aMatrixd (const AMatrixdType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      aMatrixd (const AMatrixdOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      aMatrixd (::std::unique_ptr< AMatrixdType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ParameterValue ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ParameterValue (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ParameterValue (const ParameterValue& x,
                      ::xml_schema::Flags f = 0,
                      ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ParameterValue*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ParameterValue&
      operator= (const ParameterValue& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ParameterValue ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ADoubleOptional aDouble_;
      AnIntegerOptional anInteger_;
      ABoolOptional aBool_;
      AStringOptional aString_;
      APathOptional aPath_;
      AVec3dOptional aVec3d_;
      AQuatOptional aQuat_;
      AMatrixdOptional aMatrixd_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Parameter schema type.
     *
     * @nosubgrouping
     */
    class Parameter: public ::xml_schema::Type
    {
      public:
      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String NameType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NameType&
      name () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NameType&
      name ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      name (const NameType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::unique_ptr< NameType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const NameType&
      name_default_value ();

      //@}

      /**
       * @name constant
       *
       * @brief Accessor and modifier functions for the %constant
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Boolean ConstantType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ConstantType, char > ConstantTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ConstantType&
      constant () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ConstantType&
      constant ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      constant (const ConstantType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ConstantType
      constant_default_value ();

      //@}

      /**
       * @name value
       *
       * @brief Accessor and modifier functions for the %value
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double ValueType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ValueType > ValueOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ValueType, char, ::xsd::cxx::tree::schema_type::double_ > ValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ValueOptional&
      value () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ValueOptional&
      value ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      value (const ValueType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      value (const ValueOptional& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ValueType
      value_default_value ();

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name pValue
       *
       * @brief Accessor and modifier functions for the %pValue
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ParameterValue PValueType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< PValueType > PValueOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< PValueType, char > PValueTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const PValueOptional&
      pValue () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      PValueOptional&
      pValue ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      pValue (const PValueType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      pValue (const PValueOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      pValue (::std::unique_ptr< PValueType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Parameter (const NameType&,
                 const ConstantType&,
                 const IdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Parameter (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Parameter (const Parameter& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Parameter*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Parameter&
      operator= (const Parameter& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Parameter ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< NameType > name_;
      static const NameType name_default_value_;
      ::xsd::cxx::tree::one< ConstantType > constant_;
      ValueOptional value_;
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      PValueOptional pValue_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %EvolveRecord schema type.
     *
     * @nosubgrouping
     */
    class EvolveRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name idIn
       *
       * @brief Accessor and modifier functions for the %idIn
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdInType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdInType, char > IdInTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdInType&
      idIn () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdInType&
      idIn ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idIn (const IdInType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idIn (::std::unique_ptr< IdInType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdInType&
      idIn_default_value ();

      //@}

      /**
       * @name idOut
       *
       * @brief Accessor and modifier functions for the %idOut
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdOutType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdOutType, char > IdOutTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdOutType&
      idOut () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdOutType&
      idOut ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idOut (const IdOutType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idOut (::std::unique_ptr< IdOutType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdOutType&
      idOut_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      EvolveRecord (const IdInType&,
                    const IdOutType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      EvolveRecord (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveRecord (const EvolveRecord& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual EvolveRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveRecord&
      operator= (const EvolveRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~EvolveRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdInType > idIn_;
      static const IdInType idIn_default_value_;
      ::xsd::cxx::tree::one< IdOutType > idOut_;
      static const IdOutType idOut_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %EvolveContainer schema type.
     *
     * @nosubgrouping
     */
    class EvolveContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name evolveRecord
       *
       * @brief Accessor and modifier functions for the %evolveRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::EvolveRecord EvolveRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< EvolveRecordType > EvolveRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef EvolveRecordSequence::iterator EvolveRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef EvolveRecordSequence::const_iterator EvolveRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EvolveRecordType, char > EvolveRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const EvolveRecordSequence&
      evolveRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      EvolveRecordSequence&
      evolveRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      evolveRecord (const EvolveRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      EvolveContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      EvolveContainer (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveContainer (const EvolveContainer& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual EvolveContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      EvolveContainer&
      operator= (const EvolveContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~EvolveContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      EvolveRecordSequence evolveRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ShapeIdRecord schema type.
     *
     * @nosubgrouping
     */
    class ShapeIdRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name shapeOffset
       *
       * @brief Accessor and modifier functions for the %shapeOffset
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::UnsignedLong ShapeOffsetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeOffsetType, char > ShapeOffsetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ShapeOffsetType&
      shapeOffset () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ShapeOffsetType&
      shapeOffset ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      shapeOffset (const ShapeOffsetType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static ShapeOffsetType
      shapeOffset_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ShapeIdRecord (const IdType&,
                     const ShapeOffsetType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ShapeIdRecord (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdRecord (const ShapeIdRecord& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ShapeIdRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdRecord&
      operator= (const ShapeIdRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ShapeIdRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      ::xsd::cxx::tree::one< ShapeOffsetType > shapeOffset_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ShapeIdContainer schema type.
     *
     * @nosubgrouping
     */
    class ShapeIdContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name shapeIdRecord
       *
       * @brief Accessor and modifier functions for the %shapeIdRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ShapeIdRecord ShapeIdRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ShapeIdRecordType > ShapeIdRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef ShapeIdRecordSequence::iterator ShapeIdRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ShapeIdRecordSequence::const_iterator ShapeIdRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeIdRecordType, char > ShapeIdRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ShapeIdRecordSequence&
      shapeIdRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ShapeIdRecordSequence&
      shapeIdRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      shapeIdRecord (const ShapeIdRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ShapeIdContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ShapeIdContainer (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdContainer (const ShapeIdContainer& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ShapeIdContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeIdContainer&
      operator= (const ShapeIdContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ShapeIdContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ShapeIdRecordSequence shapeIdRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureTagRecord schema type.
     *
     * @nosubgrouping
     */
    class FeatureTagRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name tag
       *
       * @brief Accessor and modifier functions for the %tag
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String TagType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TagType, char > TagTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const TagType&
      tag () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      TagType&
      tag ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      tag (const TagType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      tag (::std::unique_ptr< TagType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const TagType&
      tag_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureTagRecord (const IdType&,
                        const TagType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureTagRecord (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagRecord (const FeatureTagRecord& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureTagRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagRecord&
      operator= (const FeatureTagRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureTagRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      ::xsd::cxx::tree::one< TagType > tag_;
      static const TagType tag_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureTagContainer schema type.
     *
     * @nosubgrouping
     */
    class FeatureTagContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureTagRecord
       *
       * @brief Accessor and modifier functions for the %featureTagRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureTagRecord FeatureTagRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< FeatureTagRecordType > FeatureTagRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef FeatureTagRecordSequence::iterator FeatureTagRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef FeatureTagRecordSequence::const_iterator FeatureTagRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureTagRecordType, char > FeatureTagRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const FeatureTagRecordSequence&
      featureTagRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      FeatureTagRecordSequence&
      featureTagRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      featureTagRecord (const FeatureTagRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureTagContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureTagContainer (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagContainer (const FeatureTagContainer& x,
                           ::xml_schema::Flags f = 0,
                           ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureTagContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureTagContainer&
      operator= (const FeatureTagContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureTagContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      FeatureTagRecordSequence featureTagRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IdSet schema type.
     *
     * @nosubgrouping
     */
    class IdSet: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IdType > IdSequence;

      /**
       * @brief Element iterator type.
       */
      typedef IdSequence::iterator IdIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef IdSequence::const_iterator IdConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IdSequence&
      id () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IdSequence&
      id ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      id (const IdSequence& s);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IdSet ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IdSet (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdSet (const IdSet& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IdSet*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IdSet&
      operator= (const IdSet& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IdSet ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IdSequence id_;
      static const IdType id_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DerivedRecord schema type.
     *
     * @nosubgrouping
     */
    class DerivedRecord: public ::xml_schema::Type
    {
      public:
      /**
       * @name idSet
       *
       * @brief Accessor and modifier functions for the %idSet
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IdSet IdSetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdSetType, char > IdSetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdSetType&
      idSet () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdSetType&
      idSet ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      idSet (const IdSetType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      idSet (::std::unique_ptr< IdSetType > p);

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DerivedRecord (const IdSetType&,
                     const IdType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      DerivedRecord (::std::unique_ptr< IdSetType >,
                     const IdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DerivedRecord (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedRecord (const DerivedRecord& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DerivedRecord*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedRecord&
      operator= (const DerivedRecord& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DerivedRecord ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdSetType > idSet_;
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %DerivedContainer schema type.
     *
     * @nosubgrouping
     */
    class DerivedContainer: public ::xml_schema::Type
    {
      public:
      /**
       * @name derivedRecord
       *
       * @brief Accessor and modifier functions for the %derivedRecord
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::DerivedRecord DerivedRecordType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< DerivedRecordType > DerivedRecordSequence;

      /**
       * @brief Element iterator type.
       */
      typedef DerivedRecordSequence::iterator DerivedRecordIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef DerivedRecordSequence::const_iterator DerivedRecordConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DerivedRecordType, char > DerivedRecordTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const DerivedRecordSequence&
      derivedRecord () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      DerivedRecordSequence&
      derivedRecord ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      derivedRecord (const DerivedRecordSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      DerivedContainer ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      DerivedContainer (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedContainer (const DerivedContainer& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual DerivedContainer*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      DerivedContainer&
      operator= (const DerivedContainer& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~DerivedContainer ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      DerivedRecordSequence derivedRecord_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SeerShape schema type.
     *
     * @nosubgrouping
     */
    class SeerShape: public ::xml_schema::Type
    {
      public:
      /**
       * @name rootShapeId
       *
       * @brief Accessor and modifier functions for the %rootShapeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String RootShapeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RootShapeIdType, char > RootShapeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const RootShapeIdType&
      rootShapeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      RootShapeIdType&
      rootShapeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      rootShapeId (const RootShapeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      rootShapeId (::std::unique_ptr< RootShapeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const RootShapeIdType&
      rootShapeId_default_value ();

      //@}

      /**
       * @name shapeIdContainer
       *
       * @brief Accessor and modifier functions for the %shapeIdContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ShapeIdContainer ShapeIdContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeIdContainerType, char > ShapeIdContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ShapeIdContainerType&
      shapeIdContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ShapeIdContainerType&
      shapeIdContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      shapeIdContainer (const ShapeIdContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      shapeIdContainer (::std::unique_ptr< ShapeIdContainerType > p);

      //@}

      /**
       * @name evolveContainer
       *
       * @brief Accessor and modifier functions for the %evolveContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::EvolveContainer EvolveContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EvolveContainerType, char > EvolveContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const EvolveContainerType&
      evolveContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      EvolveContainerType&
      evolveContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      evolveContainer (const EvolveContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      evolveContainer (::std::unique_ptr< EvolveContainerType > p);

      //@}

      /**
       * @name featureTagContainer
       *
       * @brief Accessor and modifier functions for the %featureTagContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureTagContainer FeatureTagContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureTagContainerType, char > FeatureTagContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureTagContainerType&
      featureTagContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureTagContainerType&
      featureTagContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureTagContainer (const FeatureTagContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureTagContainer (::std::unique_ptr< FeatureTagContainerType > p);

      //@}

      /**
       * @name derivedContainer
       *
       * @brief Accessor and modifier functions for the %derivedContainer
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::DerivedContainer DerivedContainerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< DerivedContainerType, char > DerivedContainerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const DerivedContainerType&
      derivedContainer () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      DerivedContainerType&
      derivedContainer ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      derivedContainer (const DerivedContainerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      derivedContainer (::std::unique_ptr< DerivedContainerType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SeerShape (const RootShapeIdType&,
                 const ShapeIdContainerType&,
                 const EvolveContainerType&,
                 const FeatureTagContainerType&,
                 const DerivedContainerType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SeerShape (const RootShapeIdType&,
                 ::std::unique_ptr< ShapeIdContainerType >,
                 ::std::unique_ptr< EvolveContainerType >,
                 ::std::unique_ptr< FeatureTagContainerType >,
                 ::std::unique_ptr< DerivedContainerType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SeerShape (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SeerShape (const SeerShape& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SeerShape*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SeerShape&
      operator= (const SeerShape& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SeerShape ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< RootShapeIdType > rootShapeId_;
      static const RootShapeIdType rootShapeId_default_value_;
      ::xsd::cxx::tree::one< ShapeIdContainerType > shapeIdContainer_;
      ::xsd::cxx::tree::one< EvolveContainerType > evolveContainer_;
      ::xsd::cxx::tree::one< FeatureTagContainerType > featureTagContainer_;
      ::xsd::cxx::tree::one< DerivedContainerType > derivedContainer_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ColorValue schema type.
     *
     * @nosubgrouping
     */
    class ColorValue: public ::xsd::cxx::tree::fundamental_base< ::xml_schema::Decimal, char, ::xml_schema::SimpleType, ::xsd::cxx::tree::schema_type::decimal >
    {
      public:
      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ColorValue (const ::xml_schema::Decimal&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ColorValue (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Create an instance from a DOM attribute.
       *
       * @param a A DOM attribute to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ColorValue (const ::xercesc::DOMAttr& a,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Create an instance from a string fragment.
       *
       * @param s A string fragment to extract the data from.
       * @param e A pointer to DOM element containing the string fragment.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ColorValue (const ::std::string& s,
                  const ::xercesc::DOMElement* e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ColorValue (const ColorValue& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ColorValue*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ColorValue ();
    };

    /**
     * @brief Class corresponding to the %Color schema type.
     *
     * @nosubgrouping
     */
    class Color: public ::xml_schema::Type
    {
      public:
      /**
       * @name r
       *
       * @brief Accessor and modifier functions for the %r
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ColorValue RType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< RType, char > RTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const RType&
      r () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      RType&
      r ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      r (const RType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      r (::std::unique_ptr< RType > p);

      //@}

      /**
       * @name g
       *
       * @brief Accessor and modifier functions for the %g
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ColorValue GType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< GType, char > GTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const GType&
      g () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      GType&
      g ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      g (const GType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      g (::std::unique_ptr< GType > p);

      //@}

      /**
       * @name b
       *
       * @brief Accessor and modifier functions for the %b
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ColorValue BType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< BType, char > BTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const BType&
      b () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      BType&
      b ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      b (const BType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      b (::std::unique_ptr< BType > p);

      //@}

      /**
       * @name a
       *
       * @brief Accessor and modifier functions for the %a
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ColorValue AType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< AType, char > ATraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const AType&
      a () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      AType&
      a ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      a (const AType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      a (::std::unique_ptr< AType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Color (const RType&,
             const GType&,
             const BType&,
             const AType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Color (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Color (const Color& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Color*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Color&
      operator= (const Color& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Color ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< RType > r_;
      ::xsd::cxx::tree::one< GType > g_;
      ::xsd::cxx::tree::one< BType > b_;
      ::xsd::cxx::tree::one< AType > a_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureBase schema type.
     *
     * @nosubgrouping
     */
    class FeatureBase: public ::xml_schema::Type
    {
      public:
      /**
       * @name name
       *
       * @brief Accessor and modifier functions for the %name
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String NameType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< NameType, char > NameTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const NameType&
      name () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      NameType&
      name ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      name (const NameType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      name (::std::unique_ptr< NameType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const NameType&
      name_default_value ();

      //@}

      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name seerShape
       *
       * @brief Accessor and modifier functions for the %seerShape
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::SeerShape SeerShapeType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< SeerShapeType > SeerShapeOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SeerShapeType, char > SeerShapeTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const SeerShapeOptional&
      seerShape () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      SeerShapeOptional&
      seerShape ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      seerShape (const SeerShapeType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      seerShape (const SeerShapeOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      seerShape (::std::unique_ptr< SeerShapeType > p);

      //@}

      /**
       * @name color
       *
       * @brief Accessor and modifier functions for the %color
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Color ColorType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< ColorType > ColorOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ColorType, char > ColorTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const ColorOptional&
      color () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      ColorOptional&
      color ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      color (const ColorType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      color (const ColorOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      color (::std::unique_ptr< ColorType > p);

      //@}

      /**
       * @name state
       *
       * @brief Accessor and modifier functions for the %state
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String StateType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< StateType > StateOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< StateType, char > StateTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const StateOptional&
      state () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      StateOptional&
      state ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      state (const StateType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      state (const StateOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      state (::std::unique_ptr< StateType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureBase (const NameType&,
                   const IdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureBase (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBase (const FeatureBase& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureBase*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBase&
      operator= (const FeatureBase& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureBase ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< NameType > name_;
      static const NameType name_default_value_;
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      SeerShapeOptional seerShape_;
      ColorOptional color_;
      StateOptional state_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %HistoryVertex schema type.
     *
     * @nosubgrouping
     */
    class HistoryVertex: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureId
       *
       * @brief Accessor and modifier functions for the %featureId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String FeatureIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureIdType, char > FeatureIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureIdType&
      featureId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureIdType&
      featureId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureId (const FeatureIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureId (::std::unique_ptr< FeatureIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const FeatureIdType&
      featureId_default_value ();

      //@}

      /**
       * @name shapeId
       *
       * @brief Accessor and modifier functions for the %shapeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ShapeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ShapeIdType, char > ShapeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ShapeIdType&
      shapeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ShapeIdType&
      shapeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      shapeId (const ShapeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      shapeId (::std::unique_ptr< ShapeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const ShapeIdType&
      shapeId_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      HistoryVertex (const FeatureIdType&,
                     const ShapeIdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      HistoryVertex (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryVertex (const HistoryVertex& x,
                     ::xml_schema::Flags f = 0,
                     ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual HistoryVertex*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryVertex&
      operator= (const HistoryVertex& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~HistoryVertex ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< FeatureIdType > featureId_;
      static const FeatureIdType featureId_default_value_;
      ::xsd::cxx::tree::one< ShapeIdType > shapeId_;
      static const ShapeIdType shapeId_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %HistoryVertices schema type.
     *
     * @nosubgrouping
     */
    class HistoryVertices: public ::xml_schema::Type
    {
      public:
      /**
       * @name array
       *
       * @brief Accessor and modifier functions for the %array
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::HistoryVertex ArrayType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

      /**
       * @brief Element iterator type.
       */
      typedef ArraySequence::iterator ArrayIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ArraySequence::const_iterator ArrayConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ArraySequence&
      array () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ArraySequence&
      array ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      array (const ArraySequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      HistoryVertices ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      HistoryVertices (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryVertices (const HistoryVertices& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual HistoryVertices*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryVertices&
      operator= (const HistoryVertices& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~HistoryVertices ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ArraySequence array_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %HistoryEdge schema type.
     *
     * @nosubgrouping
     */
    class HistoryEdge: public ::xml_schema::Type
    {
      public:
      /**
       * @name sourceShapeId
       *
       * @brief Accessor and modifier functions for the %sourceShapeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String SourceShapeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SourceShapeIdType, char > SourceShapeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SourceShapeIdType&
      sourceShapeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SourceShapeIdType&
      sourceShapeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sourceShapeId (const SourceShapeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      sourceShapeId (::std::unique_ptr< SourceShapeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const SourceShapeIdType&
      sourceShapeId_default_value ();

      //@}

      /**
       * @name targetShapeId
       *
       * @brief Accessor and modifier functions for the %targetShapeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String TargetShapeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< TargetShapeIdType, char > TargetShapeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const TargetShapeIdType&
      targetShapeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      TargetShapeIdType&
      targetShapeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      targetShapeId (const TargetShapeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      targetShapeId (::std::unique_ptr< TargetShapeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const TargetShapeIdType&
      targetShapeId_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      HistoryEdge (const SourceShapeIdType&,
                   const TargetShapeIdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      HistoryEdge (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryEdge (const HistoryEdge& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual HistoryEdge*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryEdge&
      operator= (const HistoryEdge& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~HistoryEdge ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SourceShapeIdType > sourceShapeId_;
      static const SourceShapeIdType sourceShapeId_default_value_;
      ::xsd::cxx::tree::one< TargetShapeIdType > targetShapeId_;
      static const TargetShapeIdType targetShapeId_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %HistoryEdges schema type.
     *
     * @nosubgrouping
     */
    class HistoryEdges: public ::xml_schema::Type
    {
      public:
      /**
       * @name array
       *
       * @brief Accessor and modifier functions for the %array
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::HistoryEdge ArrayType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

      /**
       * @brief Element iterator type.
       */
      typedef ArraySequence::iterator ArrayIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ArraySequence::const_iterator ArrayConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ArraySequence&
      array () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ArraySequence&
      array ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      array (const ArraySequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      HistoryEdges ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      HistoryEdges (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryEdges (const HistoryEdges& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual HistoryEdges*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      HistoryEdges&
      operator= (const HistoryEdges& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~HistoryEdges ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ArraySequence array_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %ShapeHistory schema type.
     *
     * @nosubgrouping
     */
    class ShapeHistory: public ::xml_schema::Type
    {
      public:
      /**
       * @name vertices
       *
       * @brief Accessor and modifier functions for the %vertices
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::HistoryVertices VerticesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< VerticesType, char > VerticesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const VerticesType&
      vertices () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      VerticesType&
      vertices ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      vertices (const VerticesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      vertices (::std::unique_ptr< VerticesType > p);

      //@}

      /**
       * @name edges
       *
       * @brief Accessor and modifier functions for the %edges
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::HistoryEdges EdgesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EdgesType, char > EdgesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const EdgesType&
      edges () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      EdgesType&
      edges ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      edges (const EdgesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      edges (::std::unique_ptr< EdgesType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      ShapeHistory (const VerticesType&,
                    const EdgesType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      ShapeHistory (::std::unique_ptr< VerticesType >,
                    ::std::unique_ptr< EdgesType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      ShapeHistory (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeHistory (const ShapeHistory& x,
                    ::xml_schema::Flags f = 0,
                    ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual ShapeHistory*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      ShapeHistory&
      operator= (const ShapeHistory& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~ShapeHistory ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< VerticesType > vertices_;
      ::xsd::cxx::tree::one< EdgesType > edges_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Pick schema type.
     *
     * @nosubgrouping
     */
    class Pick: public ::xml_schema::Type
    {
      public:
      /**
       * @name id
       *
       * @brief Accessor and modifier functions for the %id
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String IdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IdType, char > IdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IdType&
      id () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IdType&
      id ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      id (const IdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      id (::std::unique_ptr< IdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const IdType&
      id_default_value ();

      //@}

      /**
       * @name u
       *
       * @brief Accessor and modifier functions for the %u
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double UType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< UType, char, ::xsd::cxx::tree::schema_type::double_ > UTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const UType&
      u () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      UType&
      u ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      u (const UType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static UType
      u_default_value ();

      //@}

      /**
       * @name v
       *
       * @brief Accessor and modifier functions for the %v
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double VType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< VType, char, ::xsd::cxx::tree::schema_type::double_ > VTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const VType&
      v () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      VType&
      v ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      v (const VType& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static VType
      v_default_value ();

      //@}

      /**
       * @name history
       *
       * @brief Accessor and modifier functions for the %history
       * optional element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::ShapeHistory HistoryType;

      /**
       * @brief Element optional container type.
       */
      typedef ::xsd::cxx::tree::optional< HistoryType > HistoryOptional;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< HistoryType, char > HistoryTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * container.
       *
       * @return A constant reference to the optional container.
       */
      const HistoryOptional&
      history () const;

      /**
       * @brief Return a read-write reference to the element container.
       *
       * @return A reference to the optional container.
       */
      HistoryOptional&
      history ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      history (const HistoryType& x);

      /**
       * @brief Set the element value.
       *
       * @param x An optional container with the new value to set.
       *
       * If the value is present in @a x then this function makes a copy 
       * of this value and sets it as the new value of the element.
       * Otherwise the element container is set the 'not present' state.
       */
      void
      history (const HistoryOptional& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly instead
       * of making a copy.
       */
      void
      history (::std::unique_ptr< HistoryType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Pick (const IdType&,
            const UType&,
            const VType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Pick (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Pick (const Pick& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Pick*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Pick&
      operator= (const Pick& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Pick ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IdType > id_;
      static const IdType id_default_value_;
      ::xsd::cxx::tree::one< UType > u_;
      ::xsd::cxx::tree::one< VType > v_;
      HistoryOptional history_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %Picks schema type.
     *
     * @nosubgrouping
     */
    class Picks: public ::xml_schema::Type
    {
      public:
      /**
       * @name array
       *
       * @brief Accessor and modifier functions for the %array
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Pick ArrayType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< ArrayType > ArraySequence;

      /**
       * @brief Element iterator type.
       */
      typedef ArraySequence::iterator ArrayIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef ArraySequence::const_iterator ArrayConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ArrayType, char > ArrayTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const ArraySequence&
      array () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      ArraySequence&
      array ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      array (const ArraySequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      Picks ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      Picks (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Picks (const Picks& x,
             ::xml_schema::Flags f = 0,
             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual Picks*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      Picks&
      operator= (const Picks& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~Picks ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ArraySequence array_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement&, const Vec3d&);

    void
    operator<< (::xercesc::DOMElement&, const Quat&);

    void
    operator<< (::xercesc::DOMElement&, const Matrixd&);

    void
    operator<< (::xercesc::DOMElement&, const ParameterValue&);

    void
    operator<< (::xercesc::DOMElement&, const Parameter&);

    void
    operator<< (::xercesc::DOMElement&, const EvolveRecord&);

    void
    operator<< (::xercesc::DOMElement&, const EvolveContainer&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeIdRecord&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeIdContainer&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureTagRecord&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureTagContainer&);

    void
    operator<< (::xercesc::DOMElement&, const IdSet&);

    void
    operator<< (::xercesc::DOMElement&, const DerivedRecord&);

    void
    operator<< (::xercesc::DOMElement&, const DerivedContainer&);

    void
    operator<< (::xercesc::DOMElement&, const SeerShape&);

    void
    operator<< (::xercesc::DOMElement&, const ColorValue&);

    void
    operator<< (::xercesc::DOMAttr&, const ColorValue&);

    void
    operator<< (::xml_schema::ListStream&,
                const ColorValue&);

    void
    operator<< (::xercesc::DOMElement&, const Color&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureBase&);

    void
    operator<< (::xercesc::DOMElement&, const HistoryVertex&);

    void
    operator<< (::xercesc::DOMElement&, const HistoryVertices&);

    void
    operator<< (::xercesc::DOMElement&, const HistoryEdge&);

    void
    operator<< (::xercesc::DOMElement&, const HistoryEdges&);

    void
    operator<< (::xercesc::DOMElement&, const ShapeHistory&);

    void
    operator<< (::xercesc::DOMElement&, const Pick&);

    void
    operator<< (::xercesc::DOMElement&, const Picks&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FEATUREBASE_H

// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featurebooleanbase.h"

namespace prj
{
  namespace srl
  {
    // IntersectionEdge
    // 

    const IntersectionEdge::FaceIdsType& IntersectionEdge::
    faceIds () const
    {
      return this->faceIds_.get ();
    }

    IntersectionEdge::FaceIdsType& IntersectionEdge::
    faceIds ()
    {
      return this->faceIds_.get ();
    }

    void IntersectionEdge::
    faceIds (const FaceIdsType& x)
    {
      this->faceIds_.set (x);
    }

    void IntersectionEdge::
    faceIds (::std::unique_ptr< FaceIdsType > x)
    {
      this->faceIds_.set (std::move (x));
    }

    const IntersectionEdge::EdgeIdType& IntersectionEdge::
    edgeId () const
    {
      return this->edgeId_.get ();
    }

    IntersectionEdge::EdgeIdType& IntersectionEdge::
    edgeId ()
    {
      return this->edgeId_.get ();
    }

    void IntersectionEdge::
    edgeId (const EdgeIdType& x)
    {
      this->edgeId_.set (x);
    }

    void IntersectionEdge::
    edgeId (::std::unique_ptr< EdgeIdType > x)
    {
      this->edgeId_.set (std::move (x));
    }

    const IntersectionEdge::EdgeIdType& IntersectionEdge::
    edgeId_default_value ()
    {
      return edgeId_default_value_;
    }


    // IntersectionEdges
    // 

    const IntersectionEdges::IntersectionEdgesSequence& IntersectionEdges::
    intersectionEdges () const
    {
      return this->intersectionEdges_;
    }

    IntersectionEdges::IntersectionEdgesSequence& IntersectionEdges::
    intersectionEdges ()
    {
      return this->intersectionEdges_;
    }

    void IntersectionEdges::
    intersectionEdges (const IntersectionEdgesSequence& s)
    {
      this->intersectionEdges_ = s;
    }


    // SplitFace
    // 

    const SplitFace::SourceFaceIdType& SplitFace::
    sourceFaceId () const
    {
      return this->sourceFaceId_.get ();
    }

    SplitFace::SourceFaceIdType& SplitFace::
    sourceFaceId ()
    {
      return this->sourceFaceId_.get ();
    }

    void SplitFace::
    sourceFaceId (const SourceFaceIdType& x)
    {
      this->sourceFaceId_.set (x);
    }

    void SplitFace::
    sourceFaceId (::std::unique_ptr< SourceFaceIdType > x)
    {
      this->sourceFaceId_.set (std::move (x));
    }

    const SplitFace::SourceFaceIdType& SplitFace::
    sourceFaceId_default_value ()
    {
      return sourceFaceId_default_value_;
    }

    const SplitFace::IntersectionEdgeIdsType& SplitFace::
    intersectionEdgeIds () const
    {
      return this->intersectionEdgeIds_.get ();
    }

    SplitFace::IntersectionEdgeIdsType& SplitFace::
    intersectionEdgeIds ()
    {
      return this->intersectionEdgeIds_.get ();
    }

    void SplitFace::
    intersectionEdgeIds (const IntersectionEdgeIdsType& x)
    {
      this->intersectionEdgeIds_.set (x);
    }

    void SplitFace::
    intersectionEdgeIds (::std::unique_ptr< IntersectionEdgeIdsType > x)
    {
      this->intersectionEdgeIds_.set (std::move (x));
    }

    const SplitFace::ResultFaceIdType& SplitFace::
    resultFaceId () const
    {
      return this->resultFaceId_.get ();
    }

    SplitFace::ResultFaceIdType& SplitFace::
    resultFaceId ()
    {
      return this->resultFaceId_.get ();
    }

    void SplitFace::
    resultFaceId (const ResultFaceIdType& x)
    {
      this->resultFaceId_.set (x);
    }

    void SplitFace::
    resultFaceId (::std::unique_ptr< ResultFaceIdType > x)
    {
      this->resultFaceId_.set (std::move (x));
    }

    const SplitFace::ResultFaceIdType& SplitFace::
    resultFaceId_default_value ()
    {
      return resultFaceId_default_value_;
    }

    const SplitFace::ResultWireIdType& SplitFace::
    resultWireId () const
    {
      return this->resultWireId_.get ();
    }

    SplitFace::ResultWireIdType& SplitFace::
    resultWireId ()
    {
      return this->resultWireId_.get ();
    }

    void SplitFace::
    resultWireId (const ResultWireIdType& x)
    {
      this->resultWireId_.set (x);
    }

    void SplitFace::
    resultWireId (::std::unique_ptr< ResultWireIdType > x)
    {
      this->resultWireId_.set (std::move (x));
    }

    const SplitFace::ResultWireIdType& SplitFace::
    resultWireId_default_value ()
    {
      return resultWireId_default_value_;
    }


    // SplitFaces
    // 

    const SplitFaces::SplitFacesSequence& SplitFaces::
    splitFaces () const
    {
      return this->splitFaces_;
    }

    SplitFaces::SplitFacesSequence& SplitFaces::
    splitFaces ()
    {
      return this->splitFaces_;
    }

    void SplitFaces::
    splitFaces (const SplitFacesSequence& s)
    {
      this->splitFaces_ = s;
    }


    // IMapWrapper
    // 

    const IMapWrapper::IntersectionEdgesType& IMapWrapper::
    intersectionEdges () const
    {
      return this->intersectionEdges_.get ();
    }

    IMapWrapper::IntersectionEdgesType& IMapWrapper::
    intersectionEdges ()
    {
      return this->intersectionEdges_.get ();
    }

    void IMapWrapper::
    intersectionEdges (const IntersectionEdgesType& x)
    {
      this->intersectionEdges_.set (x);
    }

    void IMapWrapper::
    intersectionEdges (::std::unique_ptr< IntersectionEdgesType > x)
    {
      this->intersectionEdges_.set (std::move (x));
    }

    const IMapWrapper::SplitFacesType& IMapWrapper::
    splitFaces () const
    {
      return this->splitFaces_.get ();
    }

    IMapWrapper::SplitFacesType& IMapWrapper::
    splitFaces ()
    {
      return this->splitFaces_.get ();
    }

    void IMapWrapper::
    splitFaces (const SplitFacesType& x)
    {
      this->splitFaces_.set (x);
    }

    void IMapWrapper::
    splitFaces (::std::unique_ptr< SplitFacesType > x)
    {
      this->splitFaces_.set (std::move (x));
    }


    // FeatureBooleanBase
    // 

    const FeatureBooleanBase::FeatureBaseType& FeatureBooleanBase::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureBooleanBase::FeatureBaseType& FeatureBooleanBase::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureBooleanBase::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureBooleanBase::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureBooleanBase::IMapWrapperType& FeatureBooleanBase::
    iMapWrapper () const
    {
      return this->iMapWrapper_.get ();
    }

    FeatureBooleanBase::IMapWrapperType& FeatureBooleanBase::
    iMapWrapper ()
    {
      return this->iMapWrapper_.get ();
    }

    void FeatureBooleanBase::
    iMapWrapper (const IMapWrapperType& x)
    {
      this->iMapWrapper_.set (x);
    }

    void FeatureBooleanBase::
    iMapWrapper (::std::unique_ptr< IMapWrapperType > x)
    {
      this->iMapWrapper_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // IntersectionEdge
    //

    const IntersectionEdge::EdgeIdType IntersectionEdge::edgeId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    IntersectionEdge::
    IntersectionEdge (const FaceIdsType& faceIds,
                      const EdgeIdType& edgeId)
    : ::xml_schema::Type (),
      faceIds_ (faceIds, this),
      edgeId_ (edgeId, this)
    {
    }

    IntersectionEdge::
    IntersectionEdge (::std::unique_ptr< FaceIdsType > faceIds,
                      const EdgeIdType& edgeId)
    : ::xml_schema::Type (),
      faceIds_ (std::move (faceIds), this),
      edgeId_ (edgeId, this)
    {
    }

    IntersectionEdge::
    IntersectionEdge (const IntersectionEdge& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      faceIds_ (x.faceIds_, f, this),
      edgeId_ (x.edgeId_, f, this)
    {
    }

    IntersectionEdge::
    IntersectionEdge (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      faceIds_ (this),
      edgeId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void IntersectionEdge::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // faceIds
        //
        if (n.name () == "faceIds" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FaceIdsType > r (
            FaceIdsTraits::create (i, f, this));

          if (!faceIds_.present ())
          {
            this->faceIds_.set (::std::move (r));
            continue;
          }
        }

        // edgeId
        //
        if (n.name () == "edgeId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EdgeIdType > r (
            EdgeIdTraits::create (i, f, this));

          if (!edgeId_.present ())
          {
            this->edgeId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!faceIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "faceIds",
          "");
      }

      if (!edgeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "edgeId",
          "");
      }
    }

    IntersectionEdge* IntersectionEdge::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class IntersectionEdge (*this, f, c);
    }

    IntersectionEdge& IntersectionEdge::
    operator= (const IntersectionEdge& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->faceIds_ = x.faceIds_;
        this->edgeId_ = x.edgeId_;
      }

      return *this;
    }

    IntersectionEdge::
    ~IntersectionEdge ()
    {
    }

    // IntersectionEdges
    //

    IntersectionEdges::
    IntersectionEdges ()
    : ::xml_schema::Type (),
      intersectionEdges_ (this)
    {
    }

    IntersectionEdges::
    IntersectionEdges (const IntersectionEdges& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      intersectionEdges_ (x.intersectionEdges_, f, this)
    {
    }

    IntersectionEdges::
    IntersectionEdges (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      intersectionEdges_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void IntersectionEdges::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // intersectionEdges
        //
        if (n.name () == "intersectionEdges" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IntersectionEdgesType > r (
            IntersectionEdgesTraits::create (i, f, this));

          this->intersectionEdges_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    IntersectionEdges* IntersectionEdges::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class IntersectionEdges (*this, f, c);
    }

    IntersectionEdges& IntersectionEdges::
    operator= (const IntersectionEdges& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->intersectionEdges_ = x.intersectionEdges_;
      }

      return *this;
    }

    IntersectionEdges::
    ~IntersectionEdges ()
    {
    }

    // SplitFace
    //

    const SplitFace::SourceFaceIdType SplitFace::sourceFaceId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const SplitFace::ResultFaceIdType SplitFace::resultFaceId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const SplitFace::ResultWireIdType SplitFace::resultWireId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    SplitFace::
    SplitFace (const SourceFaceIdType& sourceFaceId,
               const IntersectionEdgeIdsType& intersectionEdgeIds,
               const ResultFaceIdType& resultFaceId,
               const ResultWireIdType& resultWireId)
    : ::xml_schema::Type (),
      sourceFaceId_ (sourceFaceId, this),
      intersectionEdgeIds_ (intersectionEdgeIds, this),
      resultFaceId_ (resultFaceId, this),
      resultWireId_ (resultWireId, this)
    {
    }

    SplitFace::
    SplitFace (const SourceFaceIdType& sourceFaceId,
               ::std::unique_ptr< IntersectionEdgeIdsType > intersectionEdgeIds,
               const ResultFaceIdType& resultFaceId,
               const ResultWireIdType& resultWireId)
    : ::xml_schema::Type (),
      sourceFaceId_ (sourceFaceId, this),
      intersectionEdgeIds_ (std::move (intersectionEdgeIds), this),
      resultFaceId_ (resultFaceId, this),
      resultWireId_ (resultWireId, this)
    {
    }

    SplitFace::
    SplitFace (const SplitFace& x,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      sourceFaceId_ (x.sourceFaceId_, f, this),
      intersectionEdgeIds_ (x.intersectionEdgeIds_, f, this),
      resultFaceId_ (x.resultFaceId_, f, this),
      resultWireId_ (x.resultWireId_, f, this)
    {
    }

    SplitFace::
    SplitFace (const ::xercesc::DOMElement& e,
               ::xml_schema::Flags f,
               ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      sourceFaceId_ (this),
      intersectionEdgeIds_ (this),
      resultFaceId_ (this),
      resultWireId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SplitFace::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // sourceFaceId
        //
        if (n.name () == "sourceFaceId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SourceFaceIdType > r (
            SourceFaceIdTraits::create (i, f, this));

          if (!sourceFaceId_.present ())
          {
            this->sourceFaceId_.set (::std::move (r));
            continue;
          }
        }

        // intersectionEdgeIds
        //
        if (n.name () == "intersectionEdgeIds" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IntersectionEdgeIdsType > r (
            IntersectionEdgeIdsTraits::create (i, f, this));

          if (!intersectionEdgeIds_.present ())
          {
            this->intersectionEdgeIds_.set (::std::move (r));
            continue;
          }
        }

        // resultFaceId
        //
        if (n.name () == "resultFaceId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ResultFaceIdType > r (
            ResultFaceIdTraits::create (i, f, this));

          if (!resultFaceId_.present ())
          {
            this->resultFaceId_.set (::std::move (r));
            continue;
          }
        }

        // resultWireId
        //
        if (n.name () == "resultWireId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ResultWireIdType > r (
            ResultWireIdTraits::create (i, f, this));

          if (!resultWireId_.present ())
          {
            this->resultWireId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!sourceFaceId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "sourceFaceId",
          "");
      }

      if (!intersectionEdgeIds_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "intersectionEdgeIds",
          "");
      }

      if (!resultFaceId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "resultFaceId",
          "");
      }

      if (!resultWireId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "resultWireId",
          "");
      }
    }

    SplitFace* SplitFace::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SplitFace (*this, f, c);
    }

    SplitFace& SplitFace::
    operator= (const SplitFace& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->sourceFaceId_ = x.sourceFaceId_;
        this->intersectionEdgeIds_ = x.intersectionEdgeIds_;
        this->resultFaceId_ = x.resultFaceId_;
        this->resultWireId_ = x.resultWireId_;
      }

      return *this;
    }

    SplitFace::
    ~SplitFace ()
    {
    }

    // SplitFaces
    //

    SplitFaces::
    SplitFaces ()
    : ::xml_schema::Type (),
      splitFaces_ (this)
    {
    }

    SplitFaces::
    SplitFaces (const SplitFaces& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      splitFaces_ (x.splitFaces_, f, this)
    {
    }

    SplitFaces::
    SplitFaces (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      splitFaces_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SplitFaces::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // splitFaces
        //
        if (n.name () == "splitFaces" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SplitFacesType > r (
            SplitFacesTraits::create (i, f, this));

          this->splitFaces_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    SplitFaces* SplitFaces::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SplitFaces (*this, f, c);
    }

    SplitFaces& SplitFaces::
    operator= (const SplitFaces& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->splitFaces_ = x.splitFaces_;
      }

      return *this;
    }

    SplitFaces::
    ~SplitFaces ()
    {
    }

    // IMapWrapper
    //

    IMapWrapper::
    IMapWrapper (const IntersectionEdgesType& intersectionEdges,
                 const SplitFacesType& splitFaces)
    : ::xml_schema::Type (),
      intersectionEdges_ (intersectionEdges, this),
      splitFaces_ (splitFaces, this)
    {
    }

    IMapWrapper::
    IMapWrapper (::std::unique_ptr< IntersectionEdgesType > intersectionEdges,
                 ::std::unique_ptr< SplitFacesType > splitFaces)
    : ::xml_schema::Type (),
      intersectionEdges_ (std::move (intersectionEdges), this),
      splitFaces_ (std::move (splitFaces), this)
    {
    }

    IMapWrapper::
    IMapWrapper (const IMapWrapper& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      intersectionEdges_ (x.intersectionEdges_, f, this),
      splitFaces_ (x.splitFaces_, f, this)
    {
    }

    IMapWrapper::
    IMapWrapper (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      intersectionEdges_ (this),
      splitFaces_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void IMapWrapper::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // intersectionEdges
        //
        if (n.name () == "intersectionEdges" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IntersectionEdgesType > r (
            IntersectionEdgesTraits::create (i, f, this));

          if (!intersectionEdges_.present ())
          {
            this->intersectionEdges_.set (::std::move (r));
            continue;
          }
        }

        // splitFaces
        //
        if (n.name () == "splitFaces" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SplitFacesType > r (
            SplitFacesTraits::create (i, f, this));

          if (!splitFaces_.present ())
          {
            this->splitFaces_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!intersectionEdges_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "intersectionEdges",
          "");
      }

      if (!splitFaces_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "splitFaces",
          "");
      }
    }

    IMapWrapper* IMapWrapper::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class IMapWrapper (*this, f, c);
    }

    IMapWrapper& IMapWrapper::
    operator= (const IMapWrapper& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->intersectionEdges_ = x.intersectionEdges_;
        this->splitFaces_ = x.splitFaces_;
      }

      return *this;
    }

    IMapWrapper::
    ~IMapWrapper ()
    {
    }

    // FeatureBooleanBase
    //

    FeatureBooleanBase::
    FeatureBooleanBase (const FeatureBaseType& featureBase,
                        const IMapWrapperType& iMapWrapper)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      iMapWrapper_ (iMapWrapper, this)
    {
    }

    FeatureBooleanBase::
    FeatureBooleanBase (::std::unique_ptr< FeatureBaseType > featureBase,
                        ::std::unique_ptr< IMapWrapperType > iMapWrapper)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      iMapWrapper_ (std::move (iMapWrapper), this)
    {
    }

    FeatureBooleanBase::
    FeatureBooleanBase (const FeatureBooleanBase& x,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      iMapWrapper_ (x.iMapWrapper_, f, this)
    {
    }

    FeatureBooleanBase::
    FeatureBooleanBase (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f,
                        ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      iMapWrapper_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureBooleanBase::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // iMapWrapper
        //
        if (n.name () == "iMapWrapper" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IMapWrapperType > r (
            IMapWrapperTraits::create (i, f, this));

          if (!iMapWrapper_.present ())
          {
            this->iMapWrapper_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!iMapWrapper_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "iMapWrapper",
          "");
      }
    }

    FeatureBooleanBase* FeatureBooleanBase::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureBooleanBase (*this, f, c);
    }

    FeatureBooleanBase& FeatureBooleanBase::
    operator= (const FeatureBooleanBase& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->iMapWrapper_ = x.iMapWrapper_;
      }

      return *this;
    }

    FeatureBooleanBase::
    ~FeatureBooleanBase ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const IntersectionEdge& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // faceIds
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "faceIds",
            e));

        s << i.faceIds ();
      }

      // edgeId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "edgeId",
            e));

        s << i.edgeId ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const IntersectionEdges& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // intersectionEdges
      //
      for (IntersectionEdges::IntersectionEdgesConstIterator
           b (i.intersectionEdges ().begin ()), n (i.intersectionEdges ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "intersectionEdges",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SplitFace& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // sourceFaceId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "sourceFaceId",
            e));

        s << i.sourceFaceId ();
      }

      // intersectionEdgeIds
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "intersectionEdgeIds",
            e));

        s << i.intersectionEdgeIds ();
      }

      // resultFaceId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "resultFaceId",
            e));

        s << i.resultFaceId ();
      }

      // resultWireId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "resultWireId",
            e));

        s << i.resultWireId ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SplitFaces& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // splitFaces
      //
      for (SplitFaces::SplitFacesConstIterator
           b (i.splitFaces ().begin ()), n (i.splitFaces ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "splitFaces",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const IMapWrapper& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // intersectionEdges
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "intersectionEdges",
            e));

        s << i.intersectionEdges ();
      }

      // splitFaces
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "splitFaces",
            e));

        s << i.splitFaces ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureBooleanBase& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // iMapWrapper
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "iMapWrapper",
            e));

        s << i.iMapWrapper ();
      }
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


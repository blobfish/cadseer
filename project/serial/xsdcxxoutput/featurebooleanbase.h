// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from featurebooleanbase.xsd.
 */

#ifndef PRJ_SRL_FEATUREBOOLEANBASE_H
#define PRJ_SRL_FEATUREBOOLEANBASE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "featurebase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    class IntersectionEdge;
    class IntersectionEdges;
    class SplitFace;
    class SplitFaces;
    class IMapWrapper;
    class FeatureBooleanBase;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "featurebase.h"

namespace prj
{
  /**
   * @brief C++ namespace for the %http://www.cadseer.com/prj/srl
   * schema namespace.
   */
  namespace srl
  {
    /**
     * @brief Class corresponding to the %IntersectionEdge schema type.
     *
     * @nosubgrouping
     */
    class IntersectionEdge: public ::xml_schema::Type
    {
      public:
      /**
       * @name faceIds
       *
       * @brief Accessor and modifier functions for the %faceIds
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IdSet FaceIdsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FaceIdsType, char > FaceIdsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FaceIdsType&
      faceIds () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FaceIdsType&
      faceIds ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      faceIds (const FaceIdsType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      faceIds (::std::unique_ptr< FaceIdsType > p);

      //@}

      /**
       * @name edgeId
       *
       * @brief Accessor and modifier functions for the %edgeId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String EdgeIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< EdgeIdType, char > EdgeIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const EdgeIdType&
      edgeId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      EdgeIdType&
      edgeId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      edgeId (const EdgeIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      edgeId (::std::unique_ptr< EdgeIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const EdgeIdType&
      edgeId_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IntersectionEdge (const FaceIdsType&,
                        const EdgeIdType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      IntersectionEdge (::std::unique_ptr< FaceIdsType >,
                        const EdgeIdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IntersectionEdge (const ::xercesc::DOMElement& e,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IntersectionEdge (const IntersectionEdge& x,
                        ::xml_schema::Flags f = 0,
                        ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IntersectionEdge*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IntersectionEdge&
      operator= (const IntersectionEdge& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IntersectionEdge ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< FaceIdsType > faceIds_;
      ::xsd::cxx::tree::one< EdgeIdType > edgeId_;
      static const EdgeIdType edgeId_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IntersectionEdges schema type.
     *
     * @nosubgrouping
     */
    class IntersectionEdges: public ::xml_schema::Type
    {
      public:
      /**
       * @name intersectionEdges
       *
       * @brief Accessor and modifier functions for the %intersectionEdges
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IntersectionEdge IntersectionEdgesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< IntersectionEdgesType > IntersectionEdgesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef IntersectionEdgesSequence::iterator IntersectionEdgesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef IntersectionEdgesSequence::const_iterator IntersectionEdgesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IntersectionEdgesType, char > IntersectionEdgesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const IntersectionEdgesSequence&
      intersectionEdges () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      IntersectionEdgesSequence&
      intersectionEdges ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      intersectionEdges (const IntersectionEdgesSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IntersectionEdges ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IntersectionEdges (const ::xercesc::DOMElement& e,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IntersectionEdges (const IntersectionEdges& x,
                         ::xml_schema::Flags f = 0,
                         ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IntersectionEdges*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IntersectionEdges&
      operator= (const IntersectionEdges& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IntersectionEdges ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      IntersectionEdgesSequence intersectionEdges_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SplitFace schema type.
     *
     * @nosubgrouping
     */
    class SplitFace: public ::xml_schema::Type
    {
      public:
      /**
       * @name sourceFaceId
       *
       * @brief Accessor and modifier functions for the %sourceFaceId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String SourceFaceIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SourceFaceIdType, char > SourceFaceIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SourceFaceIdType&
      sourceFaceId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SourceFaceIdType&
      sourceFaceId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      sourceFaceId (const SourceFaceIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      sourceFaceId (::std::unique_ptr< SourceFaceIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const SourceFaceIdType&
      sourceFaceId_default_value ();

      //@}

      /**
       * @name intersectionEdgeIds
       *
       * @brief Accessor and modifier functions for the %intersectionEdgeIds
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IdSet IntersectionEdgeIdsType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IntersectionEdgeIdsType, char > IntersectionEdgeIdsTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IntersectionEdgeIdsType&
      intersectionEdgeIds () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IntersectionEdgeIdsType&
      intersectionEdgeIds ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      intersectionEdgeIds (const IntersectionEdgeIdsType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      intersectionEdgeIds (::std::unique_ptr< IntersectionEdgeIdsType > p);

      //@}

      /**
       * @name resultFaceId
       *
       * @brief Accessor and modifier functions for the %resultFaceId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ResultFaceIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ResultFaceIdType, char > ResultFaceIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ResultFaceIdType&
      resultFaceId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ResultFaceIdType&
      resultFaceId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      resultFaceId (const ResultFaceIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      resultFaceId (::std::unique_ptr< ResultFaceIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const ResultFaceIdType&
      resultFaceId_default_value ();

      //@}

      /**
       * @name resultWireId
       *
       * @brief Accessor and modifier functions for the %resultWireId
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::String ResultWireIdType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ResultWireIdType, char > ResultWireIdTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ResultWireIdType&
      resultWireId () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ResultWireIdType&
      resultWireId ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      resultWireId (const ResultWireIdType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      resultWireId (::std::unique_ptr< ResultWireIdType > p);

      /**
       * @brief Return the default value for the element.
       *
       * @return A read-only (constant) reference to the element's
       * default value.
       */
      static const ResultWireIdType&
      resultWireId_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SplitFace (const SourceFaceIdType&,
                 const IntersectionEdgeIdsType&,
                 const ResultFaceIdType&,
                 const ResultWireIdType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      SplitFace (const SourceFaceIdType&,
                 ::std::unique_ptr< IntersectionEdgeIdsType >,
                 const ResultFaceIdType&,
                 const ResultWireIdType&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SplitFace (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SplitFace (const SplitFace& x,
                 ::xml_schema::Flags f = 0,
                 ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SplitFace*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SplitFace&
      operator= (const SplitFace& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SplitFace ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< SourceFaceIdType > sourceFaceId_;
      static const SourceFaceIdType sourceFaceId_default_value_;
      ::xsd::cxx::tree::one< IntersectionEdgeIdsType > intersectionEdgeIds_;
      ::xsd::cxx::tree::one< ResultFaceIdType > resultFaceId_;
      static const ResultFaceIdType resultFaceId_default_value_;
      ::xsd::cxx::tree::one< ResultWireIdType > resultWireId_;
      static const ResultWireIdType resultWireId_default_value_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %SplitFaces schema type.
     *
     * @nosubgrouping
     */
    class SplitFaces: public ::xml_schema::Type
    {
      public:
      /**
       * @name splitFaces
       *
       * @brief Accessor and modifier functions for the %splitFaces
       * sequence element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::SplitFace SplitFacesType;

      /**
       * @brief Element sequence container type.
       */
      typedef ::xsd::cxx::tree::sequence< SplitFacesType > SplitFacesSequence;

      /**
       * @brief Element iterator type.
       */
      typedef SplitFacesSequence::iterator SplitFacesIterator;

      /**
       * @brief Element constant iterator type.
       */
      typedef SplitFacesSequence::const_iterator SplitFacesConstIterator;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SplitFacesType, char > SplitFacesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element
       * sequence.
       *
       * @return A constant reference to the sequence container.
       */
      const SplitFacesSequence&
      splitFaces () const;

      /**
       * @brief Return a read-write reference to the element sequence.
       *
       * @return A reference to the sequence container.
       */
      SplitFacesSequence&
      splitFaces ();

      /**
       * @brief Copy elements from a given sequence.
       *
       * @param s A sequence to copy elements from.
       *
       * For each element in @a s this function makes a copy and adds it 
       * to the sequence. Note that this operation completely changes the 
       * sequence and all old elements will be lost.
       */
      void
      splitFaces (const SplitFacesSequence& s);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      SplitFaces ();

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      SplitFaces (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SplitFaces (const SplitFaces& x,
                  ::xml_schema::Flags f = 0,
                  ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual SplitFaces*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      SplitFaces&
      operator= (const SplitFaces& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~SplitFaces ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      SplitFacesSequence splitFaces_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %IMapWrapper schema type.
     *
     * @nosubgrouping
     */
    class IMapWrapper: public ::xml_schema::Type
    {
      public:
      /**
       * @name intersectionEdges
       *
       * @brief Accessor and modifier functions for the %intersectionEdges
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IntersectionEdges IntersectionEdgesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IntersectionEdgesType, char > IntersectionEdgesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IntersectionEdgesType&
      intersectionEdges () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IntersectionEdgesType&
      intersectionEdges ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      intersectionEdges (const IntersectionEdgesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      intersectionEdges (::std::unique_ptr< IntersectionEdgesType > p);

      //@}

      /**
       * @name splitFaces
       *
       * @brief Accessor and modifier functions for the %splitFaces
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::SplitFaces SplitFacesType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< SplitFacesType, char > SplitFacesTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const SplitFacesType&
      splitFaces () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      SplitFacesType&
      splitFaces ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      splitFaces (const SplitFacesType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      splitFaces (::std::unique_ptr< SplitFacesType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      IMapWrapper (const IntersectionEdgesType&,
                   const SplitFacesType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      IMapWrapper (::std::unique_ptr< IntersectionEdgesType >,
                   ::std::unique_ptr< SplitFacesType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      IMapWrapper (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IMapWrapper (const IMapWrapper& x,
                   ::xml_schema::Flags f = 0,
                   ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual IMapWrapper*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      IMapWrapper&
      operator= (const IMapWrapper& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~IMapWrapper ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< IntersectionEdgesType > intersectionEdges_;
      ::xsd::cxx::tree::one< SplitFacesType > splitFaces_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureBooleanBase schema type.
     *
     * @nosubgrouping
     */
    class FeatureBooleanBase: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureBase
       *
       * @brief Accessor and modifier functions for the %featureBase
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureBase FeatureBaseType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureBaseType, char > FeatureBaseTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureBaseType&
      featureBase () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureBaseType&
      featureBase ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureBase (const FeatureBaseType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureBase (::std::unique_ptr< FeatureBaseType > p);

      //@}

      /**
       * @name iMapWrapper
       *
       * @brief Accessor and modifier functions for the %iMapWrapper
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::IMapWrapper IMapWrapperType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IMapWrapperType, char > IMapWrapperTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IMapWrapperType&
      iMapWrapper () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IMapWrapperType&
      iMapWrapper ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      iMapWrapper (const IMapWrapperType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      iMapWrapper (::std::unique_ptr< IMapWrapperType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureBooleanBase (const FeatureBaseType&,
                          const IMapWrapperType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      FeatureBooleanBase (::std::unique_ptr< FeatureBaseType >,
                          ::std::unique_ptr< IMapWrapperType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureBooleanBase (const ::xercesc::DOMElement& e,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBooleanBase (const FeatureBooleanBase& x,
                          ::xml_schema::Flags f = 0,
                          ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureBooleanBase*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureBooleanBase&
      operator= (const FeatureBooleanBase& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureBooleanBase ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< FeatureBaseType > featureBase_;
      ::xsd::cxx::tree::one< IMapWrapperType > iMapWrapper_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement&, const IntersectionEdge&);

    void
    operator<< (::xercesc::DOMElement&, const IntersectionEdges&);

    void
    operator<< (::xercesc::DOMElement&, const SplitFace&);

    void
    operator<< (::xercesc::DOMElement&, const SplitFaces&);

    void
    operator<< (::xercesc::DOMElement&, const IMapWrapper&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureBooleanBase&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FEATUREBOOLEANBASE_H

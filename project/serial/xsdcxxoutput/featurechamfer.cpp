// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featurechamfer.h"

namespace prj
{
  namespace srl
  {
    // ChamferPick
    // 

    const ChamferPick::EdgeIdType& ChamferPick::
    edgeId () const
    {
      return this->edgeId_.get ();
    }

    ChamferPick::EdgeIdType& ChamferPick::
    edgeId ()
    {
      return this->edgeId_.get ();
    }

    void ChamferPick::
    edgeId (const EdgeIdType& x)
    {
      this->edgeId_.set (x);
    }

    void ChamferPick::
    edgeId (::std::unique_ptr< EdgeIdType > x)
    {
      this->edgeId_.set (std::move (x));
    }

    const ChamferPick::EdgeIdType& ChamferPick::
    edgeId_default_value ()
    {
      return edgeId_default_value_;
    }

    const ChamferPick::UType& ChamferPick::
    u () const
    {
      return this->u_.get ();
    }

    ChamferPick::UType& ChamferPick::
    u ()
    {
      return this->u_.get ();
    }

    void ChamferPick::
    u (const UType& x)
    {
      this->u_.set (x);
    }

    ChamferPick::UType ChamferPick::
    u_default_value ()
    {
      return UType (::std::numeric_limits< ::xml_schema::Double >::quiet_NaN ());
    }

    const ChamferPick::VType& ChamferPick::
    v () const
    {
      return this->v_.get ();
    }

    ChamferPick::VType& ChamferPick::
    v ()
    {
      return this->v_.get ();
    }

    void ChamferPick::
    v (const VType& x)
    {
      this->v_.set (x);
    }

    ChamferPick::VType ChamferPick::
    v_default_value ()
    {
      return VType (::std::numeric_limits< ::xml_schema::Double >::quiet_NaN ());
    }

    const ChamferPick::FaceIdType& ChamferPick::
    faceId () const
    {
      return this->faceId_.get ();
    }

    ChamferPick::FaceIdType& ChamferPick::
    faceId ()
    {
      return this->faceId_.get ();
    }

    void ChamferPick::
    faceId (const FaceIdType& x)
    {
      this->faceId_.set (x);
    }

    void ChamferPick::
    faceId (::std::unique_ptr< FaceIdType > x)
    {
      this->faceId_.set (std::move (x));
    }

    const ChamferPick::FaceIdType& ChamferPick::
    faceId_default_value ()
    {
      return faceId_default_value_;
    }


    // ChamferPicks
    // 

    const ChamferPicks::ArraySequence& ChamferPicks::
    array () const
    {
      return this->array_;
    }

    ChamferPicks::ArraySequence& ChamferPicks::
    array ()
    {
      return this->array_;
    }

    void ChamferPicks::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // SymChamfer
    // 

    const SymChamfer::ChamferPicksType& SymChamfer::
    chamferPicks () const
    {
      return this->chamferPicks_.get ();
    }

    SymChamfer::ChamferPicksType& SymChamfer::
    chamferPicks ()
    {
      return this->chamferPicks_.get ();
    }

    void SymChamfer::
    chamferPicks (const ChamferPicksType& x)
    {
      this->chamferPicks_.set (x);
    }

    void SymChamfer::
    chamferPicks (::std::unique_ptr< ChamferPicksType > x)
    {
      this->chamferPicks_.set (std::move (x));
    }

    const SymChamfer::DistanceType& SymChamfer::
    distance () const
    {
      return this->distance_.get ();
    }

    SymChamfer::DistanceType& SymChamfer::
    distance ()
    {
      return this->distance_.get ();
    }

    void SymChamfer::
    distance (const DistanceType& x)
    {
      this->distance_.set (x);
    }

    void SymChamfer::
    distance (::std::unique_ptr< DistanceType > x)
    {
      this->distance_.set (std::move (x));
    }


    // SymChamfers
    // 

    const SymChamfers::ArraySequence& SymChamfers::
    array () const
    {
      return this->array_;
    }

    SymChamfers::ArraySequence& SymChamfers::
    array ()
    {
      return this->array_;
    }

    void SymChamfers::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // FeatureChamfer
    // 

    const FeatureChamfer::FeatureBaseType& FeatureChamfer::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureChamfer::FeatureBaseType& FeatureChamfer::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureChamfer::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureChamfer::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureChamfer::ShapeMapType& FeatureChamfer::
    shapeMap () const
    {
      return this->shapeMap_.get ();
    }

    FeatureChamfer::ShapeMapType& FeatureChamfer::
    shapeMap ()
    {
      return this->shapeMap_.get ();
    }

    void FeatureChamfer::
    shapeMap (const ShapeMapType& x)
    {
      this->shapeMap_.set (x);
    }

    void FeatureChamfer::
    shapeMap (::std::unique_ptr< ShapeMapType > x)
    {
      this->shapeMap_.set (std::move (x));
    }

    const FeatureChamfer::SymChamfersType& FeatureChamfer::
    symChamfers () const
    {
      return this->symChamfers_.get ();
    }

    FeatureChamfer::SymChamfersType& FeatureChamfer::
    symChamfers ()
    {
      return this->symChamfers_.get ();
    }

    void FeatureChamfer::
    symChamfers (const SymChamfersType& x)
    {
      this->symChamfers_.set (x);
    }

    void FeatureChamfer::
    symChamfers (::std::unique_ptr< SymChamfersType > x)
    {
      this->symChamfers_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // ChamferPick
    //

    const ChamferPick::EdgeIdType ChamferPick::edgeId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const ChamferPick::FaceIdType ChamferPick::faceId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    ChamferPick::
    ChamferPick (const EdgeIdType& edgeId,
                 const UType& u,
                 const VType& v,
                 const FaceIdType& faceId)
    : ::xml_schema::Type (),
      edgeId_ (edgeId, this),
      u_ (u, this),
      v_ (v, this),
      faceId_ (faceId, this)
    {
    }

    ChamferPick::
    ChamferPick (const ChamferPick& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      edgeId_ (x.edgeId_, f, this),
      u_ (x.u_, f, this),
      v_ (x.v_, f, this),
      faceId_ (x.faceId_, f, this)
    {
    }

    ChamferPick::
    ChamferPick (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      edgeId_ (this),
      u_ (this),
      v_ (this),
      faceId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ChamferPick::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // edgeId
        //
        if (n.name () == "edgeId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EdgeIdType > r (
            EdgeIdTraits::create (i, f, this));

          if (!edgeId_.present ())
          {
            this->edgeId_.set (::std::move (r));
            continue;
          }
        }

        // u
        //
        if (n.name () == "u" && n.namespace_ ().empty ())
        {
          if (!u_.present ())
          {
            this->u_.set (UTraits::create (i, f, this));
            continue;
          }
        }

        // v
        //
        if (n.name () == "v" && n.namespace_ ().empty ())
        {
          if (!v_.present ())
          {
            this->v_.set (VTraits::create (i, f, this));
            continue;
          }
        }

        // faceId
        //
        if (n.name () == "faceId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FaceIdType > r (
            FaceIdTraits::create (i, f, this));

          if (!faceId_.present ())
          {
            this->faceId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!edgeId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "edgeId",
          "");
      }

      if (!u_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "u",
          "");
      }

      if (!v_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "v",
          "");
      }

      if (!faceId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "faceId",
          "");
      }
    }

    ChamferPick* ChamferPick::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ChamferPick (*this, f, c);
    }

    ChamferPick& ChamferPick::
    operator= (const ChamferPick& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->edgeId_ = x.edgeId_;
        this->u_ = x.u_;
        this->v_ = x.v_;
        this->faceId_ = x.faceId_;
      }

      return *this;
    }

    ChamferPick::
    ~ChamferPick ()
    {
    }

    // ChamferPicks
    //

    ChamferPicks::
    ChamferPicks ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    ChamferPicks::
    ChamferPicks (const ChamferPicks& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    ChamferPicks::
    ChamferPicks (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ChamferPicks::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    ChamferPicks* ChamferPicks::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ChamferPicks (*this, f, c);
    }

    ChamferPicks& ChamferPicks::
    operator= (const ChamferPicks& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    ChamferPicks::
    ~ChamferPicks ()
    {
    }

    // SymChamfer
    //

    SymChamfer::
    SymChamfer (const ChamferPicksType& chamferPicks,
                const DistanceType& distance)
    : ::xml_schema::Type (),
      chamferPicks_ (chamferPicks, this),
      distance_ (distance, this)
    {
    }

    SymChamfer::
    SymChamfer (::std::unique_ptr< ChamferPicksType > chamferPicks,
                ::std::unique_ptr< DistanceType > distance)
    : ::xml_schema::Type (),
      chamferPicks_ (std::move (chamferPicks), this),
      distance_ (std::move (distance), this)
    {
    }

    SymChamfer::
    SymChamfer (const SymChamfer& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      chamferPicks_ (x.chamferPicks_, f, this),
      distance_ (x.distance_, f, this)
    {
    }

    SymChamfer::
    SymChamfer (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      chamferPicks_ (this),
      distance_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SymChamfer::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // chamferPicks
        //
        if (n.name () == "chamferPicks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ChamferPicksType > r (
            ChamferPicksTraits::create (i, f, this));

          if (!chamferPicks_.present ())
          {
            this->chamferPicks_.set (::std::move (r));
            continue;
          }
        }

        // distance
        //
        if (n.name () == "distance" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DistanceType > r (
            DistanceTraits::create (i, f, this));

          if (!distance_.present ())
          {
            this->distance_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!chamferPicks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "chamferPicks",
          "");
      }

      if (!distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distance",
          "");
      }
    }

    SymChamfer* SymChamfer::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SymChamfer (*this, f, c);
    }

    SymChamfer& SymChamfer::
    operator= (const SymChamfer& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->chamferPicks_ = x.chamferPicks_;
        this->distance_ = x.distance_;
      }

      return *this;
    }

    SymChamfer::
    ~SymChamfer ()
    {
    }

    // SymChamfers
    //

    SymChamfers::
    SymChamfers ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    SymChamfers::
    SymChamfers (const SymChamfers& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    SymChamfers::
    SymChamfers (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SymChamfers::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    SymChamfers* SymChamfers::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SymChamfers (*this, f, c);
    }

    SymChamfers& SymChamfers::
    operator= (const SymChamfers& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    SymChamfers::
    ~SymChamfers ()
    {
    }

    // FeatureChamfer
    //

    FeatureChamfer::
    FeatureChamfer (const FeatureBaseType& featureBase,
                    const ShapeMapType& shapeMap,
                    const SymChamfersType& symChamfers)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      shapeMap_ (shapeMap, this),
      symChamfers_ (symChamfers, this)
    {
    }

    FeatureChamfer::
    FeatureChamfer (::std::unique_ptr< FeatureBaseType > featureBase,
                    ::std::unique_ptr< ShapeMapType > shapeMap,
                    ::std::unique_ptr< SymChamfersType > symChamfers)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      shapeMap_ (std::move (shapeMap), this),
      symChamfers_ (std::move (symChamfers), this)
    {
    }

    FeatureChamfer::
    FeatureChamfer (const FeatureChamfer& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      shapeMap_ (x.shapeMap_, f, this),
      symChamfers_ (x.symChamfers_, f, this)
    {
    }

    FeatureChamfer::
    FeatureChamfer (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      shapeMap_ (this),
      symChamfers_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureChamfer::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // shapeMap
        //
        if (n.name () == "shapeMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ShapeMapType > r (
            ShapeMapTraits::create (i, f, this));

          if (!shapeMap_.present ())
          {
            this->shapeMap_.set (::std::move (r));
            continue;
          }
        }

        // symChamfers
        //
        if (n.name () == "symChamfers" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SymChamfersType > r (
            SymChamfersTraits::create (i, f, this));

          if (!symChamfers_.present ())
          {
            this->symChamfers_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!shapeMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "shapeMap",
          "");
      }

      if (!symChamfers_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "symChamfers",
          "");
      }
    }

    FeatureChamfer* FeatureChamfer::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureChamfer (*this, f, c);
    }

    FeatureChamfer& FeatureChamfer::
    operator= (const FeatureChamfer& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->shapeMap_ = x.shapeMap_;
        this->symChamfers_ = x.symChamfers_;
      }

      return *this;
    }

    FeatureChamfer::
    ~FeatureChamfer ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::chamfer (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::chamfer (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::chamfer (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::chamfer (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::chamfer (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::chamfer (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
        ::prj::srl::chamfer (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureChamfer > (
          ::prj::srl::chamfer (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "chamfer" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureChamfer > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureChamfer, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "chamfer",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureChamfer >
    chamfer (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "chamfer" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureChamfer > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureChamfer, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "chamfer",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const ChamferPick& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // edgeId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "edgeId",
            e));

        s << i.edgeId ();
      }

      // u
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "u",
            e));

        s << ::xml_schema::AsDouble(i.u ());
      }

      // v
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "v",
            e));

        s << ::xml_schema::AsDouble(i.v ());
      }

      // faceId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "faceId",
            e));

        s << i.faceId ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ChamferPicks& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (ChamferPicks::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SymChamfer& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // chamferPicks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "chamferPicks",
            e));

        s << i.chamferPicks ();
      }

      // distance
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distance",
            e));

        s << i.distance ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SymChamfers& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (SymChamfers::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureChamfer& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // shapeMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "shapeMap",
            e));

        s << i.shapeMap ();
      }

      // symChamfers
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "symChamfers",
            e));

        s << i.symChamfers ();
      }
    }

    void
    chamfer (::std::ostream& o,
             const ::prj::srl::FeatureChamfer& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    chamfer (::std::ostream& o,
             const ::prj::srl::FeatureChamfer& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    chamfer (::std::ostream& o,
             const ::prj::srl::FeatureChamfer& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    chamfer (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureChamfer& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    chamfer (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureChamfer& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    chamfer (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureChamfer& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::chamfer (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    chamfer (::xercesc::DOMDocument& d,
             const ::prj::srl::FeatureChamfer& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "chamfer" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "chamfer",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    chamfer (const ::prj::srl::FeatureChamfer& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "chamfer",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::chamfer (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


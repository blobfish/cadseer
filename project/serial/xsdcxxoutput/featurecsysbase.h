// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from featurecsysbase.xsd.
 */

#ifndef PRJ_SRL_FEATURECSYSBASE_H
#define PRJ_SRL_FEATURECSYSBASE_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "featurebase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    class CSys;
    class FeatureCSysBase;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "featurebase.h"

namespace prj
{
  /**
   * @brief C++ namespace for the %http://www.cadseer.com/prj/srl
   * schema namespace.
   */
  namespace srl
  {
    /**
     * @brief Class corresponding to the %CSys schema type.
     *
     * @nosubgrouping
     */
    class CSys: public ::xml_schema::Type
    {
      public:
      /**
       * @name i0j0
       *
       * @brief Accessor and modifier functions for the %i0j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j0Type&
      i0j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j0Type&
      i0j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j0 (const I0j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j0Type
      i0j0_default_value ();

      //@}

      /**
       * @name i0j1
       *
       * @brief Accessor and modifier functions for the %i0j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j1Type&
      i0j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j1Type&
      i0j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j1 (const I0j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j1Type
      i0j1_default_value ();

      //@}

      /**
       * @name i0j2
       *
       * @brief Accessor and modifier functions for the %i0j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j2Type&
      i0j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j2Type&
      i0j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j2 (const I0j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j2Type
      i0j2_default_value ();

      //@}

      /**
       * @name i0j3
       *
       * @brief Accessor and modifier functions for the %i0j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I0j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I0j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I0j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I0j3Type&
      i0j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I0j3Type&
      i0j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i0j3 (const I0j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I0j3Type
      i0j3_default_value ();

      //@}

      /**
       * @name i1j0
       *
       * @brief Accessor and modifier functions for the %i1j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j0Type&
      i1j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j0Type&
      i1j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j0 (const I1j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j0Type
      i1j0_default_value ();

      //@}

      /**
       * @name i1j1
       *
       * @brief Accessor and modifier functions for the %i1j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j1Type&
      i1j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j1Type&
      i1j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j1 (const I1j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j1Type
      i1j1_default_value ();

      //@}

      /**
       * @name i1j2
       *
       * @brief Accessor and modifier functions for the %i1j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j2Type&
      i1j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j2Type&
      i1j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j2 (const I1j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j2Type
      i1j2_default_value ();

      //@}

      /**
       * @name i1j3
       *
       * @brief Accessor and modifier functions for the %i1j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I1j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I1j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I1j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I1j3Type&
      i1j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I1j3Type&
      i1j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i1j3 (const I1j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I1j3Type
      i1j3_default_value ();

      //@}

      /**
       * @name i2j0
       *
       * @brief Accessor and modifier functions for the %i2j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j0Type&
      i2j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j0Type&
      i2j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j0 (const I2j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j0Type
      i2j0_default_value ();

      //@}

      /**
       * @name i2j1
       *
       * @brief Accessor and modifier functions for the %i2j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j1Type&
      i2j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j1Type&
      i2j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j1 (const I2j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j1Type
      i2j1_default_value ();

      //@}

      /**
       * @name i2j2
       *
       * @brief Accessor and modifier functions for the %i2j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j2Type&
      i2j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j2Type&
      i2j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j2 (const I2j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j2Type
      i2j2_default_value ();

      //@}

      /**
       * @name i2j3
       *
       * @brief Accessor and modifier functions for the %i2j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I2j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I2j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I2j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I2j3Type&
      i2j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I2j3Type&
      i2j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i2j3 (const I2j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I2j3Type
      i2j3_default_value ();

      //@}

      /**
       * @name i3j0
       *
       * @brief Accessor and modifier functions for the %i3j0
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j0Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j0Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j0Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j0Type&
      i3j0 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j0Type&
      i3j0 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j0 (const I3j0Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j0Type
      i3j0_default_value ();

      //@}

      /**
       * @name i3j1
       *
       * @brief Accessor and modifier functions for the %i3j1
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j1Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j1Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j1Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j1Type&
      i3j1 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j1Type&
      i3j1 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j1 (const I3j1Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j1Type
      i3j1_default_value ();

      //@}

      /**
       * @name i3j2
       *
       * @brief Accessor and modifier functions for the %i3j2
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j2Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j2Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j2Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j2Type&
      i3j2 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j2Type&
      i3j2 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j2 (const I3j2Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j2Type
      i3j2_default_value ();

      //@}

      /**
       * @name i3j3
       *
       * @brief Accessor and modifier functions for the %i3j3
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::xml_schema::Double I3j3Type;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< I3j3Type, char, ::xsd::cxx::tree::schema_type::double_ > I3j3Traits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const I3j3Type&
      i3j3 () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      I3j3Type&
      i3j3 ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      i3j3 (const I3j3Type& x);

      /**
       * @brief Return the default value for the element.
       *
       * @return The element's default value.
       */
      static I3j3Type
      i3j3_default_value ();

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      CSys (const I0j0Type&,
            const I0j1Type&,
            const I0j2Type&,
            const I0j3Type&,
            const I1j0Type&,
            const I1j1Type&,
            const I1j2Type&,
            const I1j3Type&,
            const I2j0Type&,
            const I2j1Type&,
            const I2j2Type&,
            const I2j3Type&,
            const I3j0Type&,
            const I3j1Type&,
            const I3j2Type&,
            const I3j3Type&);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      CSys (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CSys (const CSys& x,
            ::xml_schema::Flags f = 0,
            ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual CSys*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      CSys&
      operator= (const CSys& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~CSys ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< I0j0Type > i0j0_;
      ::xsd::cxx::tree::one< I0j1Type > i0j1_;
      ::xsd::cxx::tree::one< I0j2Type > i0j2_;
      ::xsd::cxx::tree::one< I0j3Type > i0j3_;
      ::xsd::cxx::tree::one< I1j0Type > i1j0_;
      ::xsd::cxx::tree::one< I1j1Type > i1j1_;
      ::xsd::cxx::tree::one< I1j2Type > i1j2_;
      ::xsd::cxx::tree::one< I1j3Type > i1j3_;
      ::xsd::cxx::tree::one< I2j0Type > i2j0_;
      ::xsd::cxx::tree::one< I2j1Type > i2j1_;
      ::xsd::cxx::tree::one< I2j2Type > i2j2_;
      ::xsd::cxx::tree::one< I2j3Type > i2j3_;
      ::xsd::cxx::tree::one< I3j0Type > i3j0_;
      ::xsd::cxx::tree::one< I3j1Type > i3j1_;
      ::xsd::cxx::tree::one< I3j2Type > i3j2_;
      ::xsd::cxx::tree::one< I3j3Type > i3j3_;

      //@endcond
    };

    /**
     * @brief Class corresponding to the %FeatureCSysBase schema type.
     *
     * @nosubgrouping
     */
    class FeatureCSysBase: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureBase
       *
       * @brief Accessor and modifier functions for the %featureBase
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureBase FeatureBaseType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureBaseType, char > FeatureBaseTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureBaseType&
      featureBase () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureBaseType&
      featureBase ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureBase (const FeatureBaseType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureBase (::std::unique_ptr< FeatureBaseType > p);

      //@}

      /**
       * @name csys
       *
       * @brief Accessor and modifier functions for the %csys
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::CSys CsysType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CsysType&
      csys () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CsysType&
      csys ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      csys (const CsysType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      csys (::std::unique_ptr< CsysType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureCSysBase (const FeatureBaseType&,
                       const CsysType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      FeatureCSysBase (::std::unique_ptr< FeatureBaseType >,
                       ::std::unique_ptr< CsysType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureCSysBase (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureCSysBase (const FeatureCSysBase& x,
                       ::xml_schema::Flags f = 0,
                       ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureCSysBase*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureCSysBase&
      operator= (const FeatureCSysBase& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureCSysBase ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< FeatureBaseType > featureBase_;
      ::xsd::cxx::tree::one< CsysType > csys_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement&, const CSys&);

    void
    operator<< (::xercesc::DOMElement&, const FeatureCSysBase&);
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FEATURECSYSBASE_H

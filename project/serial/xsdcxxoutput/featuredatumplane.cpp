// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featuredatumplane.h"

namespace prj
{
  namespace srl
  {
    // DatumPlanePlanarOffset
    // 

    const DatumPlanePlanarOffset::FacePickType& DatumPlanePlanarOffset::
    facePick () const
    {
      return this->facePick_.get ();
    }

    DatumPlanePlanarOffset::FacePickType& DatumPlanePlanarOffset::
    facePick ()
    {
      return this->facePick_.get ();
    }

    void DatumPlanePlanarOffset::
    facePick (const FacePickType& x)
    {
      this->facePick_.set (x);
    }

    void DatumPlanePlanarOffset::
    facePick (::std::unique_ptr< FacePickType > x)
    {
      this->facePick_.set (std::move (x));
    }

    const DatumPlanePlanarOffset::OffsetType& DatumPlanePlanarOffset::
    offset () const
    {
      return this->offset_.get ();
    }

    DatumPlanePlanarOffset::OffsetType& DatumPlanePlanarOffset::
    offset ()
    {
      return this->offset_.get ();
    }

    void DatumPlanePlanarOffset::
    offset (const OffsetType& x)
    {
      this->offset_.set (x);
    }

    void DatumPlanePlanarOffset::
    offset (::std::unique_ptr< OffsetType > x)
    {
      this->offset_.set (std::move (x));
    }


    // DatumPlanePlanarCenter
    // 

    const DatumPlanePlanarCenter::FacePick1Type& DatumPlanePlanarCenter::
    facePick1 () const
    {
      return this->facePick1_.get ();
    }

    DatumPlanePlanarCenter::FacePick1Type& DatumPlanePlanarCenter::
    facePick1 ()
    {
      return this->facePick1_.get ();
    }

    void DatumPlanePlanarCenter::
    facePick1 (const FacePick1Type& x)
    {
      this->facePick1_.set (x);
    }

    void DatumPlanePlanarCenter::
    facePick1 (::std::unique_ptr< FacePick1Type > x)
    {
      this->facePick1_.set (std::move (x));
    }

    const DatumPlanePlanarCenter::FacePick2Type& DatumPlanePlanarCenter::
    facePick2 () const
    {
      return this->facePick2_.get ();
    }

    DatumPlanePlanarCenter::FacePick2Type& DatumPlanePlanarCenter::
    facePick2 ()
    {
      return this->facePick2_.get ();
    }

    void DatumPlanePlanarCenter::
    facePick2 (const FacePick2Type& x)
    {
      this->facePick2_.set (x);
    }

    void DatumPlanePlanarCenter::
    facePick2 (::std::unique_ptr< FacePick2Type > x)
    {
      this->facePick2_.set (std::move (x));
    }


    // DatumPlanePlanarParallelThroughEdge
    // 

    const DatumPlanePlanarParallelThroughEdge::FacePickType& DatumPlanePlanarParallelThroughEdge::
    facePick () const
    {
      return this->facePick_.get ();
    }

    DatumPlanePlanarParallelThroughEdge::FacePickType& DatumPlanePlanarParallelThroughEdge::
    facePick ()
    {
      return this->facePick_.get ();
    }

    void DatumPlanePlanarParallelThroughEdge::
    facePick (const FacePickType& x)
    {
      this->facePick_.set (x);
    }

    void DatumPlanePlanarParallelThroughEdge::
    facePick (::std::unique_ptr< FacePickType > x)
    {
      this->facePick_.set (std::move (x));
    }

    const DatumPlanePlanarParallelThroughEdge::EdgePickType& DatumPlanePlanarParallelThroughEdge::
    edgePick () const
    {
      return this->edgePick_.get ();
    }

    DatumPlanePlanarParallelThroughEdge::EdgePickType& DatumPlanePlanarParallelThroughEdge::
    edgePick ()
    {
      return this->edgePick_.get ();
    }

    void DatumPlanePlanarParallelThroughEdge::
    edgePick (const EdgePickType& x)
    {
      this->edgePick_.set (x);
    }

    void DatumPlanePlanarParallelThroughEdge::
    edgePick (::std::unique_ptr< EdgePickType > x)
    {
      this->edgePick_.set (std::move (x));
    }


    // SolverChoice
    // 

    const SolverChoice::OffsetOptional& SolverChoice::
    offset () const
    {
      return this->offset_;
    }

    SolverChoice::OffsetOptional& SolverChoice::
    offset ()
    {
      return this->offset_;
    }

    void SolverChoice::
    offset (const OffsetType& x)
    {
      this->offset_.set (x);
    }

    void SolverChoice::
    offset (const OffsetOptional& x)
    {
      this->offset_ = x;
    }

    void SolverChoice::
    offset (::std::unique_ptr< OffsetType > x)
    {
      this->offset_.set (std::move (x));
    }

    const SolverChoice::CenterOptional& SolverChoice::
    center () const
    {
      return this->center_;
    }

    SolverChoice::CenterOptional& SolverChoice::
    center ()
    {
      return this->center_;
    }

    void SolverChoice::
    center (const CenterType& x)
    {
      this->center_.set (x);
    }

    void SolverChoice::
    center (const CenterOptional& x)
    {
      this->center_ = x;
    }

    void SolverChoice::
    center (::std::unique_ptr< CenterType > x)
    {
      this->center_.set (std::move (x));
    }

    const SolverChoice::ParallelThroughEdgeOptional& SolverChoice::
    parallelThroughEdge () const
    {
      return this->parallelThroughEdge_;
    }

    SolverChoice::ParallelThroughEdgeOptional& SolverChoice::
    parallelThroughEdge ()
    {
      return this->parallelThroughEdge_;
    }

    void SolverChoice::
    parallelThroughEdge (const ParallelThroughEdgeType& x)
    {
      this->parallelThroughEdge_.set (x);
    }

    void SolverChoice::
    parallelThroughEdge (const ParallelThroughEdgeOptional& x)
    {
      this->parallelThroughEdge_ = x;
    }

    void SolverChoice::
    parallelThroughEdge (::std::unique_ptr< ParallelThroughEdgeType > x)
    {
      this->parallelThroughEdge_.set (std::move (x));
    }


    // FeatureDatumPlane
    // 

    const FeatureDatumPlane::FeatureBaseType& FeatureDatumPlane::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureDatumPlane::FeatureBaseType& FeatureDatumPlane::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureDatumPlane::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureDatumPlane::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureDatumPlane::RadiusType& FeatureDatumPlane::
    radius () const
    {
      return this->radius_.get ();
    }

    FeatureDatumPlane::RadiusType& FeatureDatumPlane::
    radius ()
    {
      return this->radius_.get ();
    }

    void FeatureDatumPlane::
    radius (const RadiusType& x)
    {
      this->radius_.set (x);
    }

    void FeatureDatumPlane::
    radius (::std::unique_ptr< RadiusType > x)
    {
      this->radius_.set (std::move (x));
    }

    const FeatureDatumPlane::AutoSizeType& FeatureDatumPlane::
    autoSize () const
    {
      return this->autoSize_.get ();
    }

    FeatureDatumPlane::AutoSizeType& FeatureDatumPlane::
    autoSize ()
    {
      return this->autoSize_.get ();
    }

    void FeatureDatumPlane::
    autoSize (const AutoSizeType& x)
    {
      this->autoSize_.set (x);
    }

    void FeatureDatumPlane::
    autoSize (::std::unique_ptr< AutoSizeType > x)
    {
      this->autoSize_.set (std::move (x));
    }

    const FeatureDatumPlane::MatrixType& FeatureDatumPlane::
    matrix () const
    {
      return this->matrix_.get ();
    }

    FeatureDatumPlane::MatrixType& FeatureDatumPlane::
    matrix ()
    {
      return this->matrix_.get ();
    }

    void FeatureDatumPlane::
    matrix (const MatrixType& x)
    {
      this->matrix_.set (x);
    }

    void FeatureDatumPlane::
    matrix (::std::unique_ptr< MatrixType > x)
    {
      this->matrix_.set (std::move (x));
    }

    const FeatureDatumPlane::SolverChoiceType& FeatureDatumPlane::
    solverChoice () const
    {
      return this->solverChoice_.get ();
    }

    FeatureDatumPlane::SolverChoiceType& FeatureDatumPlane::
    solverChoice ()
    {
      return this->solverChoice_.get ();
    }

    void FeatureDatumPlane::
    solverChoice (const SolverChoiceType& x)
    {
      this->solverChoice_.set (x);
    }

    void FeatureDatumPlane::
    solverChoice (::std::unique_ptr< SolverChoiceType > x)
    {
      this->solverChoice_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // DatumPlanePlanarOffset
    //

    DatumPlanePlanarOffset::
    DatumPlanePlanarOffset (const FacePickType& facePick,
                            const OffsetType& offset)
    : ::xml_schema::Type (),
      facePick_ (facePick, this),
      offset_ (offset, this)
    {
    }

    DatumPlanePlanarOffset::
    DatumPlanePlanarOffset (::std::unique_ptr< FacePickType > facePick,
                            ::std::unique_ptr< OffsetType > offset)
    : ::xml_schema::Type (),
      facePick_ (std::move (facePick), this),
      offset_ (std::move (offset), this)
    {
    }

    DatumPlanePlanarOffset::
    DatumPlanePlanarOffset (const DatumPlanePlanarOffset& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      facePick_ (x.facePick_, f, this),
      offset_ (x.offset_, f, this)
    {
    }

    DatumPlanePlanarOffset::
    DatumPlanePlanarOffset (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      facePick_ (this),
      offset_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void DatumPlanePlanarOffset::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // facePick
        //
        if (n.name () == "facePick" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FacePickType > r (
            FacePickTraits::create (i, f, this));

          if (!facePick_.present ())
          {
            this->facePick_.set (::std::move (r));
            continue;
          }
        }

        // offset
        //
        if (n.name () == "offset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OffsetType > r (
            OffsetTraits::create (i, f, this));

          if (!offset_.present ())
          {
            this->offset_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!facePick_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "facePick",
          "");
      }

      if (!offset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "offset",
          "");
      }
    }

    DatumPlanePlanarOffset* DatumPlanePlanarOffset::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class DatumPlanePlanarOffset (*this, f, c);
    }

    DatumPlanePlanarOffset& DatumPlanePlanarOffset::
    operator= (const DatumPlanePlanarOffset& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->facePick_ = x.facePick_;
        this->offset_ = x.offset_;
      }

      return *this;
    }

    DatumPlanePlanarOffset::
    ~DatumPlanePlanarOffset ()
    {
    }

    // DatumPlanePlanarCenter
    //

    DatumPlanePlanarCenter::
    DatumPlanePlanarCenter (const FacePick1Type& facePick1,
                            const FacePick2Type& facePick2)
    : ::xml_schema::Type (),
      facePick1_ (facePick1, this),
      facePick2_ (facePick2, this)
    {
    }

    DatumPlanePlanarCenter::
    DatumPlanePlanarCenter (::std::unique_ptr< FacePick1Type > facePick1,
                            ::std::unique_ptr< FacePick2Type > facePick2)
    : ::xml_schema::Type (),
      facePick1_ (std::move (facePick1), this),
      facePick2_ (std::move (facePick2), this)
    {
    }

    DatumPlanePlanarCenter::
    DatumPlanePlanarCenter (const DatumPlanePlanarCenter& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      facePick1_ (x.facePick1_, f, this),
      facePick2_ (x.facePick2_, f, this)
    {
    }

    DatumPlanePlanarCenter::
    DatumPlanePlanarCenter (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      facePick1_ (this),
      facePick2_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void DatumPlanePlanarCenter::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // facePick1
        //
        if (n.name () == "facePick1" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FacePick1Type > r (
            FacePick1Traits::create (i, f, this));

          if (!facePick1_.present ())
          {
            this->facePick1_.set (::std::move (r));
            continue;
          }
        }

        // facePick2
        //
        if (n.name () == "facePick2" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FacePick2Type > r (
            FacePick2Traits::create (i, f, this));

          if (!facePick2_.present ())
          {
            this->facePick2_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!facePick1_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "facePick1",
          "");
      }

      if (!facePick2_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "facePick2",
          "");
      }
    }

    DatumPlanePlanarCenter* DatumPlanePlanarCenter::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class DatumPlanePlanarCenter (*this, f, c);
    }

    DatumPlanePlanarCenter& DatumPlanePlanarCenter::
    operator= (const DatumPlanePlanarCenter& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->facePick1_ = x.facePick1_;
        this->facePick2_ = x.facePick2_;
      }

      return *this;
    }

    DatumPlanePlanarCenter::
    ~DatumPlanePlanarCenter ()
    {
    }

    // DatumPlanePlanarParallelThroughEdge
    //

    DatumPlanePlanarParallelThroughEdge::
    DatumPlanePlanarParallelThroughEdge (const FacePickType& facePick,
                                         const EdgePickType& edgePick)
    : ::xml_schema::Type (),
      facePick_ (facePick, this),
      edgePick_ (edgePick, this)
    {
    }

    DatumPlanePlanarParallelThroughEdge::
    DatumPlanePlanarParallelThroughEdge (::std::unique_ptr< FacePickType > facePick,
                                         ::std::unique_ptr< EdgePickType > edgePick)
    : ::xml_schema::Type (),
      facePick_ (std::move (facePick), this),
      edgePick_ (std::move (edgePick), this)
    {
    }

    DatumPlanePlanarParallelThroughEdge::
    DatumPlanePlanarParallelThroughEdge (const DatumPlanePlanarParallelThroughEdge& x,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      facePick_ (x.facePick_, f, this),
      edgePick_ (x.edgePick_, f, this)
    {
    }

    DatumPlanePlanarParallelThroughEdge::
    DatumPlanePlanarParallelThroughEdge (const ::xercesc::DOMElement& e,
                                         ::xml_schema::Flags f,
                                         ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      facePick_ (this),
      edgePick_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void DatumPlanePlanarParallelThroughEdge::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // facePick
        //
        if (n.name () == "facePick" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FacePickType > r (
            FacePickTraits::create (i, f, this));

          if (!facePick_.present ())
          {
            this->facePick_.set (::std::move (r));
            continue;
          }
        }

        // edgePick
        //
        if (n.name () == "edgePick" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EdgePickType > r (
            EdgePickTraits::create (i, f, this));

          if (!edgePick_.present ())
          {
            this->edgePick_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!facePick_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "facePick",
          "");
      }

      if (!edgePick_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "edgePick",
          "");
      }
    }

    DatumPlanePlanarParallelThroughEdge* DatumPlanePlanarParallelThroughEdge::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class DatumPlanePlanarParallelThroughEdge (*this, f, c);
    }

    DatumPlanePlanarParallelThroughEdge& DatumPlanePlanarParallelThroughEdge::
    operator= (const DatumPlanePlanarParallelThroughEdge& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->facePick_ = x.facePick_;
        this->edgePick_ = x.edgePick_;
      }

      return *this;
    }

    DatumPlanePlanarParallelThroughEdge::
    ~DatumPlanePlanarParallelThroughEdge ()
    {
    }

    // SolverChoice
    //

    SolverChoice::
    SolverChoice ()
    : ::xml_schema::Type (),
      offset_ (this),
      center_ (this),
      parallelThroughEdge_ (this)
    {
    }

    SolverChoice::
    SolverChoice (const SolverChoice& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      offset_ (x.offset_, f, this),
      center_ (x.center_, f, this),
      parallelThroughEdge_ (x.parallelThroughEdge_, f, this)
    {
    }

    SolverChoice::
    SolverChoice (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      offset_ (this),
      center_ (this),
      parallelThroughEdge_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void SolverChoice::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // offset
        //
        if (n.name () == "offset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OffsetType > r (
            OffsetTraits::create (i, f, this));

          if (!this->offset_)
          {
            this->offset_.set (::std::move (r));
            continue;
          }
        }

        // center
        //
        if (n.name () == "center" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CenterType > r (
            CenterTraits::create (i, f, this));

          if (!this->center_)
          {
            this->center_.set (::std::move (r));
            continue;
          }
        }

        // parallelThroughEdge
        //
        if (n.name () == "parallelThroughEdge" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParallelThroughEdgeType > r (
            ParallelThroughEdgeTraits::create (i, f, this));

          if (!this->parallelThroughEdge_)
          {
            this->parallelThroughEdge_.set (::std::move (r));
            continue;
          }
        }

        break;
      }
    }

    SolverChoice* SolverChoice::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class SolverChoice (*this, f, c);
    }

    SolverChoice& SolverChoice::
    operator= (const SolverChoice& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->offset_ = x.offset_;
        this->center_ = x.center_;
        this->parallelThroughEdge_ = x.parallelThroughEdge_;
      }

      return *this;
    }

    SolverChoice::
    ~SolverChoice ()
    {
    }

    // FeatureDatumPlane
    //

    FeatureDatumPlane::
    FeatureDatumPlane (const FeatureBaseType& featureBase,
                       const RadiusType& radius,
                       const AutoSizeType& autoSize,
                       const MatrixType& matrix,
                       const SolverChoiceType& solverChoice)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      radius_ (radius, this),
      autoSize_ (autoSize, this),
      matrix_ (matrix, this),
      solverChoice_ (solverChoice, this)
    {
    }

    FeatureDatumPlane::
    FeatureDatumPlane (::std::unique_ptr< FeatureBaseType > featureBase,
                       ::std::unique_ptr< RadiusType > radius,
                       ::std::unique_ptr< AutoSizeType > autoSize,
                       ::std::unique_ptr< MatrixType > matrix,
                       ::std::unique_ptr< SolverChoiceType > solverChoice)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      radius_ (std::move (radius), this),
      autoSize_ (std::move (autoSize), this),
      matrix_ (std::move (matrix), this),
      solverChoice_ (std::move (solverChoice), this)
    {
    }

    FeatureDatumPlane::
    FeatureDatumPlane (const FeatureDatumPlane& x,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      radius_ (x.radius_, f, this),
      autoSize_ (x.autoSize_, f, this),
      matrix_ (x.matrix_, f, this),
      solverChoice_ (x.solverChoice_, f, this)
    {
    }

    FeatureDatumPlane::
    FeatureDatumPlane (const ::xercesc::DOMElement& e,
                       ::xml_schema::Flags f,
                       ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      radius_ (this),
      autoSize_ (this),
      matrix_ (this),
      solverChoice_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureDatumPlane::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // radius
        //
        if (n.name () == "radius" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< RadiusType > r (
            RadiusTraits::create (i, f, this));

          if (!radius_.present ())
          {
            this->radius_.set (::std::move (r));
            continue;
          }
        }

        // autoSize
        //
        if (n.name () == "autoSize" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AutoSizeType > r (
            AutoSizeTraits::create (i, f, this));

          if (!autoSize_.present ())
          {
            this->autoSize_.set (::std::move (r));
            continue;
          }
        }

        // matrix
        //
        if (n.name () == "matrix" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< MatrixType > r (
            MatrixTraits::create (i, f, this));

          if (!matrix_.present ())
          {
            this->matrix_.set (::std::move (r));
            continue;
          }
        }

        // solverChoice
        //
        if (n.name () == "solverChoice" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SolverChoiceType > r (
            SolverChoiceTraits::create (i, f, this));

          if (!solverChoice_.present ())
          {
            this->solverChoice_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!radius_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "radius",
          "");
      }

      if (!autoSize_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "autoSize",
          "");
      }

      if (!matrix_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "matrix",
          "");
      }

      if (!solverChoice_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "solverChoice",
          "");
      }
    }

    FeatureDatumPlane* FeatureDatumPlane::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureDatumPlane (*this, f, c);
    }

    FeatureDatumPlane& FeatureDatumPlane::
    operator= (const FeatureDatumPlane& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->radius_ = x.radius_;
        this->autoSize_ = x.autoSize_;
        this->matrix_ = x.matrix_;
        this->solverChoice_ = x.solverChoice_;
      }

      return *this;
    }

    FeatureDatumPlane::
    ~FeatureDatumPlane ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (const ::std::string& u,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (const ::std::string& u,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (const ::std::string& u,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::datumPlane (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::datumPlane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::datumPlane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::datumPlane (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                const ::std::string& sid,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::datumPlane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::std::istream& is,
                const ::std::string& sid,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::datumPlane (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::xercesc::InputSource& i,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::xercesc::InputSource& i,
                ::xml_schema::ErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::xercesc::InputSource& i,
                ::xercesc::DOMErrorHandler& h,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
        ::prj::srl::datumPlane (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (const ::xercesc::DOMDocument& doc,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > (
          ::prj::srl::datumPlane (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "datumPlane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureDatumPlane, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "datumPlane",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureDatumPlane >
    datumPlane (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                ::xml_schema::Flags f,
                const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "datumPlane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureDatumPlane > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureDatumPlane, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "datumPlane",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const DatumPlanePlanarOffset& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // facePick
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "facePick",
            e));

        s << i.facePick ();
      }

      // offset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "offset",
            e));

        s << i.offset ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DatumPlanePlanarCenter& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // facePick1
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "facePick1",
            e));

        s << i.facePick1 ();
      }

      // facePick2
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "facePick2",
            e));

        s << i.facePick2 ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const DatumPlanePlanarParallelThroughEdge& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // facePick
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "facePick",
            e));

        s << i.facePick ();
      }

      // edgePick
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "edgePick",
            e));

        s << i.edgePick ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const SolverChoice& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // offset
      //
      if (i.offset ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "offset",
            e));

        s << *i.offset ();
      }

      // center
      //
      if (i.center ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "center",
            e));

        s << *i.center ();
      }

      // parallelThroughEdge
      //
      if (i.parallelThroughEdge ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parallelThroughEdge",
            e));

        s << *i.parallelThroughEdge ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureDatumPlane& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // radius
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "radius",
            e));

        s << i.radius ();
      }

      // autoSize
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "autoSize",
            e));

        s << i.autoSize ();
      }

      // matrix
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "matrix",
            e));

        s << i.matrix ();
      }

      // solverChoice
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "solverChoice",
            e));

        s << i.solverChoice ();
      }
    }

    void
    datumPlane (::std::ostream& o,
                const ::prj::srl::FeatureDatumPlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    datumPlane (::std::ostream& o,
                const ::prj::srl::FeatureDatumPlane& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    datumPlane (::std::ostream& o,
                const ::prj::srl::FeatureDatumPlane& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    datumPlane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureDatumPlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    datumPlane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureDatumPlane& s,
                ::xml_schema::ErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    datumPlane (::xercesc::XMLFormatTarget& t,
                const ::prj::srl::FeatureDatumPlane& s,
                ::xercesc::DOMErrorHandler& h,
                const ::xml_schema::NamespaceInfomap& m,
                const ::std::string& e,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::datumPlane (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    datumPlane (::xercesc::DOMDocument& d,
                const ::prj::srl::FeatureDatumPlane& s,
                ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "datumPlane" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "datumPlane",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    datumPlane (const ::prj::srl::FeatureDatumPlane& s,
                const ::xml_schema::NamespaceInfomap& m,
                ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "datumPlane",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::datumPlane (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


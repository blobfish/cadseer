// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featureextract.h"

namespace prj
{
  namespace srl
  {
    // AccruePick
    // 

    const AccruePick::PicksType& AccruePick::
    picks () const
    {
      return this->picks_.get ();
    }

    AccruePick::PicksType& AccruePick::
    picks ()
    {
      return this->picks_.get ();
    }

    void AccruePick::
    picks (const PicksType& x)
    {
      this->picks_.set (x);
    }

    void AccruePick::
    picks (::std::unique_ptr< PicksType > x)
    {
      this->picks_.set (std::move (x));
    }

    const AccruePick::AccrueTypeType& AccruePick::
    accrueType () const
    {
      return this->accrueType_.get ();
    }

    AccruePick::AccrueTypeType& AccruePick::
    accrueType ()
    {
      return this->accrueType_.get ();
    }

    void AccruePick::
    accrueType (const AccrueTypeType& x)
    {
      this->accrueType_.set (x);
    }

    void AccruePick::
    accrueType (::std::unique_ptr< AccrueTypeType > x)
    {
      this->accrueType_.set (std::move (x));
    }

    const AccruePick::ParameterType& AccruePick::
    parameter () const
    {
      return this->parameter_.get ();
    }

    AccruePick::ParameterType& AccruePick::
    parameter ()
    {
      return this->parameter_.get ();
    }

    void AccruePick::
    parameter (const ParameterType& x)
    {
      this->parameter_.set (x);
    }

    void AccruePick::
    parameter (::std::unique_ptr< ParameterType > x)
    {
      this->parameter_.set (std::move (x));
    }

    const AccruePick::PlabelType& AccruePick::
    plabel () const
    {
      return this->plabel_.get ();
    }

    AccruePick::PlabelType& AccruePick::
    plabel ()
    {
      return this->plabel_.get ();
    }

    void AccruePick::
    plabel (const PlabelType& x)
    {
      this->plabel_.set (x);
    }

    void AccruePick::
    plabel (::std::unique_ptr< PlabelType > x)
    {
      this->plabel_.set (std::move (x));
    }


    // AccruePicks
    // 

    const AccruePicks::ArraySequence& AccruePicks::
    array () const
    {
      return this->array_;
    }

    AccruePicks::ArraySequence& AccruePicks::
    array ()
    {
      return this->array_;
    }

    void AccruePicks::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // FeatureExtract
    // 

    const FeatureExtract::FeatureBaseType& FeatureExtract::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureExtract::FeatureBaseType& FeatureExtract::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureExtract::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureExtract::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureExtract::AccruePicksType& FeatureExtract::
    accruePicks () const
    {
      return this->accruePicks_.get ();
    }

    FeatureExtract::AccruePicksType& FeatureExtract::
    accruePicks ()
    {
      return this->accruePicks_.get ();
    }

    void FeatureExtract::
    accruePicks (const AccruePicksType& x)
    {
      this->accruePicks_.set (x);
    }

    void FeatureExtract::
    accruePicks (::std::unique_ptr< AccruePicksType > x)
    {
      this->accruePicks_.set (std::move (x));
    }

    const FeatureExtract::PicksType& FeatureExtract::
    picks () const
    {
      return this->picks_.get ();
    }

    FeatureExtract::PicksType& FeatureExtract::
    picks ()
    {
      return this->picks_.get ();
    }

    void FeatureExtract::
    picks (const PicksType& x)
    {
      this->picks_.set (x);
    }

    void FeatureExtract::
    picks (::std::unique_ptr< PicksType > x)
    {
      this->picks_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // AccruePick
    //

    AccruePick::
    AccruePick (const PicksType& picks,
                const AccrueTypeType& accrueType,
                const ParameterType& parameter,
                const PlabelType& plabel)
    : ::xml_schema::Type (),
      picks_ (picks, this),
      accrueType_ (accrueType, this),
      parameter_ (parameter, this),
      plabel_ (plabel, this)
    {
    }

    AccruePick::
    AccruePick (::std::unique_ptr< PicksType > picks,
                const AccrueTypeType& accrueType,
                ::std::unique_ptr< ParameterType > parameter,
                ::std::unique_ptr< PlabelType > plabel)
    : ::xml_schema::Type (),
      picks_ (std::move (picks), this),
      accrueType_ (accrueType, this),
      parameter_ (std::move (parameter), this),
      plabel_ (std::move (plabel), this)
    {
    }

    AccruePick::
    AccruePick (const AccruePick& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      picks_ (x.picks_, f, this),
      accrueType_ (x.accrueType_, f, this),
      parameter_ (x.parameter_, f, this),
      plabel_ (x.plabel_, f, this)
    {
    }

    AccruePick::
    AccruePick (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      picks_ (this),
      accrueType_ (this),
      parameter_ (this),
      plabel_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void AccruePick::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // picks
        //
        if (n.name () == "picks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PicksType > r (
            PicksTraits::create (i, f, this));

          if (!picks_.present ())
          {
            this->picks_.set (::std::move (r));
            continue;
          }
        }

        // accrueType
        //
        if (n.name () == "accrueType" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AccrueTypeType > r (
            AccrueTypeTraits::create (i, f, this));

          if (!accrueType_.present ())
          {
            this->accrueType_.set (::std::move (r));
            continue;
          }
        }

        // parameter
        //
        if (n.name () == "parameter" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParameterType > r (
            ParameterTraits::create (i, f, this));

          if (!parameter_.present ())
          {
            this->parameter_.set (::std::move (r));
            continue;
          }
        }

        // plabel
        //
        if (n.name () == "plabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PlabelType > r (
            PlabelTraits::create (i, f, this));

          if (!plabel_.present ())
          {
            this->plabel_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!picks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "picks",
          "");
      }

      if (!accrueType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "accrueType",
          "");
      }

      if (!parameter_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parameter",
          "");
      }

      if (!plabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "plabel",
          "");
      }
    }

    AccruePick* AccruePick::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AccruePick (*this, f, c);
    }

    AccruePick& AccruePick::
    operator= (const AccruePick& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->picks_ = x.picks_;
        this->accrueType_ = x.accrueType_;
        this->parameter_ = x.parameter_;
        this->plabel_ = x.plabel_;
      }

      return *this;
    }

    AccruePick::
    ~AccruePick ()
    {
    }

    // AccruePicks
    //

    AccruePicks::
    AccruePicks ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    AccruePicks::
    AccruePicks (const AccruePicks& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    AccruePicks::
    AccruePicks (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void AccruePicks::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    AccruePicks* AccruePicks::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AccruePicks (*this, f, c);
    }

    AccruePicks& AccruePicks::
    operator= (const AccruePicks& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    AccruePicks::
    ~AccruePicks ()
    {
    }

    // FeatureExtract
    //

    FeatureExtract::
    FeatureExtract (const FeatureBaseType& featureBase,
                    const AccruePicksType& accruePicks,
                    const PicksType& picks)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      accruePicks_ (accruePicks, this),
      picks_ (picks, this)
    {
    }

    FeatureExtract::
    FeatureExtract (::std::unique_ptr< FeatureBaseType > featureBase,
                    ::std::unique_ptr< AccruePicksType > accruePicks,
                    ::std::unique_ptr< PicksType > picks)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      accruePicks_ (std::move (accruePicks), this),
      picks_ (std::move (picks), this)
    {
    }

    FeatureExtract::
    FeatureExtract (const FeatureExtract& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      accruePicks_ (x.accruePicks_, f, this),
      picks_ (x.picks_, f, this)
    {
    }

    FeatureExtract::
    FeatureExtract (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      accruePicks_ (this),
      picks_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureExtract::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // accruePicks
        //
        if (n.name () == "accruePicks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AccruePicksType > r (
            AccruePicksTraits::create (i, f, this));

          if (!accruePicks_.present ())
          {
            this->accruePicks_.set (::std::move (r));
            continue;
          }
        }

        // picks
        //
        if (n.name () == "picks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PicksType > r (
            PicksTraits::create (i, f, this));

          if (!picks_.present ())
          {
            this->picks_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!accruePicks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "accruePicks",
          "");
      }

      if (!picks_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "picks",
          "");
      }
    }

    FeatureExtract* FeatureExtract::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureExtract (*this, f, c);
    }

    FeatureExtract& FeatureExtract::
    operator= (const FeatureExtract& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->accruePicks_ = x.accruePicks_;
        this->picks_ = x.picks_;
      }

      return *this;
    }

    FeatureExtract::
    ~FeatureExtract ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extract (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extract (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::extract (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extract (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extract (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::extract (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
        ::prj::srl::extract (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureExtract > (
          ::prj::srl::extract (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "extract" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureExtract > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureExtract, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "extract",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureExtract >
    extract (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "extract" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureExtract > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureExtract, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "extract",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const AccruePick& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // picks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "picks",
            e));

        s << i.picks ();
      }

      // accrueType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "accrueType",
            e));

        s << i.accrueType ();
      }

      // parameter
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parameter",
            e));

        s << i.parameter ();
      }

      // plabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "plabel",
            e));

        s << i.plabel ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const AccruePicks& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (AccruePicks::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureExtract& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // accruePicks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "accruePicks",
            e));

        s << i.accruePicks ();
      }

      // picks
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "picks",
            e));

        s << i.picks ();
      }
    }

    void
    extract (::std::ostream& o,
             const ::prj::srl::FeatureExtract& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    extract (::std::ostream& o,
             const ::prj::srl::FeatureExtract& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extract (::std::ostream& o,
             const ::prj::srl::FeatureExtract& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extract (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtract& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    extract (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtract& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extract (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureExtract& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::extract (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    extract (::xercesc::DOMDocument& d,
             const ::prj::srl::FeatureExtract& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "extract" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "extract",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    extract (const ::prj::srl::FeatureExtract& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "extract",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::extract (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


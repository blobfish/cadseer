// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featureinstancelinear.h"

namespace prj
{
  namespace srl
  {
    // FeatureInstanceLinear
    // 

    const FeatureInstanceLinear::FeatureBaseType& FeatureInstanceLinear::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureInstanceLinear::FeatureBaseType& FeatureInstanceLinear::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureInstanceLinear::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureInstanceLinear::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureInstanceLinear::InstanceMapperType& FeatureInstanceLinear::
    instanceMapper () const
    {
      return this->instanceMapper_.get ();
    }

    FeatureInstanceLinear::InstanceMapperType& FeatureInstanceLinear::
    instanceMapper ()
    {
      return this->instanceMapper_.get ();
    }

    void FeatureInstanceLinear::
    instanceMapper (const InstanceMapperType& x)
    {
      this->instanceMapper_.set (x);
    }

    void FeatureInstanceLinear::
    instanceMapper (::std::unique_ptr< InstanceMapperType > x)
    {
      this->instanceMapper_.set (std::move (x));
    }

    const FeatureInstanceLinear::CsysDraggerType& FeatureInstanceLinear::
    csysDragger () const
    {
      return this->csysDragger_.get ();
    }

    FeatureInstanceLinear::CsysDraggerType& FeatureInstanceLinear::
    csysDragger ()
    {
      return this->csysDragger_.get ();
    }

    void FeatureInstanceLinear::
    csysDragger (const CsysDraggerType& x)
    {
      this->csysDragger_.set (x);
    }

    void FeatureInstanceLinear::
    csysDragger (::std::unique_ptr< CsysDraggerType > x)
    {
      this->csysDragger_.set (std::move (x));
    }

    const FeatureInstanceLinear::XOffsetType& FeatureInstanceLinear::
    xOffset () const
    {
      return this->xOffset_.get ();
    }

    FeatureInstanceLinear::XOffsetType& FeatureInstanceLinear::
    xOffset ()
    {
      return this->xOffset_.get ();
    }

    void FeatureInstanceLinear::
    xOffset (const XOffsetType& x)
    {
      this->xOffset_.set (x);
    }

    void FeatureInstanceLinear::
    xOffset (::std::unique_ptr< XOffsetType > x)
    {
      this->xOffset_.set (std::move (x));
    }

    const FeatureInstanceLinear::YOffsetType& FeatureInstanceLinear::
    yOffset () const
    {
      return this->yOffset_.get ();
    }

    FeatureInstanceLinear::YOffsetType& FeatureInstanceLinear::
    yOffset ()
    {
      return this->yOffset_.get ();
    }

    void FeatureInstanceLinear::
    yOffset (const YOffsetType& x)
    {
      this->yOffset_.set (x);
    }

    void FeatureInstanceLinear::
    yOffset (::std::unique_ptr< YOffsetType > x)
    {
      this->yOffset_.set (std::move (x));
    }

    const FeatureInstanceLinear::ZOffsetType& FeatureInstanceLinear::
    zOffset () const
    {
      return this->zOffset_.get ();
    }

    FeatureInstanceLinear::ZOffsetType& FeatureInstanceLinear::
    zOffset ()
    {
      return this->zOffset_.get ();
    }

    void FeatureInstanceLinear::
    zOffset (const ZOffsetType& x)
    {
      this->zOffset_.set (x);
    }

    void FeatureInstanceLinear::
    zOffset (::std::unique_ptr< ZOffsetType > x)
    {
      this->zOffset_.set (std::move (x));
    }

    const FeatureInstanceLinear::XCountType& FeatureInstanceLinear::
    xCount () const
    {
      return this->xCount_.get ();
    }

    FeatureInstanceLinear::XCountType& FeatureInstanceLinear::
    xCount ()
    {
      return this->xCount_.get ();
    }

    void FeatureInstanceLinear::
    xCount (const XCountType& x)
    {
      this->xCount_.set (x);
    }

    void FeatureInstanceLinear::
    xCount (::std::unique_ptr< XCountType > x)
    {
      this->xCount_.set (std::move (x));
    }

    const FeatureInstanceLinear::YCountType& FeatureInstanceLinear::
    yCount () const
    {
      return this->yCount_.get ();
    }

    FeatureInstanceLinear::YCountType& FeatureInstanceLinear::
    yCount ()
    {
      return this->yCount_.get ();
    }

    void FeatureInstanceLinear::
    yCount (const YCountType& x)
    {
      this->yCount_.set (x);
    }

    void FeatureInstanceLinear::
    yCount (::std::unique_ptr< YCountType > x)
    {
      this->yCount_.set (std::move (x));
    }

    const FeatureInstanceLinear::ZCountType& FeatureInstanceLinear::
    zCount () const
    {
      return this->zCount_.get ();
    }

    FeatureInstanceLinear::ZCountType& FeatureInstanceLinear::
    zCount ()
    {
      return this->zCount_.get ();
    }

    void FeatureInstanceLinear::
    zCount (const ZCountType& x)
    {
      this->zCount_.set (x);
    }

    void FeatureInstanceLinear::
    zCount (::std::unique_ptr< ZCountType > x)
    {
      this->zCount_.set (std::move (x));
    }

    const FeatureInstanceLinear::CsysType& FeatureInstanceLinear::
    csys () const
    {
      return this->csys_.get ();
    }

    FeatureInstanceLinear::CsysType& FeatureInstanceLinear::
    csys ()
    {
      return this->csys_.get ();
    }

    void FeatureInstanceLinear::
    csys (const CsysType& x)
    {
      this->csys_.set (x);
    }

    void FeatureInstanceLinear::
    csys (::std::unique_ptr< CsysType > x)
    {
      this->csys_.set (std::move (x));
    }

    const FeatureInstanceLinear::IncludeSourceType& FeatureInstanceLinear::
    includeSource () const
    {
      return this->includeSource_.get ();
    }

    FeatureInstanceLinear::IncludeSourceType& FeatureInstanceLinear::
    includeSource ()
    {
      return this->includeSource_.get ();
    }

    void FeatureInstanceLinear::
    includeSource (const IncludeSourceType& x)
    {
      this->includeSource_.set (x);
    }

    void FeatureInstanceLinear::
    includeSource (::std::unique_ptr< IncludeSourceType > x)
    {
      this->includeSource_.set (std::move (x));
    }

    const FeatureInstanceLinear::PickType& FeatureInstanceLinear::
    pick () const
    {
      return this->pick_.get ();
    }

    FeatureInstanceLinear::PickType& FeatureInstanceLinear::
    pick ()
    {
      return this->pick_.get ();
    }

    void FeatureInstanceLinear::
    pick (const PickType& x)
    {
      this->pick_.set (x);
    }

    void FeatureInstanceLinear::
    pick (::std::unique_ptr< PickType > x)
    {
      this->pick_.set (std::move (x));
    }

    const FeatureInstanceLinear::XOffsetLabelType& FeatureInstanceLinear::
    xOffsetLabel () const
    {
      return this->xOffsetLabel_.get ();
    }

    FeatureInstanceLinear::XOffsetLabelType& FeatureInstanceLinear::
    xOffsetLabel ()
    {
      return this->xOffsetLabel_.get ();
    }

    void FeatureInstanceLinear::
    xOffsetLabel (const XOffsetLabelType& x)
    {
      this->xOffsetLabel_.set (x);
    }

    void FeatureInstanceLinear::
    xOffsetLabel (::std::unique_ptr< XOffsetLabelType > x)
    {
      this->xOffsetLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::YOffsetLabelType& FeatureInstanceLinear::
    yOffsetLabel () const
    {
      return this->yOffsetLabel_.get ();
    }

    FeatureInstanceLinear::YOffsetLabelType& FeatureInstanceLinear::
    yOffsetLabel ()
    {
      return this->yOffsetLabel_.get ();
    }

    void FeatureInstanceLinear::
    yOffsetLabel (const YOffsetLabelType& x)
    {
      this->yOffsetLabel_.set (x);
    }

    void FeatureInstanceLinear::
    yOffsetLabel (::std::unique_ptr< YOffsetLabelType > x)
    {
      this->yOffsetLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::ZOffsetLabelType& FeatureInstanceLinear::
    zOffsetLabel () const
    {
      return this->zOffsetLabel_.get ();
    }

    FeatureInstanceLinear::ZOffsetLabelType& FeatureInstanceLinear::
    zOffsetLabel ()
    {
      return this->zOffsetLabel_.get ();
    }

    void FeatureInstanceLinear::
    zOffsetLabel (const ZOffsetLabelType& x)
    {
      this->zOffsetLabel_.set (x);
    }

    void FeatureInstanceLinear::
    zOffsetLabel (::std::unique_ptr< ZOffsetLabelType > x)
    {
      this->zOffsetLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::XCountLabelType& FeatureInstanceLinear::
    xCountLabel () const
    {
      return this->xCountLabel_.get ();
    }

    FeatureInstanceLinear::XCountLabelType& FeatureInstanceLinear::
    xCountLabel ()
    {
      return this->xCountLabel_.get ();
    }

    void FeatureInstanceLinear::
    xCountLabel (const XCountLabelType& x)
    {
      this->xCountLabel_.set (x);
    }

    void FeatureInstanceLinear::
    xCountLabel (::std::unique_ptr< XCountLabelType > x)
    {
      this->xCountLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::YCountLabelType& FeatureInstanceLinear::
    yCountLabel () const
    {
      return this->yCountLabel_.get ();
    }

    FeatureInstanceLinear::YCountLabelType& FeatureInstanceLinear::
    yCountLabel ()
    {
      return this->yCountLabel_.get ();
    }

    void FeatureInstanceLinear::
    yCountLabel (const YCountLabelType& x)
    {
      this->yCountLabel_.set (x);
    }

    void FeatureInstanceLinear::
    yCountLabel (::std::unique_ptr< YCountLabelType > x)
    {
      this->yCountLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::ZCountLabelType& FeatureInstanceLinear::
    zCountLabel () const
    {
      return this->zCountLabel_.get ();
    }

    FeatureInstanceLinear::ZCountLabelType& FeatureInstanceLinear::
    zCountLabel ()
    {
      return this->zCountLabel_.get ();
    }

    void FeatureInstanceLinear::
    zCountLabel (const ZCountLabelType& x)
    {
      this->zCountLabel_.set (x);
    }

    void FeatureInstanceLinear::
    zCountLabel (::std::unique_ptr< ZCountLabelType > x)
    {
      this->zCountLabel_.set (std::move (x));
    }

    const FeatureInstanceLinear::IncludeSourceLabelType& FeatureInstanceLinear::
    includeSourceLabel () const
    {
      return this->includeSourceLabel_.get ();
    }

    FeatureInstanceLinear::IncludeSourceLabelType& FeatureInstanceLinear::
    includeSourceLabel ()
    {
      return this->includeSourceLabel_.get ();
    }

    void FeatureInstanceLinear::
    includeSourceLabel (const IncludeSourceLabelType& x)
    {
      this->includeSourceLabel_.set (x);
    }

    void FeatureInstanceLinear::
    includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > x)
    {
      this->includeSourceLabel_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureInstanceLinear
    //

    FeatureInstanceLinear::
    FeatureInstanceLinear (const FeatureBaseType& featureBase,
                           const InstanceMapperType& instanceMapper,
                           const CsysDraggerType& csysDragger,
                           const XOffsetType& xOffset,
                           const YOffsetType& yOffset,
                           const ZOffsetType& zOffset,
                           const XCountType& xCount,
                           const YCountType& yCount,
                           const ZCountType& zCount,
                           const CsysType& csys,
                           const IncludeSourceType& includeSource,
                           const PickType& pick,
                           const XOffsetLabelType& xOffsetLabel,
                           const YOffsetLabelType& yOffsetLabel,
                           const ZOffsetLabelType& zOffsetLabel,
                           const XCountLabelType& xCountLabel,
                           const YCountLabelType& yCountLabel,
                           const ZCountLabelType& zCountLabel,
                           const IncludeSourceLabelType& includeSourceLabel)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      instanceMapper_ (instanceMapper, this),
      csysDragger_ (csysDragger, this),
      xOffset_ (xOffset, this),
      yOffset_ (yOffset, this),
      zOffset_ (zOffset, this),
      xCount_ (xCount, this),
      yCount_ (yCount, this),
      zCount_ (zCount, this),
      csys_ (csys, this),
      includeSource_ (includeSource, this),
      pick_ (pick, this),
      xOffsetLabel_ (xOffsetLabel, this),
      yOffsetLabel_ (yOffsetLabel, this),
      zOffsetLabel_ (zOffsetLabel, this),
      xCountLabel_ (xCountLabel, this),
      yCountLabel_ (yCountLabel, this),
      zCountLabel_ (zCountLabel, this),
      includeSourceLabel_ (includeSourceLabel, this)
    {
    }

    FeatureInstanceLinear::
    FeatureInstanceLinear (::std::unique_ptr< FeatureBaseType > featureBase,
                           ::std::unique_ptr< InstanceMapperType > instanceMapper,
                           ::std::unique_ptr< CsysDraggerType > csysDragger,
                           ::std::unique_ptr< XOffsetType > xOffset,
                           ::std::unique_ptr< YOffsetType > yOffset,
                           ::std::unique_ptr< ZOffsetType > zOffset,
                           ::std::unique_ptr< XCountType > xCount,
                           ::std::unique_ptr< YCountType > yCount,
                           ::std::unique_ptr< ZCountType > zCount,
                           ::std::unique_ptr< CsysType > csys,
                           ::std::unique_ptr< IncludeSourceType > includeSource,
                           ::std::unique_ptr< PickType > pick,
                           ::std::unique_ptr< XOffsetLabelType > xOffsetLabel,
                           ::std::unique_ptr< YOffsetLabelType > yOffsetLabel,
                           ::std::unique_ptr< ZOffsetLabelType > zOffsetLabel,
                           ::std::unique_ptr< XCountLabelType > xCountLabel,
                           ::std::unique_ptr< YCountLabelType > yCountLabel,
                           ::std::unique_ptr< ZCountLabelType > zCountLabel,
                           ::std::unique_ptr< IncludeSourceLabelType > includeSourceLabel)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      instanceMapper_ (std::move (instanceMapper), this),
      csysDragger_ (std::move (csysDragger), this),
      xOffset_ (std::move (xOffset), this),
      yOffset_ (std::move (yOffset), this),
      zOffset_ (std::move (zOffset), this),
      xCount_ (std::move (xCount), this),
      yCount_ (std::move (yCount), this),
      zCount_ (std::move (zCount), this),
      csys_ (std::move (csys), this),
      includeSource_ (std::move (includeSource), this),
      pick_ (std::move (pick), this),
      xOffsetLabel_ (std::move (xOffsetLabel), this),
      yOffsetLabel_ (std::move (yOffsetLabel), this),
      zOffsetLabel_ (std::move (zOffsetLabel), this),
      xCountLabel_ (std::move (xCountLabel), this),
      yCountLabel_ (std::move (yCountLabel), this),
      zCountLabel_ (std::move (zCountLabel), this),
      includeSourceLabel_ (std::move (includeSourceLabel), this)
    {
    }

    FeatureInstanceLinear::
    FeatureInstanceLinear (const FeatureInstanceLinear& x,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      instanceMapper_ (x.instanceMapper_, f, this),
      csysDragger_ (x.csysDragger_, f, this),
      xOffset_ (x.xOffset_, f, this),
      yOffset_ (x.yOffset_, f, this),
      zOffset_ (x.zOffset_, f, this),
      xCount_ (x.xCount_, f, this),
      yCount_ (x.yCount_, f, this),
      zCount_ (x.zCount_, f, this),
      csys_ (x.csys_, f, this),
      includeSource_ (x.includeSource_, f, this),
      pick_ (x.pick_, f, this),
      xOffsetLabel_ (x.xOffsetLabel_, f, this),
      yOffsetLabel_ (x.yOffsetLabel_, f, this),
      zOffsetLabel_ (x.zOffsetLabel_, f, this),
      xCountLabel_ (x.xCountLabel_, f, this),
      yCountLabel_ (x.yCountLabel_, f, this),
      zCountLabel_ (x.zCountLabel_, f, this),
      includeSourceLabel_ (x.includeSourceLabel_, f, this)
    {
    }

    FeatureInstanceLinear::
    FeatureInstanceLinear (const ::xercesc::DOMElement& e,
                           ::xml_schema::Flags f,
                           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      instanceMapper_ (this),
      csysDragger_ (this),
      xOffset_ (this),
      yOffset_ (this),
      zOffset_ (this),
      xCount_ (this),
      yCount_ (this),
      zCount_ (this),
      csys_ (this),
      includeSource_ (this),
      pick_ (this),
      xOffsetLabel_ (this),
      yOffsetLabel_ (this),
      zOffsetLabel_ (this),
      xCountLabel_ (this),
      yCountLabel_ (this),
      zCountLabel_ (this),
      includeSourceLabel_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureInstanceLinear::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // instanceMapper
        //
        if (n.name () == "instanceMapper" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< InstanceMapperType > r (
            InstanceMapperTraits::create (i, f, this));

          if (!instanceMapper_.present ())
          {
            this->instanceMapper_.set (::std::move (r));
            continue;
          }
        }

        // csysDragger
        //
        if (n.name () == "csysDragger" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysDraggerType > r (
            CsysDraggerTraits::create (i, f, this));

          if (!csysDragger_.present ())
          {
            this->csysDragger_.set (::std::move (r));
            continue;
          }
        }

        // xOffset
        //
        if (n.name () == "xOffset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< XOffsetType > r (
            XOffsetTraits::create (i, f, this));

          if (!xOffset_.present ())
          {
            this->xOffset_.set (::std::move (r));
            continue;
          }
        }

        // yOffset
        //
        if (n.name () == "yOffset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< YOffsetType > r (
            YOffsetTraits::create (i, f, this));

          if (!yOffset_.present ())
          {
            this->yOffset_.set (::std::move (r));
            continue;
          }
        }

        // zOffset
        //
        if (n.name () == "zOffset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ZOffsetType > r (
            ZOffsetTraits::create (i, f, this));

          if (!zOffset_.present ())
          {
            this->zOffset_.set (::std::move (r));
            continue;
          }
        }

        // xCount
        //
        if (n.name () == "xCount" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< XCountType > r (
            XCountTraits::create (i, f, this));

          if (!xCount_.present ())
          {
            this->xCount_.set (::std::move (r));
            continue;
          }
        }

        // yCount
        //
        if (n.name () == "yCount" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< YCountType > r (
            YCountTraits::create (i, f, this));

          if (!yCount_.present ())
          {
            this->yCount_.set (::std::move (r));
            continue;
          }
        }

        // zCount
        //
        if (n.name () == "zCount" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ZCountType > r (
            ZCountTraits::create (i, f, this));

          if (!zCount_.present ())
          {
            this->zCount_.set (::std::move (r));
            continue;
          }
        }

        // csys
        //
        if (n.name () == "csys" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysType > r (
            CsysTraits::create (i, f, this));

          if (!csys_.present ())
          {
            this->csys_.set (::std::move (r));
            continue;
          }
        }

        // includeSource
        //
        if (n.name () == "includeSource" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IncludeSourceType > r (
            IncludeSourceTraits::create (i, f, this));

          if (!includeSource_.present ())
          {
            this->includeSource_.set (::std::move (r));
            continue;
          }
        }

        // pick
        //
        if (n.name () == "pick" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PickType > r (
            PickTraits::create (i, f, this));

          if (!pick_.present ())
          {
            this->pick_.set (::std::move (r));
            continue;
          }
        }

        // xOffsetLabel
        //
        if (n.name () == "xOffsetLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< XOffsetLabelType > r (
            XOffsetLabelTraits::create (i, f, this));

          if (!xOffsetLabel_.present ())
          {
            this->xOffsetLabel_.set (::std::move (r));
            continue;
          }
        }

        // yOffsetLabel
        //
        if (n.name () == "yOffsetLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< YOffsetLabelType > r (
            YOffsetLabelTraits::create (i, f, this));

          if (!yOffsetLabel_.present ())
          {
            this->yOffsetLabel_.set (::std::move (r));
            continue;
          }
        }

        // zOffsetLabel
        //
        if (n.name () == "zOffsetLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ZOffsetLabelType > r (
            ZOffsetLabelTraits::create (i, f, this));

          if (!zOffsetLabel_.present ())
          {
            this->zOffsetLabel_.set (::std::move (r));
            continue;
          }
        }

        // xCountLabel
        //
        if (n.name () == "xCountLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< XCountLabelType > r (
            XCountLabelTraits::create (i, f, this));

          if (!xCountLabel_.present ())
          {
            this->xCountLabel_.set (::std::move (r));
            continue;
          }
        }

        // yCountLabel
        //
        if (n.name () == "yCountLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< YCountLabelType > r (
            YCountLabelTraits::create (i, f, this));

          if (!yCountLabel_.present ())
          {
            this->yCountLabel_.set (::std::move (r));
            continue;
          }
        }

        // zCountLabel
        //
        if (n.name () == "zCountLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ZCountLabelType > r (
            ZCountLabelTraits::create (i, f, this));

          if (!zCountLabel_.present ())
          {
            this->zCountLabel_.set (::std::move (r));
            continue;
          }
        }

        // includeSourceLabel
        //
        if (n.name () == "includeSourceLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IncludeSourceLabelType > r (
            IncludeSourceLabelTraits::create (i, f, this));

          if (!includeSourceLabel_.present ())
          {
            this->includeSourceLabel_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!instanceMapper_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "instanceMapper",
          "");
      }

      if (!csysDragger_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csysDragger",
          "");
      }

      if (!xOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "xOffset",
          "");
      }

      if (!yOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "yOffset",
          "");
      }

      if (!zOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "zOffset",
          "");
      }

      if (!xCount_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "xCount",
          "");
      }

      if (!yCount_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "yCount",
          "");
      }

      if (!zCount_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "zCount",
          "");
      }

      if (!csys_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "csys",
          "");
      }

      if (!includeSource_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "includeSource",
          "");
      }

      if (!pick_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pick",
          "");
      }

      if (!xOffsetLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "xOffsetLabel",
          "");
      }

      if (!yOffsetLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "yOffsetLabel",
          "");
      }

      if (!zOffsetLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "zOffsetLabel",
          "");
      }

      if (!xCountLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "xCountLabel",
          "");
      }

      if (!yCountLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "yCountLabel",
          "");
      }

      if (!zCountLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "zCountLabel",
          "");
      }

      if (!includeSourceLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "includeSourceLabel",
          "");
      }
    }

    FeatureInstanceLinear* FeatureInstanceLinear::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureInstanceLinear (*this, f, c);
    }

    FeatureInstanceLinear& FeatureInstanceLinear::
    operator= (const FeatureInstanceLinear& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->instanceMapper_ = x.instanceMapper_;
        this->csysDragger_ = x.csysDragger_;
        this->xOffset_ = x.xOffset_;
        this->yOffset_ = x.yOffset_;
        this->zOffset_ = x.zOffset_;
        this->xCount_ = x.xCount_;
        this->yCount_ = x.yCount_;
        this->zCount_ = x.zCount_;
        this->csys_ = x.csys_;
        this->includeSource_ = x.includeSource_;
        this->pick_ = x.pick_;
        this->xOffsetLabel_ = x.xOffsetLabel_;
        this->yOffsetLabel_ = x.yOffsetLabel_;
        this->zOffsetLabel_ = x.zOffsetLabel_;
        this->xCountLabel_ = x.xCountLabel_;
        this->yCountLabel_ = x.yCountLabel_;
        this->zCountLabel_ = x.zCountLabel_;
        this->includeSourceLabel_ = x.includeSourceLabel_;
      }

      return *this;
    }

    FeatureInstanceLinear::
    ~FeatureInstanceLinear ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& u,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& u,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& u,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::instanceLinear (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::instanceLinear (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::instanceLinear (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::instanceLinear (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& sid,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::instanceLinear (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& sid,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::instanceLinear (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& i,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& i,
                    ::xml_schema::ErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& i,
                    ::xercesc::DOMErrorHandler& h,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
        ::prj::srl::instanceLinear (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::xercesc::DOMDocument& doc,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > (
          ::prj::srl::instanceLinear (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "instanceLinear" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureInstanceLinear, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "instanceLinear",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f,
                    const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "instanceLinear" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureInstanceLinear, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "instanceLinear",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureInstanceLinear& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // instanceMapper
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "instanceMapper",
            e));

        s << i.instanceMapper ();
      }

      // csysDragger
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csysDragger",
            e));

        s << i.csysDragger ();
      }

      // xOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "xOffset",
            e));

        s << i.xOffset ();
      }

      // yOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "yOffset",
            e));

        s << i.yOffset ();
      }

      // zOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "zOffset",
            e));

        s << i.zOffset ();
      }

      // xCount
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "xCount",
            e));

        s << i.xCount ();
      }

      // yCount
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "yCount",
            e));

        s << i.yCount ();
      }

      // zCount
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "zCount",
            e));

        s << i.zCount ();
      }

      // csys
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csys",
            e));

        s << i.csys ();
      }

      // includeSource
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "includeSource",
            e));

        s << i.includeSource ();
      }

      // pick
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pick",
            e));

        s << i.pick ();
      }

      // xOffsetLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "xOffsetLabel",
            e));

        s << i.xOffsetLabel ();
      }

      // yOffsetLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "yOffsetLabel",
            e));

        s << i.yOffsetLabel ();
      }

      // zOffsetLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "zOffsetLabel",
            e));

        s << i.zOffsetLabel ();
      }

      // xCountLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "xCountLabel",
            e));

        s << i.xCountLabel ();
      }

      // yCountLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "yCountLabel",
            e));

        s << i.yCountLabel ();
      }

      // zCountLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "zCountLabel",
            e));

        s << i.zCountLabel ();
      }

      // includeSourceLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "includeSourceLabel",
            e));

        s << i.includeSourceLabel ();
      }
    }

    void
    instanceLinear (::std::ostream& o,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    instanceLinear (::std::ostream& o,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    instanceLinear (::std::ostream& o,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    instanceLinear (::xercesc::XMLFormatTarget& t,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    instanceLinear (::xercesc::XMLFormatTarget& t,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    ::xml_schema::ErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    instanceLinear (::xercesc::XMLFormatTarget& t,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    ::xercesc::DOMErrorHandler& h,
                    const ::xml_schema::NamespaceInfomap& m,
                    const ::std::string& e,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::instanceLinear (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    instanceLinear (::xercesc::DOMDocument& d,
                    const ::prj::srl::FeatureInstanceLinear& s,
                    ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "instanceLinear" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "instanceLinear",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    instanceLinear (const ::prj::srl::FeatureInstanceLinear& s,
                    const ::xml_schema::NamespaceInfomap& m,
                    ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "instanceLinear",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::instanceLinear (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


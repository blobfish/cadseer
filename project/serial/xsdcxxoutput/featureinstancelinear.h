// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

/**
 * @file
 * @brief Generated from featureinstancelinear.xsd.
 */

#ifndef PRJ_SRL_FEATUREINSTANCELINEAR_H
#define PRJ_SRL_FEATUREINSTANCELINEAR_H

#ifndef XSD_CXX11
#define XSD_CXX11
#endif

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include "../../../xmlbase.h"

// Forward declarations.
//
namespace prj
{
  namespace srl
  {
    class FeatureInstanceLinear;
  }
}


#include <memory>    // ::std::unique_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search
#include <utility>   // std::move

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

#include "featurebase.h"

#include "instancemapper.h"

namespace prj
{
  /**
   * @brief C++ namespace for the %http://www.cadseer.com/prj/srl
   * schema namespace.
   */
  namespace srl
  {
    /**
     * @brief Class corresponding to the %FeatureInstanceLinear schema type.
     *
     * @nosubgrouping
     */
    class FeatureInstanceLinear: public ::xml_schema::Type
    {
      public:
      /**
       * @name featureBase
       *
       * @brief Accessor and modifier functions for the %featureBase
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::FeatureBase FeatureBaseType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< FeatureBaseType, char > FeatureBaseTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const FeatureBaseType&
      featureBase () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      FeatureBaseType&
      featureBase ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      featureBase (const FeatureBaseType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      featureBase (::std::unique_ptr< FeatureBaseType > p);

      //@}

      /**
       * @name instanceMapper
       *
       * @brief Accessor and modifier functions for the %instanceMapper
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::InstanceData InstanceMapperType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< InstanceMapperType, char > InstanceMapperTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const InstanceMapperType&
      instanceMapper () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      InstanceMapperType&
      instanceMapper ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      instanceMapper (const InstanceMapperType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      instanceMapper (::std::unique_ptr< InstanceMapperType > p);

      //@}

      /**
       * @name csysDragger
       *
       * @brief Accessor and modifier functions for the %csysDragger
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::CSysDragger CsysDraggerType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CsysDraggerType, char > CsysDraggerTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CsysDraggerType&
      csysDragger () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CsysDraggerType&
      csysDragger ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      csysDragger (const CsysDraggerType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      csysDragger (::std::unique_ptr< CsysDraggerType > p);

      //@}

      /**
       * @name xOffset
       *
       * @brief Accessor and modifier functions for the %xOffset
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter XOffsetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XOffsetType, char > XOffsetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XOffsetType&
      xOffset () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XOffsetType&
      xOffset ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      xOffset (const XOffsetType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      xOffset (::std::unique_ptr< XOffsetType > p);

      //@}

      /**
       * @name yOffset
       *
       * @brief Accessor and modifier functions for the %yOffset
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter YOffsetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YOffsetType, char > YOffsetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YOffsetType&
      yOffset () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YOffsetType&
      yOffset ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      yOffset (const YOffsetType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      yOffset (::std::unique_ptr< YOffsetType > p);

      //@}

      /**
       * @name zOffset
       *
       * @brief Accessor and modifier functions for the %zOffset
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter ZOffsetType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZOffsetType, char > ZOffsetTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZOffsetType&
      zOffset () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZOffsetType&
      zOffset ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      zOffset (const ZOffsetType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      zOffset (::std::unique_ptr< ZOffsetType > p);

      //@}

      /**
       * @name xCount
       *
       * @brief Accessor and modifier functions for the %xCount
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter XCountType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XCountType, char > XCountTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XCountType&
      xCount () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XCountType&
      xCount ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      xCount (const XCountType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      xCount (::std::unique_ptr< XCountType > p);

      //@}

      /**
       * @name yCount
       *
       * @brief Accessor and modifier functions for the %yCount
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter YCountType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YCountType, char > YCountTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YCountType&
      yCount () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YCountType&
      yCount ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      yCount (const YCountType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      yCount (::std::unique_ptr< YCountType > p);

      //@}

      /**
       * @name zCount
       *
       * @brief Accessor and modifier functions for the %zCount
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter ZCountType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZCountType, char > ZCountTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZCountType&
      zCount () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZCountType&
      zCount ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      zCount (const ZCountType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      zCount (::std::unique_ptr< ZCountType > p);

      //@}

      /**
       * @name csys
       *
       * @brief Accessor and modifier functions for the %csys
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter CsysType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< CsysType, char > CsysTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const CsysType&
      csys () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      CsysType&
      csys ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      csys (const CsysType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      csys (::std::unique_ptr< CsysType > p);

      //@}

      /**
       * @name includeSource
       *
       * @brief Accessor and modifier functions for the %includeSource
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Parameter IncludeSourceType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IncludeSourceType, char > IncludeSourceTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IncludeSourceType&
      includeSource () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IncludeSourceType&
      includeSource ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      includeSource (const IncludeSourceType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      includeSource (::std::unique_ptr< IncludeSourceType > p);

      //@}

      /**
       * @name pick
       *
       * @brief Accessor and modifier functions for the %pick
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::Pick PickType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< PickType, char > PickTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const PickType&
      pick () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      PickType&
      pick ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      pick (const PickType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      pick (::std::unique_ptr< PickType > p);

      //@}

      /**
       * @name xOffsetLabel
       *
       * @brief Accessor and modifier functions for the %xOffsetLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel XOffsetLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XOffsetLabelType, char > XOffsetLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XOffsetLabelType&
      xOffsetLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XOffsetLabelType&
      xOffsetLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      xOffsetLabel (const XOffsetLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      xOffsetLabel (::std::unique_ptr< XOffsetLabelType > p);

      //@}

      /**
       * @name yOffsetLabel
       *
       * @brief Accessor and modifier functions for the %yOffsetLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel YOffsetLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YOffsetLabelType, char > YOffsetLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YOffsetLabelType&
      yOffsetLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YOffsetLabelType&
      yOffsetLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      yOffsetLabel (const YOffsetLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      yOffsetLabel (::std::unique_ptr< YOffsetLabelType > p);

      //@}

      /**
       * @name zOffsetLabel
       *
       * @brief Accessor and modifier functions for the %zOffsetLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel ZOffsetLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZOffsetLabelType, char > ZOffsetLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZOffsetLabelType&
      zOffsetLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZOffsetLabelType&
      zOffsetLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      zOffsetLabel (const ZOffsetLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      zOffsetLabel (::std::unique_ptr< ZOffsetLabelType > p);

      //@}

      /**
       * @name xCountLabel
       *
       * @brief Accessor and modifier functions for the %xCountLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel XCountLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< XCountLabelType, char > XCountLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const XCountLabelType&
      xCountLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      XCountLabelType&
      xCountLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      xCountLabel (const XCountLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      xCountLabel (::std::unique_ptr< XCountLabelType > p);

      //@}

      /**
       * @name yCountLabel
       *
       * @brief Accessor and modifier functions for the %yCountLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel YCountLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< YCountLabelType, char > YCountLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const YCountLabelType&
      yCountLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      YCountLabelType&
      yCountLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      yCountLabel (const YCountLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      yCountLabel (::std::unique_ptr< YCountLabelType > p);

      //@}

      /**
       * @name zCountLabel
       *
       * @brief Accessor and modifier functions for the %zCountLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel ZCountLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< ZCountLabelType, char > ZCountLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const ZCountLabelType&
      zCountLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      ZCountLabelType&
      zCountLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      zCountLabel (const ZCountLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      zCountLabel (::std::unique_ptr< ZCountLabelType > p);

      //@}

      /**
       * @name includeSourceLabel
       *
       * @brief Accessor and modifier functions for the %includeSourceLabel
       * required element.
       */
      //@{

      /**
       * @brief Element type.
       */
      typedef ::prj::srl::PLabel IncludeSourceLabelType;

      /**
       * @brief Element traits type.
       */
      typedef ::xsd::cxx::tree::traits< IncludeSourceLabelType, char > IncludeSourceLabelTraits;

      /**
       * @brief Return a read-only (constant) reference to the element.
       *
       * @return A constant reference to the element.
       */
      const IncludeSourceLabelType&
      includeSourceLabel () const;

      /**
       * @brief Return a read-write reference to the element.
       *
       * @return A reference to the element.
       */
      IncludeSourceLabelType&
      includeSourceLabel ();

      /**
       * @brief Set the element value.
       *
       * @param x A new value to set.
       *
       * This function makes a copy of its argument and sets it as
       * the new value of the element.
       */
      void
      includeSourceLabel (const IncludeSourceLabelType& x);

      /**
       * @brief Set the element value without copying.
       *
       * @param p A new value to use.
       *
       * This function will try to use the passed value directly
       * instead of making a copy.
       */
      void
      includeSourceLabel (::std::unique_ptr< IncludeSourceLabelType > p);

      //@}

      /**
       * @name Constructors
       */
      //@{

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes.
       */
      FeatureInstanceLinear (const FeatureBaseType&,
                             const InstanceMapperType&,
                             const CsysDraggerType&,
                             const XOffsetType&,
                             const YOffsetType&,
                             const ZOffsetType&,
                             const XCountType&,
                             const YCountType&,
                             const ZCountType&,
                             const CsysType&,
                             const IncludeSourceType&,
                             const PickType&,
                             const XOffsetLabelType&,
                             const YOffsetLabelType&,
                             const ZOffsetLabelType&,
                             const XCountLabelType&,
                             const YCountLabelType&,
                             const ZCountLabelType&,
                             const IncludeSourceLabelType&);

      /**
       * @brief Create an instance from the ultimate base and
       * initializers for required elements and attributes
       * (::std::unique_ptr version).
       *
       * This constructor will try to use the passed values directly
       * instead of making copies.
       */
      FeatureInstanceLinear (::std::unique_ptr< FeatureBaseType >,
                             ::std::unique_ptr< InstanceMapperType >,
                             ::std::unique_ptr< CsysDraggerType >,
                             ::std::unique_ptr< XOffsetType >,
                             ::std::unique_ptr< YOffsetType >,
                             ::std::unique_ptr< ZOffsetType >,
                             ::std::unique_ptr< XCountType >,
                             ::std::unique_ptr< YCountType >,
                             ::std::unique_ptr< ZCountType >,
                             ::std::unique_ptr< CsysType >,
                             ::std::unique_ptr< IncludeSourceType >,
                             ::std::unique_ptr< PickType >,
                             ::std::unique_ptr< XOffsetLabelType >,
                             ::std::unique_ptr< YOffsetLabelType >,
                             ::std::unique_ptr< ZOffsetLabelType >,
                             ::std::unique_ptr< XCountLabelType >,
                             ::std::unique_ptr< YCountLabelType >,
                             ::std::unique_ptr< ZCountLabelType >,
                             ::std::unique_ptr< IncludeSourceLabelType >);

      /**
       * @brief Create an instance from a DOM element.
       *
       * @param e A DOM element to extract the data from.
       * @param f Flags to create the new instance with.
       * @param c A pointer to the object that will contain the new
       * instance.
       */
      FeatureInstanceLinear (const ::xercesc::DOMElement& e,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy constructor.
       *
       * @param x An instance to make a copy of.
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureInstanceLinear (const FeatureInstanceLinear& x,
                             ::xml_schema::Flags f = 0,
                             ::xml_schema::Container* c = 0);

      /**
       * @brief Copy the instance polymorphically.
       *
       * @param f Flags to create the copy with.
       * @param c A pointer to the object that will contain the copy.
       * @return A pointer to the dynamically allocated copy.
       *
       * This function ensures that the dynamic type of the instance is
       * used for copying and should be used for polymorphic object
       * models instead of the copy constructor.
       */
      virtual FeatureInstanceLinear*
      _clone (::xml_schema::Flags f = 0,
              ::xml_schema::Container* c = 0) const;

      /**
       * @brief Copy assignment operator.
       *
       * @param x An instance to make a copy of.
       * @return A reference to itself.
       *
       * For polymorphic object models use the @c _clone function instead.
       */
      FeatureInstanceLinear&
      operator= (const FeatureInstanceLinear& x);

      //@}

      /**
       * @brief Destructor.
       */
      virtual 
      ~FeatureInstanceLinear ();

      // Implementation.
      //

      //@cond

      protected:
      void
      parse (::xsd::cxx::xml::dom::parser< char >&,
             ::xml_schema::Flags);

      protected:
      ::xsd::cxx::tree::one< FeatureBaseType > featureBase_;
      ::xsd::cxx::tree::one< InstanceMapperType > instanceMapper_;
      ::xsd::cxx::tree::one< CsysDraggerType > csysDragger_;
      ::xsd::cxx::tree::one< XOffsetType > xOffset_;
      ::xsd::cxx::tree::one< YOffsetType > yOffset_;
      ::xsd::cxx::tree::one< ZOffsetType > zOffset_;
      ::xsd::cxx::tree::one< XCountType > xCount_;
      ::xsd::cxx::tree::one< YCountType > yCount_;
      ::xsd::cxx::tree::one< ZCountType > zCount_;
      ::xsd::cxx::tree::one< CsysType > csys_;
      ::xsd::cxx::tree::one< IncludeSourceType > includeSource_;
      ::xsd::cxx::tree::one< PickType > pick_;
      ::xsd::cxx::tree::one< XOffsetLabelType > xOffsetLabel_;
      ::xsd::cxx::tree::one< YOffsetLabelType > yOffsetLabel_;
      ::xsd::cxx::tree::one< ZOffsetLabelType > zOffsetLabel_;
      ::xsd::cxx::tree::one< XCountLabelType > xCountLabel_;
      ::xsd::cxx::tree::one< YCountLabelType > yCountLabel_;
      ::xsd::cxx::tree::one< ZCountLabelType > zCountLabel_;
      ::xsd::cxx::tree::one< IncludeSourceLabelType > includeSourceLabel_;

      //@endcond
    };
  }
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace prj
{
  namespace srl
  {
    /**
     * @name Parsing functions for the %instanceLinear document root.
     */
    //@{

    /**
     * @brief Parse a URI or a local file.
     *
     * @param uri A URI or a local file name.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& uri,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a URI or a local file with an error handler.
     *
     * @param uri A URI or a local file name.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& uri,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a URI or a local file with a Xerces-C++ DOM error
     * handler.
     *
     * @param uri A URI or a local file name.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream.
     *
     * @param is A standrad input stream.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with an error handler.
     *
     * @param is A standrad input stream.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a Xerces-C++ DOM error
     * handler.
     *
     * @param is A standrad input stream.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and an
     * error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a standard input stream with a resource id and a
     * Xerces-C++ DOM error handler.
     *
     * @param is A standrad input stream.
     * @param id A resource id.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * The resource id is used to identify the document being parsed in
     * diagnostics as well as to resolve relative paths.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source.
     *
     * @param is A Xerces-C++ input source.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function uses exceptions to report parsing errors.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& is,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with an error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh An error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& is,
                    ::xml_schema::ErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ input source with a Xerces-C++ DOM
     * error handler.
     *
     * @param is A Xerces-C++ input source.
     * @param eh A Xerces-C++ DOM error handler.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function reports parsing errors by calling the error handler.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (const ::xercesc::DOMDocument& d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    /**
     * @brief Parse a Xerces-C++ DOM document.
     *
     * @param d A pointer to the Xerces-C++ DOM document.
     * @param f Parsing flags.
     * @param p Parsing properties. 
     * @return A pointer to the root of the object model.
     *
     * This function is normally used together with the keep_dom and
     * own_dom parsing flags to assign ownership of the DOM document
     * to the object model.
     */
    ::std::unique_ptr< ::prj::srl::FeatureInstanceLinear >
    instanceLinear (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
                    ::xml_schema::Flags f = 0,
                    const ::xml_schema::Properties& p = ::xml_schema::Properties ());

    //@}
  }
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement&, const FeatureInstanceLinear&);

    /**
     * @name Serialization functions for the %instanceLinear document root.
     */
    //@{

    /**
     * @brief Serialize to a standard output stream.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    instanceLinear (::std::ostream& os,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with an error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    instanceLinear (::std::ostream& os,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a standard output stream with a Xerces-C++ DOM
     * error handler.
     *
     * @param os A standrad output stream.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    instanceLinear (::std::ostream& os,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function uses exceptions to report serialization errors.
     */
    void
    instanceLinear (::xercesc::XMLFormatTarget& ft,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with an error
     * handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh An error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    instanceLinear (::xercesc::XMLFormatTarget& ft,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    ::xml_schema::ErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a Xerces-C++ XML format target with a
     * Xerces-C++ DOM error handler.
     *
     * @param ft A Xerces-C++ XML format target.
     * @param x An object model to serialize.
     * @param eh A Xerces-C++ DOM error handler.
     * @param m A namespace information map.
     * @param e A character encoding to produce XML in.
     * @param f Serialization flags.
     *
     * This function reports serialization errors by calling the error
     * handler.
     */
    void
    instanceLinear (::xercesc::XMLFormatTarget& ft,
                    const ::prj::srl::FeatureInstanceLinear& x, 
                    ::xercesc::DOMErrorHandler& eh,
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    const ::std::string& e = "UTF-8",
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to an existing Xerces-C++ DOM document.
     *
     * @param d A Xerces-C++ DOM document.
     * @param x An object model to serialize.
     * @param f Serialization flags.
     *
     * Note that it is your responsibility to create the DOM document
     * with the correct root element as well as set the necessary
     * namespace mapping attributes.
     */
    void
    instanceLinear (::xercesc::DOMDocument& d,
                    const ::prj::srl::FeatureInstanceLinear& x,
                    ::xml_schema::Flags f = 0);

    /**
     * @brief Serialize to a new Xerces-C++ DOM document.
     *
     * @param x An object model to serialize.
     * @param m A namespace information map.
     * @param f Serialization flags.
     * @return A pointer to the new Xerces-C++ DOM document.
     */
    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    instanceLinear (const ::prj::srl::FeatureInstanceLinear& x, 
                    const ::xml_schema::NamespaceInfomap& m = ::xml_schema::NamespaceInfomap (),
                    ::xml_schema::Flags f = 0);

    //@}
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // PRJ_SRL_FEATUREINSTANCELINEAR_H

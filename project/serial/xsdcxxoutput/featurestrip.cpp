// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featurestrip.h"

namespace prj
{
  namespace srl
  {
    // Stations
    // 

    const Stations::ArraySequence& Stations::
    array () const
    {
      return this->array_;
    }

    Stations::ArraySequence& Stations::
    array ()
    {
      return this->array_;
    }

    void Stations::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // FeatureStrip
    // 

    const FeatureStrip::FeatureBaseType& FeatureStrip::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureStrip::FeatureBaseType& FeatureStrip::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureStrip::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureStrip::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureStrip::PitchType& FeatureStrip::
    pitch () const
    {
      return this->pitch_.get ();
    }

    FeatureStrip::PitchType& FeatureStrip::
    pitch ()
    {
      return this->pitch_.get ();
    }

    void FeatureStrip::
    pitch (const PitchType& x)
    {
      this->pitch_.set (x);
    }

    void FeatureStrip::
    pitch (::std::unique_ptr< PitchType > x)
    {
      this->pitch_.set (std::move (x));
    }

    const FeatureStrip::WidthType& FeatureStrip::
    width () const
    {
      return this->width_.get ();
    }

    FeatureStrip::WidthType& FeatureStrip::
    width ()
    {
      return this->width_.get ();
    }

    void FeatureStrip::
    width (const WidthType& x)
    {
      this->width_.set (x);
    }

    void FeatureStrip::
    width (::std::unique_ptr< WidthType > x)
    {
      this->width_.set (std::move (x));
    }

    const FeatureStrip::WidthOffsetType& FeatureStrip::
    widthOffset () const
    {
      return this->widthOffset_.get ();
    }

    FeatureStrip::WidthOffsetType& FeatureStrip::
    widthOffset ()
    {
      return this->widthOffset_.get ();
    }

    void FeatureStrip::
    widthOffset (const WidthOffsetType& x)
    {
      this->widthOffset_.set (x);
    }

    void FeatureStrip::
    widthOffset (::std::unique_ptr< WidthOffsetType > x)
    {
      this->widthOffset_.set (std::move (x));
    }

    const FeatureStrip::GapType& FeatureStrip::
    gap () const
    {
      return this->gap_.get ();
    }

    FeatureStrip::GapType& FeatureStrip::
    gap ()
    {
      return this->gap_.get ();
    }

    void FeatureStrip::
    gap (const GapType& x)
    {
      this->gap_.set (x);
    }

    void FeatureStrip::
    gap (::std::unique_ptr< GapType > x)
    {
      this->gap_.set (std::move (x));
    }

    const FeatureStrip::AutoCalcType& FeatureStrip::
    autoCalc () const
    {
      return this->autoCalc_.get ();
    }

    FeatureStrip::AutoCalcType& FeatureStrip::
    autoCalc ()
    {
      return this->autoCalc_.get ();
    }

    void FeatureStrip::
    autoCalc (const AutoCalcType& x)
    {
      this->autoCalc_.set (x);
    }

    void FeatureStrip::
    autoCalc (::std::unique_ptr< AutoCalcType > x)
    {
      this->autoCalc_.set (std::move (x));
    }

    const FeatureStrip::StripHeightType& FeatureStrip::
    stripHeight () const
    {
      return this->stripHeight_.get ();
    }

    FeatureStrip::StripHeightType& FeatureStrip::
    stripHeight ()
    {
      return this->stripHeight_.get ();
    }

    void FeatureStrip::
    stripHeight (const StripHeightType& x)
    {
      this->stripHeight_.set (x);
    }

    const FeatureStrip::StationsType& FeatureStrip::
    stations () const
    {
      return this->stations_.get ();
    }

    FeatureStrip::StationsType& FeatureStrip::
    stations ()
    {
      return this->stations_.get ();
    }

    void FeatureStrip::
    stations (const StationsType& x)
    {
      this->stations_.set (x);
    }

    void FeatureStrip::
    stations (::std::unique_ptr< StationsType > x)
    {
      this->stations_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // Stations
    //

    Stations::
    Stations ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    Stations::
    Stations (const Stations& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    Stations::
    Stations (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Stations::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    Stations* Stations::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Stations (*this, f, c);
    }

    Stations& Stations::
    operator= (const Stations& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    Stations::
    ~Stations ()
    {
    }

    // FeatureStrip
    //

    FeatureStrip::
    FeatureStrip (const FeatureBaseType& featureBase,
                  const PitchType& pitch,
                  const WidthType& width,
                  const WidthOffsetType& widthOffset,
                  const GapType& gap,
                  const AutoCalcType& autoCalc,
                  const StripHeightType& stripHeight,
                  const StationsType& stations)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      pitch_ (pitch, this),
      width_ (width, this),
      widthOffset_ (widthOffset, this),
      gap_ (gap, this),
      autoCalc_ (autoCalc, this),
      stripHeight_ (stripHeight, this),
      stations_ (stations, this)
    {
    }

    FeatureStrip::
    FeatureStrip (::std::unique_ptr< FeatureBaseType > featureBase,
                  ::std::unique_ptr< PitchType > pitch,
                  ::std::unique_ptr< WidthType > width,
                  ::std::unique_ptr< WidthOffsetType > widthOffset,
                  ::std::unique_ptr< GapType > gap,
                  ::std::unique_ptr< AutoCalcType > autoCalc,
                  const StripHeightType& stripHeight,
                  ::std::unique_ptr< StationsType > stations)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      pitch_ (std::move (pitch), this),
      width_ (std::move (width), this),
      widthOffset_ (std::move (widthOffset), this),
      gap_ (std::move (gap), this),
      autoCalc_ (std::move (autoCalc), this),
      stripHeight_ (stripHeight, this),
      stations_ (std::move (stations), this)
    {
    }

    FeatureStrip::
    FeatureStrip (const FeatureStrip& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      pitch_ (x.pitch_, f, this),
      width_ (x.width_, f, this),
      widthOffset_ (x.widthOffset_, f, this),
      gap_ (x.gap_, f, this),
      autoCalc_ (x.autoCalc_, f, this),
      stripHeight_ (x.stripHeight_, f, this),
      stations_ (x.stations_, f, this)
    {
    }

    FeatureStrip::
    FeatureStrip (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      pitch_ (this),
      width_ (this),
      widthOffset_ (this),
      gap_ (this),
      autoCalc_ (this),
      stripHeight_ (this),
      stations_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureStrip::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // pitch
        //
        if (n.name () == "pitch" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< PitchType > r (
            PitchTraits::create (i, f, this));

          if (!pitch_.present ())
          {
            this->pitch_.set (::std::move (r));
            continue;
          }
        }

        // width
        //
        if (n.name () == "width" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< WidthType > r (
            WidthTraits::create (i, f, this));

          if (!width_.present ())
          {
            this->width_.set (::std::move (r));
            continue;
          }
        }

        // widthOffset
        //
        if (n.name () == "widthOffset" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< WidthOffsetType > r (
            WidthOffsetTraits::create (i, f, this));

          if (!widthOffset_.present ())
          {
            this->widthOffset_.set (::std::move (r));
            continue;
          }
        }

        // gap
        //
        if (n.name () == "gap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< GapType > r (
            GapTraits::create (i, f, this));

          if (!gap_.present ())
          {
            this->gap_.set (::std::move (r));
            continue;
          }
        }

        // autoCalc
        //
        if (n.name () == "autoCalc" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AutoCalcType > r (
            AutoCalcTraits::create (i, f, this));

          if (!autoCalc_.present ())
          {
            this->autoCalc_.set (::std::move (r));
            continue;
          }
        }

        // stripHeight
        //
        if (n.name () == "stripHeight" && n.namespace_ ().empty ())
        {
          if (!stripHeight_.present ())
          {
            this->stripHeight_.set (StripHeightTraits::create (i, f, this));
            continue;
          }
        }

        // stations
        //
        if (n.name () == "stations" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< StationsType > r (
            StationsTraits::create (i, f, this));

          if (!stations_.present ())
          {
            this->stations_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!pitch_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "pitch",
          "");
      }

      if (!width_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "width",
          "");
      }

      if (!widthOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "widthOffset",
          "");
      }

      if (!gap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "gap",
          "");
      }

      if (!autoCalc_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "autoCalc",
          "");
      }

      if (!stripHeight_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "stripHeight",
          "");
      }

      if (!stations_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "stations",
          "");
      }
    }

    FeatureStrip* FeatureStrip::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureStrip (*this, f, c);
    }

    FeatureStrip& FeatureStrip::
    operator= (const FeatureStrip& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->pitch_ = x.pitch_;
        this->width_ = x.width_;
        this->widthOffset_ = x.widthOffset_;
        this->gap_ = x.gap_;
        this->autoCalc_ = x.autoCalc_;
        this->stripHeight_ = x.stripHeight_;
        this->stations_ = x.stations_;
      }

      return *this;
    }

    FeatureStrip::
    ~FeatureStrip ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (const ::std::string& u,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (const ::std::string& u,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (const ::std::string& u,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::strip (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::strip (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::strip (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::strip (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           const ::std::string& sid,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::strip (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::std::istream& is,
           const ::std::string& sid,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::strip (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::xercesc::InputSource& i,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::xercesc::InputSource& i,
           ::xml_schema::ErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::xercesc::InputSource& i,
           ::xercesc::DOMErrorHandler& h,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
        ::prj::srl::strip (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (const ::xercesc::DOMDocument& doc,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureStrip > (
          ::prj::srl::strip (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "strip" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureStrip > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureStrip, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "strip",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureStrip >
    strip (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
           ::xml_schema::Flags f,
           const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "strip" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureStrip > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureStrip, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "strip",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const Stations& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (Stations::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureStrip& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // pitch
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "pitch",
            e));

        s << i.pitch ();
      }

      // width
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "width",
            e));

        s << i.width ();
      }

      // widthOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "widthOffset",
            e));

        s << i.widthOffset ();
      }

      // gap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "gap",
            e));

        s << i.gap ();
      }

      // autoCalc
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "autoCalc",
            e));

        s << i.autoCalc ();
      }

      // stripHeight
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "stripHeight",
            e));

        s << ::xml_schema::AsDouble(i.stripHeight ());
      }

      // stations
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "stations",
            e));

        s << i.stations ();
      }
    }

    void
    strip (::std::ostream& o,
           const ::prj::srl::FeatureStrip& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    strip (::std::ostream& o,
           const ::prj::srl::FeatureStrip& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    strip (::std::ostream& o,
           const ::prj::srl::FeatureStrip& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    strip (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureStrip& s,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    strip (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureStrip& s,
           ::xml_schema::ErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    strip (::xercesc::XMLFormatTarget& t,
           const ::prj::srl::FeatureStrip& s,
           ::xercesc::DOMErrorHandler& h,
           const ::xml_schema::NamespaceInfomap& m,
           const ::std::string& e,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::strip (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    strip (::xercesc::DOMDocument& d,
           const ::prj::srl::FeatureStrip& s,
           ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "strip" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "strip",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    strip (const ::prj::srl::FeatureStrip& s,
           const ::xml_schema::NamespaceInfomap& m,
           ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "strip",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::strip (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


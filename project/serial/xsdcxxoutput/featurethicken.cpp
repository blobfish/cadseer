// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "featurethicken.h"

namespace prj
{
  namespace srl
  {
    // FeatureThicken
    // 

    const FeatureThicken::FeatureBaseType& FeatureThicken::
    featureBase () const
    {
      return this->featureBase_.get ();
    }

    FeatureThicken::FeatureBaseType& FeatureThicken::
    featureBase ()
    {
      return this->featureBase_.get ();
    }

    void FeatureThicken::
    featureBase (const FeatureBaseType& x)
    {
      this->featureBase_.set (x);
    }

    void FeatureThicken::
    featureBase (::std::unique_ptr< FeatureBaseType > x)
    {
      this->featureBase_.set (std::move (x));
    }

    const FeatureThicken::DistanceType& FeatureThicken::
    distance () const
    {
      return this->distance_.get ();
    }

    FeatureThicken::DistanceType& FeatureThicken::
    distance ()
    {
      return this->distance_.get ();
    }

    void FeatureThicken::
    distance (const DistanceType& x)
    {
      this->distance_.set (x);
    }

    void FeatureThicken::
    distance (::std::unique_ptr< DistanceType > x)
    {
      this->distance_.set (std::move (x));
    }

    const FeatureThicken::DistanceLabelType& FeatureThicken::
    distanceLabel () const
    {
      return this->distanceLabel_.get ();
    }

    FeatureThicken::DistanceLabelType& FeatureThicken::
    distanceLabel ()
    {
      return this->distanceLabel_.get ();
    }

    void FeatureThicken::
    distanceLabel (const DistanceLabelType& x)
    {
      this->distanceLabel_.set (x);
    }

    void FeatureThicken::
    distanceLabel (::std::unique_ptr< DistanceLabelType > x)
    {
      this->distanceLabel_.set (std::move (x));
    }

    const FeatureThicken::FaceMapType& FeatureThicken::
    faceMap () const
    {
      return this->faceMap_.get ();
    }

    FeatureThicken::FaceMapType& FeatureThicken::
    faceMap ()
    {
      return this->faceMap_.get ();
    }

    void FeatureThicken::
    faceMap (const FaceMapType& x)
    {
      this->faceMap_.set (x);
    }

    void FeatureThicken::
    faceMap (::std::unique_ptr< FaceMapType > x)
    {
      this->faceMap_.set (std::move (x));
    }

    const FeatureThicken::EdgeMapType& FeatureThicken::
    edgeMap () const
    {
      return this->edgeMap_.get ();
    }

    FeatureThicken::EdgeMapType& FeatureThicken::
    edgeMap ()
    {
      return this->edgeMap_.get ();
    }

    void FeatureThicken::
    edgeMap (const EdgeMapType& x)
    {
      this->edgeMap_.set (x);
    }

    void FeatureThicken::
    edgeMap (::std::unique_ptr< EdgeMapType > x)
    {
      this->edgeMap_.set (std::move (x));
    }

    const FeatureThicken::BoundaryMapType& FeatureThicken::
    boundaryMap () const
    {
      return this->boundaryMap_.get ();
    }

    FeatureThicken::BoundaryMapType& FeatureThicken::
    boundaryMap ()
    {
      return this->boundaryMap_.get ();
    }

    void FeatureThicken::
    boundaryMap (const BoundaryMapType& x)
    {
      this->boundaryMap_.set (x);
    }

    void FeatureThicken::
    boundaryMap (::std::unique_ptr< BoundaryMapType > x)
    {
      this->boundaryMap_.set (std::move (x));
    }

    const FeatureThicken::OWireMapType& FeatureThicken::
    oWireMap () const
    {
      return this->oWireMap_.get ();
    }

    FeatureThicken::OWireMapType& FeatureThicken::
    oWireMap ()
    {
      return this->oWireMap_.get ();
    }

    void FeatureThicken::
    oWireMap (const OWireMapType& x)
    {
      this->oWireMap_.set (x);
    }

    void FeatureThicken::
    oWireMap (::std::unique_ptr< OWireMapType > x)
    {
      this->oWireMap_.set (std::move (x));
    }

    const FeatureThicken::SolidIdType& FeatureThicken::
    solidId () const
    {
      return this->solidId_.get ();
    }

    FeatureThicken::SolidIdType& FeatureThicken::
    solidId ()
    {
      return this->solidId_.get ();
    }

    void FeatureThicken::
    solidId (const SolidIdType& x)
    {
      this->solidId_.set (x);
    }

    void FeatureThicken::
    solidId (::std::unique_ptr< SolidIdType > x)
    {
      this->solidId_.set (std::move (x));
    }

    const FeatureThicken::SolidIdType& FeatureThicken::
    solidId_default_value ()
    {
      return solidId_default_value_;
    }

    const FeatureThicken::ShellIdType& FeatureThicken::
    shellId () const
    {
      return this->shellId_.get ();
    }

    FeatureThicken::ShellIdType& FeatureThicken::
    shellId ()
    {
      return this->shellId_.get ();
    }

    void FeatureThicken::
    shellId (const ShellIdType& x)
    {
      this->shellId_.set (x);
    }

    void FeatureThicken::
    shellId (::std::unique_ptr< ShellIdType > x)
    {
      this->shellId_.set (std::move (x));
    }

    const FeatureThicken::ShellIdType& FeatureThicken::
    shellId_default_value ()
    {
      return shellId_default_value_;
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // FeatureThicken
    //

    const FeatureThicken::SolidIdType FeatureThicken::solidId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const FeatureThicken::ShellIdType FeatureThicken::shellId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    FeatureThicken::
    FeatureThicken (const FeatureBaseType& featureBase,
                    const DistanceType& distance,
                    const DistanceLabelType& distanceLabel,
                    const FaceMapType& faceMap,
                    const EdgeMapType& edgeMap,
                    const BoundaryMapType& boundaryMap,
                    const OWireMapType& oWireMap,
                    const SolidIdType& solidId,
                    const ShellIdType& shellId)
    : ::xml_schema::Type (),
      featureBase_ (featureBase, this),
      distance_ (distance, this),
      distanceLabel_ (distanceLabel, this),
      faceMap_ (faceMap, this),
      edgeMap_ (edgeMap, this),
      boundaryMap_ (boundaryMap, this),
      oWireMap_ (oWireMap, this),
      solidId_ (solidId, this),
      shellId_ (shellId, this)
    {
    }

    FeatureThicken::
    FeatureThicken (::std::unique_ptr< FeatureBaseType > featureBase,
                    ::std::unique_ptr< DistanceType > distance,
                    ::std::unique_ptr< DistanceLabelType > distanceLabel,
                    ::std::unique_ptr< FaceMapType > faceMap,
                    ::std::unique_ptr< EdgeMapType > edgeMap,
                    ::std::unique_ptr< BoundaryMapType > boundaryMap,
                    ::std::unique_ptr< OWireMapType > oWireMap,
                    const SolidIdType& solidId,
                    const ShellIdType& shellId)
    : ::xml_schema::Type (),
      featureBase_ (std::move (featureBase), this),
      distance_ (std::move (distance), this),
      distanceLabel_ (std::move (distanceLabel), this),
      faceMap_ (std::move (faceMap), this),
      edgeMap_ (std::move (edgeMap), this),
      boundaryMap_ (std::move (boundaryMap), this),
      oWireMap_ (std::move (oWireMap), this),
      solidId_ (solidId, this),
      shellId_ (shellId, this)
    {
    }

    FeatureThicken::
    FeatureThicken (const FeatureThicken& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      featureBase_ (x.featureBase_, f, this),
      distance_ (x.distance_, f, this),
      distanceLabel_ (x.distanceLabel_, f, this),
      faceMap_ (x.faceMap_, f, this),
      edgeMap_ (x.edgeMap_, f, this),
      boundaryMap_ (x.boundaryMap_, f, this),
      oWireMap_ (x.oWireMap_, f, this),
      solidId_ (x.solidId_, f, this),
      shellId_ (x.shellId_, f, this)
    {
    }

    FeatureThicken::
    FeatureThicken (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      featureBase_ (this),
      distance_ (this),
      distanceLabel_ (this),
      faceMap_ (this),
      edgeMap_ (this),
      boundaryMap_ (this),
      oWireMap_ (this),
      solidId_ (this),
      shellId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureThicken::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // featureBase
        //
        if (n.name () == "featureBase" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureBaseType > r (
            FeatureBaseTraits::create (i, f, this));

          if (!featureBase_.present ())
          {
            this->featureBase_.set (::std::move (r));
            continue;
          }
        }

        // distance
        //
        if (n.name () == "distance" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DistanceType > r (
            DistanceTraits::create (i, f, this));

          if (!distance_.present ())
          {
            this->distance_.set (::std::move (r));
            continue;
          }
        }

        // distanceLabel
        //
        if (n.name () == "distanceLabel" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< DistanceLabelType > r (
            DistanceLabelTraits::create (i, f, this));

          if (!distanceLabel_.present ())
          {
            this->distanceLabel_.set (::std::move (r));
            continue;
          }
        }

        // faceMap
        //
        if (n.name () == "faceMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FaceMapType > r (
            FaceMapTraits::create (i, f, this));

          if (!faceMap_.present ())
          {
            this->faceMap_.set (::std::move (r));
            continue;
          }
        }

        // edgeMap
        //
        if (n.name () == "edgeMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EdgeMapType > r (
            EdgeMapTraits::create (i, f, this));

          if (!edgeMap_.present ())
          {
            this->edgeMap_.set (::std::move (r));
            continue;
          }
        }

        // boundaryMap
        //
        if (n.name () == "boundaryMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< BoundaryMapType > r (
            BoundaryMapTraits::create (i, f, this));

          if (!boundaryMap_.present ())
          {
            this->boundaryMap_.set (::std::move (r));
            continue;
          }
        }

        // oWireMap
        //
        if (n.name () == "oWireMap" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OWireMapType > r (
            OWireMapTraits::create (i, f, this));

          if (!oWireMap_.present ())
          {
            this->oWireMap_.set (::std::move (r));
            continue;
          }
        }

        // solidId
        //
        if (n.name () == "solidId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SolidIdType > r (
            SolidIdTraits::create (i, f, this));

          if (!solidId_.present ())
          {
            this->solidId_.set (::std::move (r));
            continue;
          }
        }

        // shellId
        //
        if (n.name () == "shellId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ShellIdType > r (
            ShellIdTraits::create (i, f, this));

          if (!shellId_.present ())
          {
            this->shellId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!featureBase_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "featureBase",
          "");
      }

      if (!distance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distance",
          "");
      }

      if (!distanceLabel_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "distanceLabel",
          "");
      }

      if (!faceMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "faceMap",
          "");
      }

      if (!edgeMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "edgeMap",
          "");
      }

      if (!boundaryMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "boundaryMap",
          "");
      }

      if (!oWireMap_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "oWireMap",
          "");
      }

      if (!solidId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "solidId",
          "");
      }

      if (!shellId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "shellId",
          "");
      }
    }

    FeatureThicken* FeatureThicken::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureThicken (*this, f, c);
    }

    FeatureThicken& FeatureThicken::
    operator= (const FeatureThicken& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->featureBase_ = x.featureBase_;
        this->distance_ = x.distance_;
        this->distanceLabel_ = x.distanceLabel_;
        this->faceMap_ = x.faceMap_;
        this->edgeMap_ = x.edgeMap_;
        this->boundaryMap_ = x.boundaryMap_;
        this->oWireMap_ = x.oWireMap_;
        this->solidId_ = x.solidId_;
        this->shellId_ = x.shellId_;
      }

      return *this;
    }

    FeatureThicken::
    ~FeatureThicken ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::thicken (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::thicken (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::thicken (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::thicken (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::thicken (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::thicken (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
        ::prj::srl::thicken (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::FeatureThicken > (
          ::prj::srl::thicken (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "thicken" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureThicken > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureThicken, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "thicken",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::FeatureThicken >
    thicken (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "thicken" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::FeatureThicken > r (
          ::xsd::cxx::tree::traits< ::prj::srl::FeatureThicken, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "thicken",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const FeatureThicken& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // featureBase
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "featureBase",
            e));

        s << i.featureBase ();
      }

      // distance
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distance",
            e));

        s << i.distance ();
      }

      // distanceLabel
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "distanceLabel",
            e));

        s << i.distanceLabel ();
      }

      // faceMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "faceMap",
            e));

        s << i.faceMap ();
      }

      // edgeMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "edgeMap",
            e));

        s << i.edgeMap ();
      }

      // boundaryMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "boundaryMap",
            e));

        s << i.boundaryMap ();
      }

      // oWireMap
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "oWireMap",
            e));

        s << i.oWireMap ();
      }

      // solidId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "solidId",
            e));

        s << i.solidId ();
      }

      // shellId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "shellId",
            e));

        s << i.shellId ();
      }
    }

    void
    thicken (::std::ostream& o,
             const ::prj::srl::FeatureThicken& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    thicken (::std::ostream& o,
             const ::prj::srl::FeatureThicken& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    thicken (::std::ostream& o,
             const ::prj::srl::FeatureThicken& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    thicken (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureThicken& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    thicken (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureThicken& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    thicken (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::FeatureThicken& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::thicken (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    thicken (::xercesc::DOMDocument& d,
             const ::prj::srl::FeatureThicken& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "thicken" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "thicken",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    thicken (const ::prj::srl::FeatureThicken& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "thicken",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::thicken (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


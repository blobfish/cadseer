// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "project.h"

namespace prj
{
  namespace srl
  {
    // Feature
    // 

    const Feature::IdType& Feature::
    id () const
    {
      return this->id_.get ();
    }

    Feature::IdType& Feature::
    id ()
    {
      return this->id_.get ();
    }

    void Feature::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void Feature::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const Feature::IdType& Feature::
    id_default_value ()
    {
      return id_default_value_;
    }

    const Feature::TypeType& Feature::
    type () const
    {
      return this->type_.get ();
    }

    Feature::TypeType& Feature::
    type ()
    {
      return this->type_.get ();
    }

    void Feature::
    type (const TypeType& x)
    {
      this->type_.set (x);
    }

    void Feature::
    type (::std::unique_ptr< TypeType > x)
    {
      this->type_.set (std::move (x));
    }

    const Feature::TypeType& Feature::
    type_default_value ()
    {
      return type_default_value_;
    }

    const Feature::ShapeOffsetType& Feature::
    shapeOffset () const
    {
      return this->shapeOffset_.get ();
    }

    Feature::ShapeOffsetType& Feature::
    shapeOffset ()
    {
      return this->shapeOffset_.get ();
    }

    void Feature::
    shapeOffset (const ShapeOffsetType& x)
    {
      this->shapeOffset_.set (x);
    }

    Feature::ShapeOffsetType Feature::
    shapeOffset_default_value ()
    {
      return ShapeOffsetType (18446744073709551615ULL);
    }


    // Features
    // 

    const Features::FeatureSequence& Features::
    feature () const
    {
      return this->feature_;
    }

    Features::FeatureSequence& Features::
    feature ()
    {
      return this->feature_;
    }

    void Features::
    feature (const FeatureSequence& s)
    {
      this->feature_ = s;
    }


    // FeatureState
    // 

    const FeatureState::IdType& FeatureState::
    id () const
    {
      return this->id_.get ();
    }

    FeatureState::IdType& FeatureState::
    id ()
    {
      return this->id_.get ();
    }

    void FeatureState::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void FeatureState::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const FeatureState::IdType& FeatureState::
    id_default_value ()
    {
      return id_default_value_;
    }

    const FeatureState::StateType& FeatureState::
    state () const
    {
      return this->state_.get ();
    }

    FeatureState::StateType& FeatureState::
    state ()
    {
      return this->state_.get ();
    }

    void FeatureState::
    state (const StateType& x)
    {
      this->state_.set (x);
    }

    void FeatureState::
    state (::std::unique_ptr< StateType > x)
    {
      this->state_.set (std::move (x));
    }


    // FeatureStates
    // 

    const FeatureStates::ArraySequence& FeatureStates::
    array () const
    {
      return this->array_;
    }

    FeatureStates::ArraySequence& FeatureStates::
    array ()
    {
      return this->array_;
    }

    void FeatureStates::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // InputTypes
    // 

    const InputTypes::ArraySequence& InputTypes::
    array () const
    {
      return this->array_;
    }

    InputTypes::ArraySequence& InputTypes::
    array ()
    {
      return this->array_;
    }

    void InputTypes::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // Connection
    // 

    const Connection::SourceIdType& Connection::
    sourceId () const
    {
      return this->sourceId_.get ();
    }

    Connection::SourceIdType& Connection::
    sourceId ()
    {
      return this->sourceId_.get ();
    }

    void Connection::
    sourceId (const SourceIdType& x)
    {
      this->sourceId_.set (x);
    }

    void Connection::
    sourceId (::std::unique_ptr< SourceIdType > x)
    {
      this->sourceId_.set (std::move (x));
    }

    const Connection::SourceIdType& Connection::
    sourceId_default_value ()
    {
      return sourceId_default_value_;
    }

    const Connection::TargetIdType& Connection::
    targetId () const
    {
      return this->targetId_.get ();
    }

    Connection::TargetIdType& Connection::
    targetId ()
    {
      return this->targetId_.get ();
    }

    void Connection::
    targetId (const TargetIdType& x)
    {
      this->targetId_.set (x);
    }

    void Connection::
    targetId (::std::unique_ptr< TargetIdType > x)
    {
      this->targetId_.set (std::move (x));
    }

    const Connection::TargetIdType& Connection::
    targetId_default_value ()
    {
      return targetId_default_value_;
    }

    const Connection::InputTypeType& Connection::
    inputType () const
    {
      return this->inputType_.get ();
    }

    Connection::InputTypeType& Connection::
    inputType ()
    {
      return this->inputType_.get ();
    }

    void Connection::
    inputType (const InputTypeType& x)
    {
      this->inputType_.set (x);
    }

    void Connection::
    inputType (::std::unique_ptr< InputTypeType > x)
    {
      this->inputType_.set (std::move (x));
    }


    // Connections
    // 

    const Connections::ConnectionSequence& Connections::
    connection () const
    {
      return this->connection_;
    }

    Connections::ConnectionSequence& Connections::
    connection ()
    {
      return this->connection_;
    }

    void Connections::
    connection (const ConnectionSequence& s)
    {
      this->connection_ = s;
    }


    // AppVersion
    // 

    const AppVersion::MajorType& AppVersion::
    major () const
    {
      return this->major_.get ();
    }

    AppVersion::MajorType& AppVersion::
    major ()
    {
      return this->major_.get ();
    }

    void AppVersion::
    major (const MajorType& x)
    {
      this->major_.set (x);
    }

    AppVersion::MajorType AppVersion::
    major_default_value ()
    {
      return MajorType (0);
    }

    const AppVersion::MinorType& AppVersion::
    minor () const
    {
      return this->minor_.get ();
    }

    AppVersion::MinorType& AppVersion::
    minor ()
    {
      return this->minor_.get ();
    }

    void AppVersion::
    minor (const MinorType& x)
    {
      this->minor_.set (x);
    }

    AppVersion::MinorType AppVersion::
    minor_default_value ()
    {
      return MinorType (0);
    }

    const AppVersion::MaintenanceType& AppVersion::
    maintenance () const
    {
      return this->maintenance_.get ();
    }

    AppVersion::MaintenanceType& AppVersion::
    maintenance ()
    {
      return this->maintenance_.get ();
    }

    void AppVersion::
    maintenance (const MaintenanceType& x)
    {
      this->maintenance_.set (x);
    }

    AppVersion::MaintenanceType AppVersion::
    maintenance_default_value ()
    {
      return MaintenanceType (0);
    }


    // Expression
    // 

    const Expression::IdType& Expression::
    id () const
    {
      return this->id_.get ();
    }

    Expression::IdType& Expression::
    id ()
    {
      return this->id_.get ();
    }

    void Expression::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void Expression::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const Expression::IdType& Expression::
    id_default_value ()
    {
      return id_default_value_;
    }

    const Expression::StringFormType& Expression::
    stringForm () const
    {
      return this->stringForm_.get ();
    }

    Expression::StringFormType& Expression::
    stringForm ()
    {
      return this->stringForm_.get ();
    }

    void Expression::
    stringForm (const StringFormType& x)
    {
      this->stringForm_.set (x);
    }

    void Expression::
    stringForm (::std::unique_ptr< StringFormType > x)
    {
      this->stringForm_.set (std::move (x));
    }

    const Expression::StringFormType& Expression::
    stringForm_default_value ()
    {
      return stringForm_default_value_;
    }


    // Expressions
    // 

    const Expressions::ArraySequence& Expressions::
    array () const
    {
      return this->array_;
    }

    Expressions::ArraySequence& Expressions::
    array ()
    {
      return this->array_;
    }

    void Expressions::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // ExpressionLink
    // 

    const ExpressionLink::ParameterIdType& ExpressionLink::
    parameterId () const
    {
      return this->parameterId_.get ();
    }

    ExpressionLink::ParameterIdType& ExpressionLink::
    parameterId ()
    {
      return this->parameterId_.get ();
    }

    void ExpressionLink::
    parameterId (const ParameterIdType& x)
    {
      this->parameterId_.set (x);
    }

    void ExpressionLink::
    parameterId (::std::unique_ptr< ParameterIdType > x)
    {
      this->parameterId_.set (std::move (x));
    }

    const ExpressionLink::ParameterIdType& ExpressionLink::
    parameterId_default_value ()
    {
      return parameterId_default_value_;
    }

    const ExpressionLink::ExpressionIdType& ExpressionLink::
    expressionId () const
    {
      return this->expressionId_.get ();
    }

    ExpressionLink::ExpressionIdType& ExpressionLink::
    expressionId ()
    {
      return this->expressionId_.get ();
    }

    void ExpressionLink::
    expressionId (const ExpressionIdType& x)
    {
      this->expressionId_.set (x);
    }

    void ExpressionLink::
    expressionId (::std::unique_ptr< ExpressionIdType > x)
    {
      this->expressionId_.set (std::move (x));
    }

    const ExpressionLink::ExpressionIdType& ExpressionLink::
    expressionId_default_value ()
    {
      return expressionId_default_value_;
    }


    // ExpressionLinks
    // 

    const ExpressionLinks::ArraySequence& ExpressionLinks::
    array () const
    {
      return this->array_;
    }

    ExpressionLinks::ArraySequence& ExpressionLinks::
    array ()
    {
      return this->array_;
    }

    void ExpressionLinks::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // ExpressionGroupEntries
    // 

    const ExpressionGroupEntries::ArraySequence& ExpressionGroupEntries::
    array () const
    {
      return this->array_;
    }

    ExpressionGroupEntries::ArraySequence& ExpressionGroupEntries::
    array ()
    {
      return this->array_;
    }

    void ExpressionGroupEntries::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }

    const ExpressionGroupEntries::ArrayType& ExpressionGroupEntries::
    array_default_value ()
    {
      return array_default_value_;
    }


    // ExpressionGroup
    // 

    const ExpressionGroup::IdType& ExpressionGroup::
    id () const
    {
      return this->id_.get ();
    }

    ExpressionGroup::IdType& ExpressionGroup::
    id ()
    {
      return this->id_.get ();
    }

    void ExpressionGroup::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void ExpressionGroup::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const ExpressionGroup::IdType& ExpressionGroup::
    id_default_value ()
    {
      return id_default_value_;
    }

    const ExpressionGroup::NameType& ExpressionGroup::
    name () const
    {
      return this->name_.get ();
    }

    ExpressionGroup::NameType& ExpressionGroup::
    name ()
    {
      return this->name_.get ();
    }

    void ExpressionGroup::
    name (const NameType& x)
    {
      this->name_.set (x);
    }

    void ExpressionGroup::
    name (::std::unique_ptr< NameType > x)
    {
      this->name_.set (std::move (x));
    }

    const ExpressionGroup::NameType& ExpressionGroup::
    name_default_value ()
    {
      return name_default_value_;
    }

    const ExpressionGroup::EntriesType& ExpressionGroup::
    entries () const
    {
      return this->entries_.get ();
    }

    ExpressionGroup::EntriesType& ExpressionGroup::
    entries ()
    {
      return this->entries_.get ();
    }

    void ExpressionGroup::
    entries (const EntriesType& x)
    {
      this->entries_.set (x);
    }

    void ExpressionGroup::
    entries (::std::unique_ptr< EntriesType > x)
    {
      this->entries_.set (std::move (x));
    }


    // ExpressionGroups
    // 

    const ExpressionGroups::ArraySequence& ExpressionGroups::
    array () const
    {
      return this->array_;
    }

    ExpressionGroups::ArraySequence& ExpressionGroups::
    array ()
    {
      return this->array_;
    }

    void ExpressionGroups::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // Project
    // 

    const Project::AppVersionType& Project::
    appVersion () const
    {
      return this->appVersion_.get ();
    }

    Project::AppVersionType& Project::
    appVersion ()
    {
      return this->appVersion_.get ();
    }

    void Project::
    appVersion (const AppVersionType& x)
    {
      this->appVersion_.set (x);
    }

    void Project::
    appVersion (::std::unique_ptr< AppVersionType > x)
    {
      this->appVersion_.set (std::move (x));
    }

    const Project::FileVersionType& Project::
    fileVersion () const
    {
      return this->fileVersion_.get ();
    }

    Project::FileVersionType& Project::
    fileVersion ()
    {
      return this->fileVersion_.get ();
    }

    void Project::
    fileVersion (const FileVersionType& x)
    {
      this->fileVersion_.set (x);
    }

    Project::FileVersionType Project::
    fileVersion_default_value ()
    {
      return FileVersionType (0);
    }

    const Project::FeaturesType& Project::
    features () const
    {
      return this->features_.get ();
    }

    Project::FeaturesType& Project::
    features ()
    {
      return this->features_.get ();
    }

    void Project::
    features (const FeaturesType& x)
    {
      this->features_.set (x);
    }

    void Project::
    features (::std::unique_ptr< FeaturesType > x)
    {
      this->features_.set (std::move (x));
    }

    const Project::StatesType& Project::
    states () const
    {
      return this->states_.get ();
    }

    Project::StatesType& Project::
    states ()
    {
      return this->states_.get ();
    }

    void Project::
    states (const StatesType& x)
    {
      this->states_.set (x);
    }

    void Project::
    states (::std::unique_ptr< StatesType > x)
    {
      this->states_.set (std::move (x));
    }

    const Project::ConnectionsType& Project::
    connections () const
    {
      return this->connections_.get ();
    }

    Project::ConnectionsType& Project::
    connections ()
    {
      return this->connections_.get ();
    }

    void Project::
    connections (const ConnectionsType& x)
    {
      this->connections_.set (x);
    }

    void Project::
    connections (::std::unique_ptr< ConnectionsType > x)
    {
      this->connections_.set (std::move (x));
    }

    const Project::ExpressionsType& Project::
    expressions () const
    {
      return this->expressions_.get ();
    }

    Project::ExpressionsType& Project::
    expressions ()
    {
      return this->expressions_.get ();
    }

    void Project::
    expressions (const ExpressionsType& x)
    {
      this->expressions_.set (x);
    }

    void Project::
    expressions (::std::unique_ptr< ExpressionsType > x)
    {
      this->expressions_.set (std::move (x));
    }

    const Project::ExpressionLinksOptional& Project::
    expressionLinks () const
    {
      return this->expressionLinks_;
    }

    Project::ExpressionLinksOptional& Project::
    expressionLinks ()
    {
      return this->expressionLinks_;
    }

    void Project::
    expressionLinks (const ExpressionLinksType& x)
    {
      this->expressionLinks_.set (x);
    }

    void Project::
    expressionLinks (const ExpressionLinksOptional& x)
    {
      this->expressionLinks_ = x;
    }

    void Project::
    expressionLinks (::std::unique_ptr< ExpressionLinksType > x)
    {
      this->expressionLinks_.set (std::move (x));
    }

    const Project::ExpressionGroupsOptional& Project::
    expressionGroups () const
    {
      return this->expressionGroups_;
    }

    Project::ExpressionGroupsOptional& Project::
    expressionGroups ()
    {
      return this->expressionGroups_;
    }

    void Project::
    expressionGroups (const ExpressionGroupsType& x)
    {
      this->expressionGroups_.set (x);
    }

    void Project::
    expressionGroups (const ExpressionGroupsOptional& x)
    {
      this->expressionGroups_ = x;
    }

    void Project::
    expressionGroups (::std::unique_ptr< ExpressionGroupsType > x)
    {
      this->expressionGroups_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // Feature
    //

    const Feature::IdType Feature::id_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const Feature::TypeType Feature::type_default_value_ (
      "None");

    Feature::
    Feature (const IdType& id,
             const TypeType& type,
             const ShapeOffsetType& shapeOffset)
    : ::xml_schema::Type (),
      id_ (id, this),
      type_ (type, this),
      shapeOffset_ (shapeOffset, this)
    {
    }

    Feature::
    Feature (const Feature& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      type_ (x.type_, f, this),
      shapeOffset_ (x.shapeOffset_, f, this)
    {
    }

    Feature::
    Feature (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (this),
      type_ (this),
      shapeOffset_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Feature::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // type
        //
        if (n.name () == "type" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< TypeType > r (
            TypeTraits::create (i, f, this));

          if (!type_.present ())
          {
            this->type_.set (::std::move (r));
            continue;
          }
        }

        // shapeOffset
        //
        if (n.name () == "shapeOffset" && n.namespace_ ().empty ())
        {
          if (!shapeOffset_.present ())
          {
            this->shapeOffset_.set (ShapeOffsetTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!type_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "type",
          "");
      }

      if (!shapeOffset_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "shapeOffset",
          "");
      }
    }

    Feature* Feature::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Feature (*this, f, c);
    }

    Feature& Feature::
    operator= (const Feature& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->id_ = x.id_;
        this->type_ = x.type_;
        this->shapeOffset_ = x.shapeOffset_;
      }

      return *this;
    }

    Feature::
    ~Feature ()
    {
    }

    // Features
    //

    Features::
    Features ()
    : ::xml_schema::Type (),
      feature_ (this)
    {
    }

    Features::
    Features (const Features& x,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      feature_ (x.feature_, f, this)
    {
    }

    Features::
    Features (const ::xercesc::DOMElement& e,
              ::xml_schema::Flags f,
              ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      feature_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Features::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // feature
        //
        if (n.name () == "feature" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeatureType > r (
            FeatureTraits::create (i, f, this));

          this->feature_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    Features* Features::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Features (*this, f, c);
    }

    Features& Features::
    operator= (const Features& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->feature_ = x.feature_;
      }

      return *this;
    }

    Features::
    ~Features ()
    {
    }

    // FeatureState
    //

    const FeatureState::IdType FeatureState::id_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    FeatureState::
    FeatureState (const IdType& id,
                  const StateType& state)
    : ::xml_schema::Type (),
      id_ (id, this),
      state_ (state, this)
    {
    }

    FeatureState::
    FeatureState (const FeatureState& x,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      state_ (x.state_, f, this)
    {
    }

    FeatureState::
    FeatureState (const ::xercesc::DOMElement& e,
                  ::xml_schema::Flags f,
                  ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (this),
      state_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureState::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // state
        //
        if (n.name () == "state" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< StateType > r (
            StateTraits::create (i, f, this));

          if (!state_.present ())
          {
            this->state_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!state_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "state",
          "");
      }
    }

    FeatureState* FeatureState::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureState (*this, f, c);
    }

    FeatureState& FeatureState::
    operator= (const FeatureState& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->id_ = x.id_;
        this->state_ = x.state_;
      }

      return *this;
    }

    FeatureState::
    ~FeatureState ()
    {
    }

    // FeatureStates
    //

    FeatureStates::
    FeatureStates ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    FeatureStates::
    FeatureStates (const FeatureStates& x,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    FeatureStates::
    FeatureStates (const ::xercesc::DOMElement& e,
                   ::xml_schema::Flags f,
                   ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void FeatureStates::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    FeatureStates* FeatureStates::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class FeatureStates (*this, f, c);
    }

    FeatureStates& FeatureStates::
    operator= (const FeatureStates& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    FeatureStates::
    ~FeatureStates ()
    {
    }

    // InputTypes
    //

    InputTypes::
    InputTypes ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    InputTypes::
    InputTypes (const InputTypes& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    InputTypes::
    InputTypes (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void InputTypes::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    InputTypes* InputTypes::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class InputTypes (*this, f, c);
    }

    InputTypes& InputTypes::
    operator= (const InputTypes& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    InputTypes::
    ~InputTypes ()
    {
    }

    // Connection
    //

    const Connection::SourceIdType Connection::sourceId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const Connection::TargetIdType Connection::targetId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    Connection::
    Connection (const SourceIdType& sourceId,
                const TargetIdType& targetId,
                const InputTypeType& inputType)
    : ::xml_schema::Type (),
      sourceId_ (sourceId, this),
      targetId_ (targetId, this),
      inputType_ (inputType, this)
    {
    }

    Connection::
    Connection (const SourceIdType& sourceId,
                const TargetIdType& targetId,
                ::std::unique_ptr< InputTypeType > inputType)
    : ::xml_schema::Type (),
      sourceId_ (sourceId, this),
      targetId_ (targetId, this),
      inputType_ (std::move (inputType), this)
    {
    }

    Connection::
    Connection (const Connection& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      sourceId_ (x.sourceId_, f, this),
      targetId_ (x.targetId_, f, this),
      inputType_ (x.inputType_, f, this)
    {
    }

    Connection::
    Connection (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      sourceId_ (this),
      targetId_ (this),
      inputType_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Connection::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // sourceId
        //
        if (n.name () == "sourceId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< SourceIdType > r (
            SourceIdTraits::create (i, f, this));

          if (!sourceId_.present ())
          {
            this->sourceId_.set (::std::move (r));
            continue;
          }
        }

        // targetId
        //
        if (n.name () == "targetId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< TargetIdType > r (
            TargetIdTraits::create (i, f, this));

          if (!targetId_.present ())
          {
            this->targetId_.set (::std::move (r));
            continue;
          }
        }

        // inputType
        //
        if (n.name () == "inputType" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< InputTypeType > r (
            InputTypeTraits::create (i, f, this));

          if (!inputType_.present ())
          {
            this->inputType_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!sourceId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "sourceId",
          "");
      }

      if (!targetId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "targetId",
          "");
      }

      if (!inputType_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "inputType",
          "");
      }
    }

    Connection* Connection::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Connection (*this, f, c);
    }

    Connection& Connection::
    operator= (const Connection& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->sourceId_ = x.sourceId_;
        this->targetId_ = x.targetId_;
        this->inputType_ = x.inputType_;
      }

      return *this;
    }

    Connection::
    ~Connection ()
    {
    }

    // Connections
    //

    Connections::
    Connections ()
    : ::xml_schema::Type (),
      connection_ (this)
    {
    }

    Connections::
    Connections (const Connections& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      connection_ (x.connection_, f, this)
    {
    }

    Connections::
    Connections (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      connection_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Connections::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // connection
        //
        if (n.name () == "connection" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ConnectionType > r (
            ConnectionTraits::create (i, f, this));

          this->connection_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    Connections* Connections::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Connections (*this, f, c);
    }

    Connections& Connections::
    operator= (const Connections& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->connection_ = x.connection_;
      }

      return *this;
    }

    Connections::
    ~Connections ()
    {
    }

    // AppVersion
    //

    AppVersion::
    AppVersion (const MajorType& major,
                const MinorType& minor,
                const MaintenanceType& maintenance)
    : ::xml_schema::Type (),
      major_ (major, this),
      minor_ (minor, this),
      maintenance_ (maintenance, this)
    {
    }

    AppVersion::
    AppVersion (const AppVersion& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      major_ (x.major_, f, this),
      minor_ (x.minor_, f, this),
      maintenance_ (x.maintenance_, f, this)
    {
    }

    AppVersion::
    AppVersion (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      major_ (this),
      minor_ (this),
      maintenance_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void AppVersion::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // major
        //
        if (n.name () == "major" && n.namespace_ ().empty ())
        {
          if (!major_.present ())
          {
            this->major_.set (MajorTraits::create (i, f, this));
            continue;
          }
        }

        // minor
        //
        if (n.name () == "minor" && n.namespace_ ().empty ())
        {
          if (!minor_.present ())
          {
            this->minor_.set (MinorTraits::create (i, f, this));
            continue;
          }
        }

        // maintenance
        //
        if (n.name () == "maintenance" && n.namespace_ ().empty ())
        {
          if (!maintenance_.present ())
          {
            this->maintenance_.set (MaintenanceTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!major_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "major",
          "");
      }

      if (!minor_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "minor",
          "");
      }

      if (!maintenance_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "maintenance",
          "");
      }
    }

    AppVersion* AppVersion::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class AppVersion (*this, f, c);
    }

    AppVersion& AppVersion::
    operator= (const AppVersion& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->major_ = x.major_;
        this->minor_ = x.minor_;
        this->maintenance_ = x.maintenance_;
      }

      return *this;
    }

    AppVersion::
    ~AppVersion ()
    {
    }

    // Expression
    //

    const Expression::IdType Expression::id_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const Expression::StringFormType Expression::stringForm_default_value_ (
      "name=1");

    Expression::
    Expression (const IdType& id,
                const StringFormType& stringForm)
    : ::xml_schema::Type (),
      id_ (id, this),
      stringForm_ (stringForm, this)
    {
    }

    Expression::
    Expression (const Expression& x,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      stringForm_ (x.stringForm_, f, this)
    {
    }

    Expression::
    Expression (const ::xercesc::DOMElement& e,
                ::xml_schema::Flags f,
                ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (this),
      stringForm_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Expression::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // stringForm
        //
        if (n.name () == "stringForm" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< StringFormType > r (
            StringFormTraits::create (i, f, this));

          if (!stringForm_.present ())
          {
            this->stringForm_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!stringForm_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "stringForm",
          "");
      }
    }

    Expression* Expression::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Expression (*this, f, c);
    }

    Expression& Expression::
    operator= (const Expression& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->id_ = x.id_;
        this->stringForm_ = x.stringForm_;
      }

      return *this;
    }

    Expression::
    ~Expression ()
    {
    }

    // Expressions
    //

    Expressions::
    Expressions ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    Expressions::
    Expressions (const Expressions& x,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    Expressions::
    Expressions (const ::xercesc::DOMElement& e,
                 ::xml_schema::Flags f,
                 ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Expressions::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    Expressions* Expressions::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Expressions (*this, f, c);
    }

    Expressions& Expressions::
    operator= (const Expressions& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    Expressions::
    ~Expressions ()
    {
    }

    // ExpressionLink
    //

    const ExpressionLink::ParameterIdType ExpressionLink::parameterId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const ExpressionLink::ExpressionIdType ExpressionLink::expressionId_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    ExpressionLink::
    ExpressionLink (const ParameterIdType& parameterId,
                    const ExpressionIdType& expressionId)
    : ::xml_schema::Type (),
      parameterId_ (parameterId, this),
      expressionId_ (expressionId, this)
    {
    }

    ExpressionLink::
    ExpressionLink (const ExpressionLink& x,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      parameterId_ (x.parameterId_, f, this),
      expressionId_ (x.expressionId_, f, this)
    {
    }

    ExpressionLink::
    ExpressionLink (const ::xercesc::DOMElement& e,
                    ::xml_schema::Flags f,
                    ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      parameterId_ (this),
      expressionId_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExpressionLink::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // parameterId
        //
        if (n.name () == "parameterId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ParameterIdType > r (
            ParameterIdTraits::create (i, f, this));

          if (!parameterId_.present ())
          {
            this->parameterId_.set (::std::move (r));
            continue;
          }
        }

        // expressionId
        //
        if (n.name () == "expressionId" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ExpressionIdType > r (
            ExpressionIdTraits::create (i, f, this));

          if (!expressionId_.present ())
          {
            this->expressionId_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!parameterId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "parameterId",
          "");
      }

      if (!expressionId_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "expressionId",
          "");
      }
    }

    ExpressionLink* ExpressionLink::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpressionLink (*this, f, c);
    }

    ExpressionLink& ExpressionLink::
    operator= (const ExpressionLink& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->parameterId_ = x.parameterId_;
        this->expressionId_ = x.expressionId_;
      }

      return *this;
    }

    ExpressionLink::
    ~ExpressionLink ()
    {
    }

    // ExpressionLinks
    //

    ExpressionLinks::
    ExpressionLinks ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    ExpressionLinks::
    ExpressionLinks (const ExpressionLinks& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    ExpressionLinks::
    ExpressionLinks (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExpressionLinks::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    ExpressionLinks* ExpressionLinks::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpressionLinks (*this, f, c);
    }

    ExpressionLinks& ExpressionLinks::
    operator= (const ExpressionLinks& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    ExpressionLinks::
    ~ExpressionLinks ()
    {
    }

    // ExpressionGroupEntries
    //

    const ExpressionGroupEntries::ArrayType ExpressionGroupEntries::array_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    ExpressionGroupEntries::
    ExpressionGroupEntries ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    ExpressionGroupEntries::
    ExpressionGroupEntries (const ExpressionGroupEntries& x,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    ExpressionGroupEntries::
    ExpressionGroupEntries (const ::xercesc::DOMElement& e,
                            ::xml_schema::Flags f,
                            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExpressionGroupEntries::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    ExpressionGroupEntries* ExpressionGroupEntries::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpressionGroupEntries (*this, f, c);
    }

    ExpressionGroupEntries& ExpressionGroupEntries::
    operator= (const ExpressionGroupEntries& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    ExpressionGroupEntries::
    ~ExpressionGroupEntries ()
    {
    }

    // ExpressionGroup
    //

    const ExpressionGroup::IdType ExpressionGroup::id_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    const ExpressionGroup::NameType ExpressionGroup::name_default_value_ (
      "noName");

    ExpressionGroup::
    ExpressionGroup (const IdType& id,
                     const NameType& name,
                     const EntriesType& entries)
    : ::xml_schema::Type (),
      id_ (id, this),
      name_ (name, this),
      entries_ (entries, this)
    {
    }

    ExpressionGroup::
    ExpressionGroup (const IdType& id,
                     const NameType& name,
                     ::std::unique_ptr< EntriesType > entries)
    : ::xml_schema::Type (),
      id_ (id, this),
      name_ (name, this),
      entries_ (std::move (entries), this)
    {
    }

    ExpressionGroup::
    ExpressionGroup (const ExpressionGroup& x,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      name_ (x.name_, f, this),
      entries_ (x.entries_, f, this)
    {
    }

    ExpressionGroup::
    ExpressionGroup (const ::xercesc::DOMElement& e,
                     ::xml_schema::Flags f,
                     ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (this),
      name_ (this),
      entries_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExpressionGroup::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // name
        //
        if (n.name () == "name" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< NameType > r (
            NameTraits::create (i, f, this));

          if (!name_.present ())
          {
            this->name_.set (::std::move (r));
            continue;
          }
        }

        // entries
        //
        if (n.name () == "entries" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< EntriesType > r (
            EntriesTraits::create (i, f, this));

          if (!entries_.present ())
          {
            this->entries_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!name_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "name",
          "");
      }

      if (!entries_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "entries",
          "");
      }
    }

    ExpressionGroup* ExpressionGroup::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpressionGroup (*this, f, c);
    }

    ExpressionGroup& ExpressionGroup::
    operator= (const ExpressionGroup& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->id_ = x.id_;
        this->name_ = x.name_;
        this->entries_ = x.entries_;
      }

      return *this;
    }

    ExpressionGroup::
    ~ExpressionGroup ()
    {
    }

    // ExpressionGroups
    //

    ExpressionGroups::
    ExpressionGroups ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    ExpressionGroups::
    ExpressionGroups (const ExpressionGroups& x,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    ExpressionGroups::
    ExpressionGroups (const ::xercesc::DOMElement& e,
                      ::xml_schema::Flags f,
                      ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void ExpressionGroups::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    ExpressionGroups* ExpressionGroups::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class ExpressionGroups (*this, f, c);
    }

    ExpressionGroups& ExpressionGroups::
    operator= (const ExpressionGroups& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    ExpressionGroups::
    ~ExpressionGroups ()
    {
    }

    // Project
    //

    Project::
    Project (const AppVersionType& appVersion,
             const FileVersionType& fileVersion,
             const FeaturesType& features,
             const StatesType& states,
             const ConnectionsType& connections,
             const ExpressionsType& expressions)
    : ::xml_schema::Type (),
      appVersion_ (appVersion, this),
      fileVersion_ (fileVersion, this),
      features_ (features, this),
      states_ (states, this),
      connections_ (connections, this),
      expressions_ (expressions, this),
      expressionLinks_ (this),
      expressionGroups_ (this)
    {
    }

    Project::
    Project (::std::unique_ptr< AppVersionType > appVersion,
             const FileVersionType& fileVersion,
             ::std::unique_ptr< FeaturesType > features,
             ::std::unique_ptr< StatesType > states,
             ::std::unique_ptr< ConnectionsType > connections,
             ::std::unique_ptr< ExpressionsType > expressions)
    : ::xml_schema::Type (),
      appVersion_ (std::move (appVersion), this),
      fileVersion_ (fileVersion, this),
      features_ (std::move (features), this),
      states_ (std::move (states), this),
      connections_ (std::move (connections), this),
      expressions_ (std::move (expressions), this),
      expressionLinks_ (this),
      expressionGroups_ (this)
    {
    }

    Project::
    Project (const Project& x,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      appVersion_ (x.appVersion_, f, this),
      fileVersion_ (x.fileVersion_, f, this),
      features_ (x.features_, f, this),
      states_ (x.states_, f, this),
      connections_ (x.connections_, f, this),
      expressions_ (x.expressions_, f, this),
      expressionLinks_ (x.expressionLinks_, f, this),
      expressionGroups_ (x.expressionGroups_, f, this)
    {
    }

    Project::
    Project (const ::xercesc::DOMElement& e,
             ::xml_schema::Flags f,
             ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      appVersion_ (this),
      fileVersion_ (this),
      features_ (this),
      states_ (this),
      connections_ (this),
      expressions_ (this),
      expressionLinks_ (this),
      expressionGroups_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Project::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // appVersion
        //
        if (n.name () == "appVersion" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< AppVersionType > r (
            AppVersionTraits::create (i, f, this));

          if (!appVersion_.present ())
          {
            this->appVersion_.set (::std::move (r));
            continue;
          }
        }

        // fileVersion
        //
        if (n.name () == "fileVersion" && n.namespace_ ().empty ())
        {
          if (!fileVersion_.present ())
          {
            this->fileVersion_.set (FileVersionTraits::create (i, f, this));
            continue;
          }
        }

        // features
        //
        if (n.name () == "features" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< FeaturesType > r (
            FeaturesTraits::create (i, f, this));

          if (!features_.present ())
          {
            this->features_.set (::std::move (r));
            continue;
          }
        }

        // states
        //
        if (n.name () == "states" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< StatesType > r (
            StatesTraits::create (i, f, this));

          if (!states_.present ())
          {
            this->states_.set (::std::move (r));
            continue;
          }
        }

        // connections
        //
        if (n.name () == "connections" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ConnectionsType > r (
            ConnectionsTraits::create (i, f, this));

          if (!connections_.present ())
          {
            this->connections_.set (::std::move (r));
            continue;
          }
        }

        // expressions
        //
        if (n.name () == "expressions" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ExpressionsType > r (
            ExpressionsTraits::create (i, f, this));

          if (!expressions_.present ())
          {
            this->expressions_.set (::std::move (r));
            continue;
          }
        }

        // expressionLinks
        //
        if (n.name () == "expressionLinks" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ExpressionLinksType > r (
            ExpressionLinksTraits::create (i, f, this));

          if (!this->expressionLinks_)
          {
            this->expressionLinks_.set (::std::move (r));
            continue;
          }
        }

        // expressionGroups
        //
        if (n.name () == "expressionGroups" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ExpressionGroupsType > r (
            ExpressionGroupsTraits::create (i, f, this));

          if (!this->expressionGroups_)
          {
            this->expressionGroups_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!appVersion_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "appVersion",
          "");
      }

      if (!fileVersion_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "fileVersion",
          "");
      }

      if (!features_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "features",
          "");
      }

      if (!states_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "states",
          "");
      }

      if (!connections_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "connections",
          "");
      }

      if (!expressions_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "expressions",
          "");
      }
    }

    Project* Project::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Project (*this, f, c);
    }

    Project& Project::
    operator= (const Project& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->appVersion_ = x.appVersion_;
        this->fileVersion_ = x.fileVersion_;
        this->features_ = x.features_;
        this->states_ = x.states_;
        this->connections_ = x.connections_;
        this->expressions_ = x.expressions_;
        this->expressionLinks_ = x.expressionLinks_;
        this->expressionGroups_ = x.expressionGroups_;
      }

      return *this;
    }

    Project::
    ~Project ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::Project >
    project (const ::std::string& u,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (const ::std::string& u,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (const ::std::string& u,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::project (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::project (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::project (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::project (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             const ::std::string& sid,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::project (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::std::istream& is,
             const ::std::string& sid,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::project (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::xercesc::InputSource& i,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::xercesc::InputSource& i,
             ::xml_schema::ErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::xercesc::InputSource& i,
             ::xercesc::DOMErrorHandler& h,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::Project > (
        ::prj::srl::project (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (const ::xercesc::DOMDocument& doc,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::Project > (
          ::prj::srl::project (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "project" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::Project > r (
          ::xsd::cxx::tree::traits< ::prj::srl::Project, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "project",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::Project >
    project (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
             ::xml_schema::Flags f,
             const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "project" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::Project > r (
          ::xsd::cxx::tree::traits< ::prj::srl::Project, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "project",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const Feature& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // type
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "type",
            e));

        s << i.type ();
      }

      // shapeOffset
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "shapeOffset",
            e));

        s << i.shapeOffset ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Features& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // feature
      //
      for (Features::FeatureConstIterator
           b (i.feature ().begin ()), n (i.feature ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "feature",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureState& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // state
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "state",
            e));

        s << i.state ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const FeatureStates& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (FeatureStates::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const InputTypes& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (InputTypes::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Connection& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // sourceId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "sourceId",
            e));

        s << i.sourceId ();
      }

      // targetId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "targetId",
            e));

        s << i.targetId ();
      }

      // inputType
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "inputType",
            e));

        s << i.inputType ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Connections& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // connection
      //
      for (Connections::ConnectionConstIterator
           b (i.connection ().begin ()), n (i.connection ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "connection",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const AppVersion& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // major
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "major",
            e));

        s << i.major ();
      }

      // minor
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "minor",
            e));

        s << i.minor ();
      }

      // maintenance
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "maintenance",
            e));

        s << i.maintenance ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Expression& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // stringForm
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "stringForm",
            e));

        s << i.stringForm ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Expressions& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (Expressions::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionLink& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // parameterId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "parameterId",
            e));

        s << i.parameterId ();
      }

      // expressionId
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "expressionId",
            e));

        s << i.expressionId ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionLinks& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (ExpressionLinks::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionGroupEntries& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (ExpressionGroupEntries::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionGroup& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // name
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "name",
            e));

        s << i.name ();
      }

      // entries
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "entries",
            e));

        s << i.entries ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const ExpressionGroups& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (ExpressionGroups::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Project& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // appVersion
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "appVersion",
            e));

        s << i.appVersion ();
      }

      // fileVersion
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "fileVersion",
            e));

        s << i.fileVersion ();
      }

      // features
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "features",
            e));

        s << i.features ();
      }

      // states
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "states",
            e));

        s << i.states ();
      }

      // connections
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "connections",
            e));

        s << i.connections ();
      }

      // expressions
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "expressions",
            e));

        s << i.expressions ();
      }

      // expressionLinks
      //
      if (i.expressionLinks ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "expressionLinks",
            e));

        s << *i.expressionLinks ();
      }

      // expressionGroups
      //
      if (i.expressionGroups ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "expressionGroups",
            e));

        s << *i.expressionGroups ();
      }
    }

    void
    project (::std::ostream& o,
             const ::prj::srl::Project& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    project (::std::ostream& o,
             const ::prj::srl::Project& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    project (::std::ostream& o,
             const ::prj::srl::Project& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    project (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::Project& s,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    project (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::Project& s,
             ::xml_schema::ErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    project (::xercesc::XMLFormatTarget& t,
             const ::prj::srl::Project& s,
             ::xercesc::DOMErrorHandler& h,
             const ::xml_schema::NamespaceInfomap& m,
             const ::std::string& e,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::project (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    project (::xercesc::DOMDocument& d,
             const ::prj::srl::Project& s,
             ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "project" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "project",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    project (const ::prj::srl::Project& s,
             const ::xml_schema::NamespaceInfomap& m,
             ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "project",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::project (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.


// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "view.h"

namespace prj
{
  namespace srl
  {
    // State
    // 

    const State::IdType& State::
    id () const
    {
      return this->id_.get ();
    }

    State::IdType& State::
    id ()
    {
      return this->id_.get ();
    }

    void State::
    id (const IdType& x)
    {
      this->id_.set (x);
    }

    void State::
    id (::std::unique_ptr< IdType > x)
    {
      this->id_.set (std::move (x));
    }

    const State::IdType& State::
    id_default_value ()
    {
      return id_default_value_;
    }

    const State::VisibleType& State::
    visible () const
    {
      return this->visible_.get ();
    }

    State::VisibleType& State::
    visible ()
    {
      return this->visible_.get ();
    }

    void State::
    visible (const VisibleType& x)
    {
      this->visible_.set (x);
    }

    State::VisibleType State::
    visible_default_value ()
    {
      return VisibleType (false);
    }


    // States
    // 

    const States::ArraySequence& States::
    array () const
    {
      return this->array_;
    }

    States::ArraySequence& States::
    array ()
    {
      return this->array_;
    }

    void States::
    array (const ArraySequence& s)
    {
      this->array_ = s;
    }


    // Ortho
    // 

    const Ortho::LeftType& Ortho::
    left () const
    {
      return this->left_.get ();
    }

    Ortho::LeftType& Ortho::
    left ()
    {
      return this->left_.get ();
    }

    void Ortho::
    left (const LeftType& x)
    {
      this->left_.set (x);
    }

    const Ortho::RightType& Ortho::
    right () const
    {
      return this->right_.get ();
    }

    Ortho::RightType& Ortho::
    right ()
    {
      return this->right_.get ();
    }

    void Ortho::
    right (const RightType& x)
    {
      this->right_.set (x);
    }

    const Ortho::BottomType& Ortho::
    bottom () const
    {
      return this->bottom_.get ();
    }

    Ortho::BottomType& Ortho::
    bottom ()
    {
      return this->bottom_.get ();
    }

    void Ortho::
    bottom (const BottomType& x)
    {
      this->bottom_.set (x);
    }

    const Ortho::TopType& Ortho::
    top () const
    {
      return this->top_.get ();
    }

    Ortho::TopType& Ortho::
    top ()
    {
      return this->top_.get ();
    }

    void Ortho::
    top (const TopType& x)
    {
      this->top_.set (x);
    }

    const Ortho::NearType& Ortho::
    near () const
    {
      return this->near_.get ();
    }

    Ortho::NearType& Ortho::
    near ()
    {
      return this->near_.get ();
    }

    void Ortho::
    near (const NearType& x)
    {
      this->near_.set (x);
    }

    const Ortho::FarType& Ortho::
    far () const
    {
      return this->far_.get ();
    }

    Ortho::FarType& Ortho::
    far ()
    {
      return this->far_.get ();
    }

    void Ortho::
    far (const FarType& x)
    {
      this->far_.set (x);
    }


    // View
    // 

    const View::StatesType& View::
    states () const
    {
      return this->states_.get ();
    }

    View::StatesType& View::
    states ()
    {
      return this->states_.get ();
    }

    void View::
    states (const StatesType& x)
    {
      this->states_.set (x);
    }

    void View::
    states (::std::unique_ptr< StatesType > x)
    {
      this->states_.set (std::move (x));
    }

    const View::CsysOptional& View::
    csys () const
    {
      return this->csys_;
    }

    View::CsysOptional& View::
    csys ()
    {
      return this->csys_;
    }

    void View::
    csys (const CsysType& x)
    {
      this->csys_.set (x);
    }

    void View::
    csys (const CsysOptional& x)
    {
      this->csys_ = x;
    }

    void View::
    csys (::std::unique_ptr< CsysType > x)
    {
      this->csys_.set (std::move (x));
    }

    const View::OrthoOptional& View::
    ortho () const
    {
      return this->ortho_;
    }

    View::OrthoOptional& View::
    ortho ()
    {
      return this->ortho_;
    }

    void View::
    ortho (const OrthoType& x)
    {
      this->ortho_.set (x);
    }

    void View::
    ortho (const OrthoOptional& x)
    {
      this->ortho_ = x;
    }

    void View::
    ortho (::std::unique_ptr< OrthoType > x)
    {
      this->ortho_.set (std::move (x));
    }
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace prj
{
  namespace srl
  {
    // State
    //

    const State::IdType State::id_default_value_ (
      "00000000-0000-0000-0000-000000000000");

    State::
    State (const IdType& id,
           const VisibleType& visible)
    : ::xml_schema::Type (),
      id_ (id, this),
      visible_ (visible, this)
    {
    }

    State::
    State (const State& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      id_ (x.id_, f, this),
      visible_ (x.visible_, f, this)
    {
    }

    State::
    State (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      id_ (this),
      visible_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void State::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // id
        //
        if (n.name () == "id" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< IdType > r (
            IdTraits::create (i, f, this));

          if (!id_.present ())
          {
            this->id_.set (::std::move (r));
            continue;
          }
        }

        // visible
        //
        if (n.name () == "visible" && n.namespace_ ().empty ())
        {
          if (!visible_.present ())
          {
            this->visible_.set (VisibleTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!id_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "id",
          "");
      }

      if (!visible_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "visible",
          "");
      }
    }

    State* State::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class State (*this, f, c);
    }

    State& State::
    operator= (const State& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->id_ = x.id_;
        this->visible_ = x.visible_;
      }

      return *this;
    }

    State::
    ~State ()
    {
    }

    // States
    //

    States::
    States ()
    : ::xml_schema::Type (),
      array_ (this)
    {
    }

    States::
    States (const States& x,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      array_ (x.array_, f, this)
    {
    }

    States::
    States (const ::xercesc::DOMElement& e,
            ::xml_schema::Flags f,
            ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      array_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void States::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // array
        //
        if (n.name () == "array" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< ArrayType > r (
            ArrayTraits::create (i, f, this));

          this->array_.push_back (::std::move (r));
          continue;
        }

        break;
      }
    }

    States* States::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class States (*this, f, c);
    }

    States& States::
    operator= (const States& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->array_ = x.array_;
      }

      return *this;
    }

    States::
    ~States ()
    {
    }

    // Ortho
    //

    Ortho::
    Ortho (const LeftType& left,
           const RightType& right,
           const BottomType& bottom,
           const TopType& top,
           const NearType& near,
           const FarType& far)
    : ::xml_schema::Type (),
      left_ (left, this),
      right_ (right, this),
      bottom_ (bottom, this),
      top_ (top, this),
      near_ (near, this),
      far_ (far, this)
    {
    }

    Ortho::
    Ortho (const Ortho& x,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      left_ (x.left_, f, this),
      right_ (x.right_, f, this),
      bottom_ (x.bottom_, f, this),
      top_ (x.top_, f, this),
      near_ (x.near_, f, this),
      far_ (x.far_, f, this)
    {
    }

    Ortho::
    Ortho (const ::xercesc::DOMElement& e,
           ::xml_schema::Flags f,
           ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      left_ (this),
      right_ (this),
      bottom_ (this),
      top_ (this),
      near_ (this),
      far_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void Ortho::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // left
        //
        if (n.name () == "left" && n.namespace_ ().empty ())
        {
          if (!left_.present ())
          {
            this->left_.set (LeftTraits::create (i, f, this));
            continue;
          }
        }

        // right
        //
        if (n.name () == "right" && n.namespace_ ().empty ())
        {
          if (!right_.present ())
          {
            this->right_.set (RightTraits::create (i, f, this));
            continue;
          }
        }

        // bottom
        //
        if (n.name () == "bottom" && n.namespace_ ().empty ())
        {
          if (!bottom_.present ())
          {
            this->bottom_.set (BottomTraits::create (i, f, this));
            continue;
          }
        }

        // top
        //
        if (n.name () == "top" && n.namespace_ ().empty ())
        {
          if (!top_.present ())
          {
            this->top_.set (TopTraits::create (i, f, this));
            continue;
          }
        }

        // near
        //
        if (n.name () == "near" && n.namespace_ ().empty ())
        {
          if (!near_.present ())
          {
            this->near_.set (NearTraits::create (i, f, this));
            continue;
          }
        }

        // far
        //
        if (n.name () == "far" && n.namespace_ ().empty ())
        {
          if (!far_.present ())
          {
            this->far_.set (FarTraits::create (i, f, this));
            continue;
          }
        }

        break;
      }

      if (!left_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "left",
          "");
      }

      if (!right_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "right",
          "");
      }

      if (!bottom_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "bottom",
          "");
      }

      if (!top_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "top",
          "");
      }

      if (!near_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "near",
          "");
      }

      if (!far_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "far",
          "");
      }
    }

    Ortho* Ortho::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class Ortho (*this, f, c);
    }

    Ortho& Ortho::
    operator= (const Ortho& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->left_ = x.left_;
        this->right_ = x.right_;
        this->bottom_ = x.bottom_;
        this->top_ = x.top_;
        this->near_ = x.near_;
        this->far_ = x.far_;
      }

      return *this;
    }

    Ortho::
    ~Ortho ()
    {
    }

    // View
    //

    View::
    View (const StatesType& states)
    : ::xml_schema::Type (),
      states_ (states, this),
      csys_ (this),
      ortho_ (this)
    {
    }

    View::
    View (::std::unique_ptr< StatesType > states)
    : ::xml_schema::Type (),
      states_ (std::move (states), this),
      csys_ (this),
      ortho_ (this)
    {
    }

    View::
    View (const View& x,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
    : ::xml_schema::Type (x, f, c),
      states_ (x.states_, f, this),
      csys_ (x.csys_, f, this),
      ortho_ (x.ortho_, f, this)
    {
    }

    View::
    View (const ::xercesc::DOMElement& e,
          ::xml_schema::Flags f,
          ::xml_schema::Container* c)
    : ::xml_schema::Type (e, f | ::xml_schema::Flags::base, c),
      states_ (this),
      csys_ (this),
      ortho_ (this)
    {
      if ((f & ::xml_schema::Flags::base) == 0)
      {
        ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
        this->parse (p, f);
      }
    }

    void View::
    parse (::xsd::cxx::xml::dom::parser< char >& p,
           ::xml_schema::Flags f)
    {
      for (; p.more_content (); p.next_content (false))
      {
        const ::xercesc::DOMElement& i (p.cur_element ());
        const ::xsd::cxx::xml::qualified_name< char > n (
          ::xsd::cxx::xml::dom::name< char > (i));

        // states
        //
        if (n.name () == "states" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< StatesType > r (
            StatesTraits::create (i, f, this));

          if (!states_.present ())
          {
            this->states_.set (::std::move (r));
            continue;
          }
        }

        // csys
        //
        if (n.name () == "csys" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< CsysType > r (
            CsysTraits::create (i, f, this));

          if (!this->csys_)
          {
            this->csys_.set (::std::move (r));
            continue;
          }
        }

        // ortho
        //
        if (n.name () == "ortho" && n.namespace_ ().empty ())
        {
          ::std::unique_ptr< OrthoType > r (
            OrthoTraits::create (i, f, this));

          if (!this->ortho_)
          {
            this->ortho_.set (::std::move (r));
            continue;
          }
        }

        break;
      }

      if (!states_.present ())
      {
        throw ::xsd::cxx::tree::expected_element< char > (
          "states",
          "");
      }
    }

    View* View::
    _clone (::xml_schema::Flags f,
            ::xml_schema::Container* c) const
    {
      return new class View (*this, f, c);
    }

    View& View::
    operator= (const View& x)
    {
      if (this != &x)
      {
        static_cast< ::xml_schema::Type& > (*this) = x;
        this->states_ = x.states_;
        this->csys_ = x.csys_;
        this->ortho_ = x.ortho_;
      }

      return *this;
    }

    View::
    ~View ()
    {
    }
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace prj
{
  namespace srl
  {
    ::std::unique_ptr< ::prj::srl::View >
    view (const ::std::string& u,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (const ::std::string& u,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          u, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::view (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::view (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is);
      return ::prj::srl::view (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::view (isrc, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0,
        (f & ::xml_schema::Flags::keep_dom) == 0);

      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::view (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
      return ::prj::srl::view (isrc, h, f, p);
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::xercesc::InputSource& i,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xsd::cxx::tree::error_handler< char > h;

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::xercesc::InputSource& i,
          ::xml_schema::ErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::parse< char > (
          i, h, p, f));

      if (!d.get ())
        throw ::xsd::cxx::tree::parsing< char > ();

      return ::std::unique_ptr< ::prj::srl::View > (
        ::prj::srl::view (
          std::move (d), f | ::xml_schema::Flags::own_dom, p));
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (const ::xercesc::DOMDocument& doc,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties& p)
    {
      if (f & ::xml_schema::Flags::keep_dom)
      {
        ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
          static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

        return ::std::unique_ptr< ::prj::srl::View > (
          ::prj::srl::view (
            std::move (d), f | ::xml_schema::Flags::own_dom, p));
      }

      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "view" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::View > r (
          ::xsd::cxx::tree::traits< ::prj::srl::View, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "view",
        "http://www.cadseer.com/prj/srl");
    }

    ::std::unique_ptr< ::prj::srl::View >
    view (::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d,
          ::xml_schema::Flags f,
          const ::xml_schema::Properties&)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > c (
        ((f & ::xml_schema::Flags::keep_dom) &&
         !(f & ::xml_schema::Flags::own_dom))
        ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
        : 0);

      ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
      const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (f & ::xml_schema::Flags::keep_dom)
        doc.setUserData (::xml_schema::dom::tree_node_key,
                         (c.get () ? &c : &d),
                         0);

      if (n.name () == "view" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        ::std::unique_ptr< ::prj::srl::View > r (
          ::xsd::cxx::tree::traits< ::prj::srl::View, char >::create (
            e, f, 0));
        return r;
      }

      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "view",
        "http://www.cadseer.com/prj/srl");
    }
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace prj
{
  namespace srl
  {
    void
    operator<< (::xercesc::DOMElement& e, const State& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // id
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "id",
            e));

        s << i.id ();
      }

      // visible
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "visible",
            e));

        s << i.visible ();
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const States& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // array
      //
      for (States::ArrayConstIterator
           b (i.array ().begin ()), n (i.array ().end ());
           b != n; ++b)
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "array",
            e));

        s << *b;
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const Ortho& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // left
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "left",
            e));

        s << ::xml_schema::AsDouble(i.left ());
      }

      // right
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "right",
            e));

        s << ::xml_schema::AsDouble(i.right ());
      }

      // bottom
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "bottom",
            e));

        s << ::xml_schema::AsDouble(i.bottom ());
      }

      // top
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "top",
            e));

        s << ::xml_schema::AsDouble(i.top ());
      }

      // near
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "near",
            e));

        s << ::xml_schema::AsDouble(i.near ());
      }

      // far
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "far",
            e));

        s << ::xml_schema::AsDouble(i.far ());
      }
    }

    void
    operator<< (::xercesc::DOMElement& e, const View& i)
    {
      e << static_cast< const ::xml_schema::Type& > (i);

      // states
      //
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "states",
            e));

        s << i.states ();
      }

      // csys
      //
      if (i.csys ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "csys",
            e));

        s << *i.csys ();
      }

      // ortho
      //
      if (i.ortho ())
      {
        ::xercesc::DOMElement& s (
          ::xsd::cxx::xml::dom::create_element (
            "ortho",
            e));

        s << *i.ortho ();
      }
    }

    void
    view (::std::ostream& o,
          const ::prj::srl::View& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    view (::std::ostream& o,
          const ::prj::srl::View& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xsd::cxx::xml::auto_initializer i (
        (f & ::xml_schema::Flags::dont_initialize) == 0);

      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    view (::std::ostream& o,
          const ::prj::srl::View& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));
      ::xsd::cxx::xml::dom::ostream_format_target t (o);
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    view (::xercesc::XMLFormatTarget& t,
          const ::prj::srl::View& s,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));

      ::xsd::cxx::tree::error_handler< char > h;

      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
      }
    }

    void
    view (::xercesc::XMLFormatTarget& t,
          const ::prj::srl::View& s,
          ::xml_schema::ErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    view (::xercesc::XMLFormatTarget& t,
          const ::prj::srl::View& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::NamespaceInfomap& m,
          const ::std::string& e,
          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::prj::srl::view (s, m, f));
      if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
      {
        throw ::xsd::cxx::tree::serialization< char > ();
      }
    }

    void
    view (::xercesc::DOMDocument& d,
          const ::prj::srl::View& s,
          ::xml_schema::Flags)
    {
      ::xercesc::DOMElement& e (*d.getDocumentElement ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (e));

      if (n.name () == "view" &&
          n.namespace_ () == "http://www.cadseer.com/prj/srl")
      {
        e << s;
      }
      else
      {
        throw ::xsd::cxx::tree::unexpected_element < char > (
          n.name (),
          n.namespace_ (),
          "view",
          "http://www.cadseer.com/prj/srl");
      }
    }

    ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument >
    view (const ::prj::srl::View& s,
          const ::xml_schema::NamespaceInfomap& m,
          ::xml_schema::Flags f)
    {
      ::xml_schema::dom::unique_ptr< ::xercesc::DOMDocument > d (
        ::xsd::cxx::xml::dom::serialize< char > (
          "view",
          "http://www.cadseer.com/prj/srl",
          m, f));

      ::prj::srl::view (*d, s, f);
      return d;
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

